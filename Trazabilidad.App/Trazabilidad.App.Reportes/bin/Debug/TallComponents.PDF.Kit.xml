<?xml version="1.0"?>
<doc>
  <assembly>
    <name>TallComponents.PDF.Kit</name>
  </assembly>
  <members>
    <member name="F:TallComponents.PDF.Rasterizer.PixelFormat.Bw1Bpp">
      <summary>
            1 bit per pixel, black and white.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Rasterizer.PixelFormat.Rgba32Bpp">
      <summary>
            32 bits per pixel, RGB + alpha.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.IGlyphComparer">
      <summary>
            Exposes a method that compares two glyphs.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.IGlyphComparer.Compare(TallComponents.PDF.TextExtraction.Glyph,TallComponents.PDF.TextExtraction.Glyph)">
      <summary>
            Compares two glyphs and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
      <param name="x">The first glyph to compare.</param>
      <param name="y">The second glyph to compare.</param>
      <returns>Value Condition:
              - Less than zero x is less than y. 
              - Zero x equals y. 
              - Greater than zero x is greater than y.</returns>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField">
      <summary>
            A Code39 Barcode PDF form field.  
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.OneDimensionalBarcodeField">
      <summary>
            A OneDimensionalBarcode PDF form field is the base class for all 1D barcodes. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField">
      <summary>
            A barcode PDF form field is the base class for all barcodes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.ValueField">
      <summary>
            A PDF form field with a Value. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Field">
      <summary>
            The base class for any PDF form field. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Object">
      <summary>
            Base class of all objects, no public functionality is provided.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.Field.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The visitor to accept.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.FullName">
      <summary>
            The fully qualified name for this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.ToolTip">
      <summary>
            The name of the field as used in the user interface. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.Widgets">
      <summary>
            The asociated widgets for this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.ReadOnly">
      <summary>
            Read-only state of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.RequiredMode">
      <summary>
            The required mode for this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.Export">
      <summary>
            This field is included when the form is exported or submitted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.MappingName">
      <summary>
            Used when exporting data from the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Field.XfaInfo">
      <summary>
            Additional XFA specific information for this field.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ValueField.ResetValue">
      <summary>
            Reset the value to the default value.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueField.Value">
      <summary>
            The value associated with this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueField.DefaultValue">
      <summary>
            The default value associated with this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueField.FormattedValue">
      <summary>
            The Formatted Value. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueField.FormatAction">
      <summary>
            The action that will be executed before a field is displayed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueField.ValidateAction">
      <summary>
            An action that will be executed for field value validation (when setting the value).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueField.KeyStrokeAction">
      <summary>
            An action that will be executed when a user types a key-stoke (or an other item is selected from a list).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueField.CalculateAction">
      <summary>
            An action executed the reflect changes in other field value changes. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField.TextLocation">
      <summary>
            The used text location for this barcode
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.OneDimensionalBarcodeField.DataLength">
      <summary>
            The expected maximum number of characters
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField.Checksum">
      <summary>
            specifies if this  barcode includes a checksum.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField.WideNarrowRatio">
      <summary>
            Specifies the wide narrow ratio for this barcode 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.FdfFormData">
      <summary>
            Specialization of FormData that represents a FDF document.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.FormData">
      <summary>
            FormData is a abstract base class. 
            FormData exposes the [submitted] form data polymorphically as a name/value pair collection.
            The 6 supported data formats (FDF, XFDF, XDP, XML, HTTP and PDF) are implemented as derived classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FormData.Create(System.Web.HttpRequest)">
      <summary>
            Returns a specialized instance of one of the 6 derived FormData classes or <see langword="null" /> if the HttpRequest does not contain 
            valid data.
            </summary>
      <param name="request">A HttpRequest with returned data (in FDF, XFDF, XDP, XML, HTTP or PDF format)</param>
      <returns>
            Returns a specialized instance of one of the 6 derived FormData classes or <see langword="null" /> if the HttpRequest does not contain 
            valid data.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FormData.Create(System.IO.Stream)">
      <summary>
            Returns a specialized instance of one of the derived FormData classes or <see langword="null" /> if the stream does not contain 
            valid data.
            </summary>
      <param name="stream">A stream with data (in FDF, XFDF, XDP, XML or PDF format)</param>
      <returns>
            Returns a specialized instance of one of the derived FormData classes or <see langword="null" /> if the stream does not contain 
            valid data.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FormData.Write(System.IO.Stream)">
      <summary>
            Write this FormData to the given stream.
            </summary>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FormData.Write(System.IO.BinaryWriter)">
      <summary>
            Write this FormData to the given binary writer.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.FormData.FullNames">
      <summary>
            Returns a string array with fullnames
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.FormData.Item(System.String)">
      <summary>
            Returns the data for this full qualified field name
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.#ctor(System.IO.Stream)">
      <summary>
            Create a FdfFormData object, based on existing data.
            </summary>
      <param name="stream">The stream to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.Write(System.IO.BinaryWriter)">
      <summary>
            Write this FDF document.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.FdfFormData.Path">
      <summary>
            The path from the PDF document file that this FDF file was exported 
            from or is intended to be imported into.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.WidgetCollection">
      <summary>
            Collection of form widgets. Associated with a page and field
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Contains(TallComponents.PDF.Annotations.Widgets.Widget)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Widgets.Widget" /> is in the <see cref="T:TallComponents.PDF.Annotations.Widgets.WidgetCollection" />.
            </summary>
      <param name="widget">The <see cref="T:TallComponents.PDF.Annotations.Widgets.Widget" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Widgets.Widget" /> is found in this <see cref="T:TallComponents.PDF.Annotations.Widgets.WidgetCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.IndexOf(TallComponents.PDF.Annotations.Widgets.Widget)">
      <summary>
            Returns the index of the specified widget in the collection.
            </summary>
      <param name="widget">The widget to locate in this collection.</param>
      <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Add(TallComponents.PDF.Annotations.Widgets.Widget)">
      <summary>
            Add a widget to the end of this collection.
            </summary>
      <param name="widget">The widget to add.</param>
      <returns>
            The zero-based index where the widget is added.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Remove(TallComponents.PDF.Annotations.Widgets.Widget)">
      <summary>
            Removes the given widget from this collection.
            </summary>
      <param name="widget">The widget to remove.</param>
      <returns>true if removing the widgets succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.AddRange(TallComponents.PDF.Annotations.Widgets.Widget[])">
      <summary>
            Adds the elements of an array of widgets to the end of the collection.
            </summary>
      <param name="widgetAnnotations">The array of widgets to be addded to the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Widgets.Widget)">
      <summary>
            Insert an widget at the specified index.
            </summary>
      <param name="index">The zero-based index of the widget after insertion.</param>
      <param name="widget">The widget to insert.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a widget at the specified index.
            </summary>
      <param name="index">The zero-based index of the widget to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Clear">
      <summary>
            Removes all widgets from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation for all items in the collection.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Item(System.Int32)">
      <summary>
            Retrieve a widget by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Count">
      <summary>
            Number of widgets.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance">
      <summary>
            Different layout modes for a push button widget.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Check">
      <summary>
            Display the check mark as check.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Circle">
      <summary>
            Display the check mark as circle.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Cross">
      <summary>
            Display the check mark as cross.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Diamond">
      <summary>
            Display the check mark as diamond.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Square">
      <summary>
            Display the check mark as square.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Star">
      <summary>
            Display the check mark as star.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Unknown">
      <summary>
            The check mark is unknown (none of the known values).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.HighlightStyle">
      <summary>
            The visual effect that is used when the mouse is pressed inside the annotation area.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.HighlightStyle.None">
      <summary>
            No visual effect.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.HighlightStyle.Invert">
      <summary>
            Invert the backgound and border of the annotation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.HighlightStyle.Outline">
      <summary>
            Invert the border of the annotation
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.HighlightStyle.Push">
      <summary>
            Display the annotation as if it were pushed down.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.FieldVisitor">
      <summary>
            A derived instance of FieldVisitor is passed to Field.Accept(...). This method
            calls one of the below FieldVisitor methods according to the type of field.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Field,System.Object)">
      <summary>
            Visit a field.
            </summary>
      <param name="field">The vistor must handle a field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.ValueField,System.Object)">
      <summary>
            Visit a value field.
            </summary>
      <param name="field">The vistor must handle a value field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.PushButtonField,System.Object)">
      <summary>
            Visit a push button field.
            </summary>
      <param name="field">The vistor must handle a push button field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.CheckBoxField,System.Object)">
      <summary>
            Visit a check box field.
            </summary>
      <param name="field">The vistor must handle a check box field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.DropDownListField,System.Object)">
      <summary>
            Visit a dropdown list field.
            </summary>
      <param name="field">The vistor must handle a dropdown list field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.ListBoxField,System.Object)">
      <summary>
            Visit a listbox field.
            </summary>
      <param name="field">The vistor must handle a listbox field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.PasswordField,System.Object)">
      <summary>
            Visit a password field.
            </summary>
      <param name="field">The vistor must handle a password field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.RadioButtonField,System.Object)">
      <summary>
            Visit a radiobutton field.
            </summary>
      <param name="field">The vistor must handle a radiobutton field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.SignatureField,System.Object)">
      <summary>
            Visit a signature field.
            </summary>
      <param name="field">The vistor must handle a signature field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.TextField,System.Object)">
      <summary>
            Visit a text field.
            </summary>
      <param name="field">The vistor must handle a text field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.UnknownField,System.Object)">
      <summary>
            Visit a unknown field.
            </summary>
      <param name="field">The vistor must handle a unknown field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.NumericField,System.Object)">
      <summary>
            Visit a numeric field.
            </summary>
      <param name="field">The vistor must handle a numeric field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.ImageField,System.Object)">
      <summary>
            Visit a image field.
            </summary>
      <param name="field">The vistor must handle a image field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.DateTimeField,System.Object)">
      <summary>
            Visit a date/time field.
            </summary>
      <param name="field">The vistor must handle a date/time field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField,System.Object)">
      <summary>
            Visit a barcode field.
            </summary>
      <param name="field">The vistor must handle a barcode field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.Code128BarcodeField,System.Object)">
      <summary>
            Visit a code 128 barcode field.
            </summary>
      <param name="field">The vistor must handle a code 128 barcode field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField,System.Object)">
      <summary>
            Visit a code 2 of 5 interleaved barcode field.
            </summary>
      <param name="field">The vistor must handle a code 2 of 5 interleaved barcode field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField,System.Object)">
      <summary>
            Visit a code 3 of 9 barcode field.
            </summary>
      <param name="field">The vistor must handle a code 3 of 9 barcode field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.UnknownBarcodeField,System.Object)">
      <summary>
            Visit a unknown barcode field.
            </summary>
      <param name="field">The vistor must handle a unknown barcode field.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.Actions.ActionVisitor">
      <summary>
            A derived instance of ActionVisitor is passed to Action.Accept(...). This method
            calls one of the below ActionVisitor methods according to the type of action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.Action,System.Object)">
      <summary>
            Visit an action.
            </summary>
      <param name="annotation">The vistor must handle an action.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.GoToAction,System.Object)">
      <summary>
            Visit a GoToAction.
            </summary>
      <param name="action">The vistor must handle a GoToAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.HideAction,System.Object)">
      <summary>
            Visit a HideAction.
            </summary>
      <param name="action">The vistor must handle a HideAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.JavaScriptAction,System.Object)">
      <summary>
            Visit a JavaScriptAction.
            </summary>
      <param name="action">The vistor must handle a JavaScriptAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.FormAction,System.Object)">
      <summary>
            Visit a FormAction.
            </summary>
      <param name="action">The vistor must handle a FormAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.ResetFormAction,System.Object)">
      <summary>
            Visit a ResetFormAction.
            </summary>
      <param name="action">The vistor must handle a ResetFormAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.SubmitFormAction,System.Object)">
      <summary>
            Visit a SubmitFormAction.
            </summary>
      <param name="action">The vistor must handle a SubmitFormAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.UnknownAction,System.Object)">
      <summary>
            Visit an UnknownAction.
            </summary>
      <param name="action">The vistor must handle an UnknownAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.UriAction,System.Object)">
      <summary>
            Visit an UriAction.
            </summary>
      <param name="action">The vistor must handle an UriAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.NamedAction,System.Object)">
      <summary>
            Visit a NamedAction.
            </summary>
      <param name="action">The vistor must handle a NamedAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.LaunchAction,System.Object)">
      <summary>
            Visit a LaunchAction.
            </summary>
      <param name="action">The vistor must handle a LaunchAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.ImportDataAction,System.Object)">
      <summary>
            Visit an ImportDataAction.
            </summary>
      <param name="action">The vistor must handle an ImportDataAction.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.PageSize">
      <summary>
            Encapsulates the width and height of a page and provides standard page sizes. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.PageSize.#ctor">
      <summary>
            Create a new page size with default size (Letter).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.PageSize.#ctor(System.Double,System.Double)">
      <summary>
            Create a new page size with given width and height both in in points.
            </summary>
      <param name="width">Width in points.</param>
      <param name="height">Height in points.</param>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Letter">
      <summary>
            8.5 x 11 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Tabloid">
      <summary>
            11 x 17 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Ledger">
      <summary>
            17 x 11 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Legal">
      <summary>
            8.5 x 14 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Statement">
      <summary>
            5.5 x 8.5 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Executive">
      <summary>
            7.25 x 10.5 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Folio">
      <summary>
            8.5 x 13 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.A3">
      <summary>
            297 x 420 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.A4">
      <summary>
            210 x 297 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.A5">
      <summary>
            148.5 X 210 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.A6">
      <summary>
            105 X 148.5 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.B5">
      <summary>
            182 x 257 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Width">
      <summary>
            Width in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageSize.Height">
      <summary>
            Height in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.TextShapeCollection">
      <summary>
            Represents a text object.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.ShapeCollection">
      <summary>
            Collection of shape objects. Shapes is a shape itself. This allows recursion.
            A shapes collection can be seen as a canvas. You draw on this canvas by adding
            shapes to it.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.ContentShape">
      <summary>
            Base type for all content shapes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Shape">
      <summary>
            Base class for all vector and bitmap graphics objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Shape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Shape.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a Shape
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Shape.Dock">
      <summary>
            How this shape is docked.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Shape.X">
      <summary>
            X-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Shape.Y">
      <summary>
            Y-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Shape.Margin">
      <summary>
            Get or set the margin of a shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Shape.ID">
      <summary>
            This Identifier (ID) can be used to track which shape raise an exception.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ContentShape.Opacity">
      <summary>
            The opacity (0...255) which must be used for this shape. Default is 255 (fully opaque).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ContentShape.BlendMode">
      <summary>
            The blend mode used by this shape. (default is BlendMode.Inherit)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ContentShape.RenderingIntent">
      <summary>
            Gets or sets the rendering intent (default is RenderingIntent.RelativeColorimetric).
            </summary>
      <value>
            The rendering intent.
            </value>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ContentShape.Transform">
      <summary>
            Apply this transformation to the content shape before rendering.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ContentShape.X">
      <summary>
            X-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ContentShape.Y">
      <summary>
            Y-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor">
      <summary>
            Create a new empty collection of shapes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double)">
      <summary>
            Create a new empty collection of shapes. Positioned at 0,0.
            </summary>
      <param name="width">The width of this shape with respect to parent coordinate system.</param>
      <param name="height">The height of this shape with respect to parent coordinate system.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double,TallComponents.PDF.Transforms.Transform)">
      <summary>
            Create a new empty collection of shapes.
            </summary>
      <param name="virtualWidth">The virtual width of the virtual canvas on which child shapes are positioned. </param>
      <param name="virtualHeight">The virtual height of the virtual canvas on which child shapes are positioned. </param>
      <param name="transformation">The initial Transform of this ShapeCollection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new empty collection of shapes.
            </summary>
      <param name="x">The X position (left).</param>
      <param name="y">The Y position (bottom).</param>
      <param name="width">The width of this shape with respect to parent coordinate system.</param>
      <param name="height">The height of this shape with respect to parent coordinate system.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new empty collection of shapes.
            </summary>
      <param name="x">The X position (left).</param>
      <param name="y">The Y position (bottom).</param>
      <param name="width">The width of this shape with respect to parent coordinate system.</param>
      <param name="height">The height of this shape with respect to parent coordinate system.</param>
      <param name="virtualWidth">The virtual width of the virtual canvas on which child shapes are positioned. </param>
      <param name="virtualHeight">The virtual height of the virtual canvas on which child shapes are positioned. </param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Add(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Add an existing shape to this collection.
            </summary>
      <param name="shape">Add this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Remove(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Remove a shape from this collection.
            </summary>
      <param name="shape">Remove this shape.</param>
      <returns>true if removing the shape succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Shapes.ShapeCollection)">
      <summary>
            Adds the elements of a ShapeCollection to the end of this collection.
            </summary>
      <param name="shapes">The ShapeCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Shapes.Shape[])">
      <summary>
            Adds the elements of a Shape array to the end of this collection.
            </summary>
      <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Contains(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Shapes.ShapeCollection">ShapeCollection</see>.
            </summary>
      <param name="shape">The <see cref="T:TallComponents.PDF.Shapes.Shape" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Shape" /> is found in this <see cref="T:TallComponents.PDF.Shapes.ShapeCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Insert(System.Int32,TallComponents.PDF.Shapes.Shape)">
      <summary>
            Insert an existing shape at the specified index.
            </summary>
      <param name="index">The index of the shape after insertion.</param>
      <param name="shape">Insert this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a shape at the specified index.
            </summary>
      <param name="index">The index of the shape to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Clear">
      <summary>
            Remove all shapes from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.IndexOf(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Returns the index of the specified shape.
            </summary>
      <param name="shape">The shape to locate in this collection.</param>
      <returns>The zero-based index of the shape found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Compose">
      <summary>
            Overide this method to construct custom shapes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Count">
      <summary>
            Number of shapes in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Item(System.Int32)">
      <summary>
            Get a shape by index (0-based).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Width">
      <summary>
            Width of this shape with respect to parent coordinate system.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Height">
      <summary>
            Height of this shape with respect to parent coordinate system.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ShapeCollection.VirtualWidth">
      <summary>
            The width of the virtual canvas on which child shapes are positioned. 
            This implies a coordinate system transformation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ShapeCollection.VirtualHeight">
      <summary>
            The height of the virtual canvas on which child shapes are positioned. 
            This implies a coordinate system transformation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Clip">
      <summary>
            Clip child shapes. Default is true.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextShapeCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Shapes.TextShapeCollection" /> class.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.SimpleXhtmlShape">
      <summary>
             Renders one or more lines of text with "simple" xhtml markup.
             </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.SimpleXhtmlShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.HorizontalAlignment">
      <summary>
            The horizontal alignment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Width">
      <summary>
            Width of this SimpleXhtmlShape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.MeasuredHeight">
      <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            This height is calculated with the current text available, it respects the Width property 
            and other properties. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Text">
      <summary>
            The rich text string to display formatted as xhtml.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultFont">
      <summary>
            The default font. (default Arial)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultFontSize">
      <summary>
            The default font size. (default 12)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultBold">
      <summary>
            If the text is default bold. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultItalic">
      <summary>
            If the text is default italic. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultUnderline">
      <summary>
            If the text is default underlined. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultStrikeOut">
      <summary>
            If the text is default striked through. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultColor">
      <summary>
            The default text color (default = black)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultJustified">
      <summary>
            Whether text is justified. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultTextIndent">
      <summary>
            Indentation of first text line. (default = 0)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultLineHeight">
      <summary>
            Minimal spacing between 2 lines (default 1.2).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultLeftMargin">
      <summary>
            The default left margin (default 0).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Multiline">
      <summary>
            Specifies whether the text may span multiple lines. (default true)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.LayerShape">
      <summary>
            A layer shape can be seen as a canvas. You draw on this canvas by adding
            shapes to it, they will be placed inside this layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.#ctor">
      <summary>
            Create a new empty layer shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.#ctor(TallComponents.PDF.Layer)">
      <summary>
            Create a new empty layer shape, connected to the provided Layer. 
            </summary>
      <param name="layer">The layer this shape is connected to.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.Add(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Add an existing shape to this layer.
            </summary>
      <param name="shape">Add this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.Remove(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Remove a shape from this layer.
            </summary>
      <param name="shape">Remove this shape.</param>
      <returns>true if removing the shape succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.AddRange(TallComponents.PDF.Shapes.ShapeCollection)">
      <summary>
            Adds the elements of a ShapeCollection to the end of this layer.
            </summary>
      <param name="shapes">The ShapeCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.AddRange(TallComponents.PDF.Shapes.Shape[])">
      <summary>
            Adds the elements of a Shape array to the end of this layer.
            </summary>
      <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.Contains(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Shapes.LayerShape">LayerShape</see>.
            </summary>
      <param name="shape">The <see cref="T:TallComponents.PDF.Shapes.Shape" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Shape" /> is found in this <see cref="T:TallComponents.PDF.Shapes.LayerShape" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.Insert(System.Int32,TallComponents.PDF.Shapes.Shape)">
      <summary>
            Insert an existing shape at the specified index.
            </summary>
      <param name="index">The index of the shape after insertion.</param>
      <param name="shape">Insert this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.RemoveAt(System.Int32)">
      <summary>
            Remove a shape at the specified index.
            </summary>
      <param name="index">The index of the shape to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.Clear">
      <summary>
            Remove all shapes from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.IndexOf(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Returns the index of the specified shape.
            </summary>
      <param name="shape">The shape to locate in this layer shape.</param>
      <returns>The zero-based index of the shape found in the layer shape; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LayerShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LayerShape.Layer">
      <summary>
            The layer this shape is connected to.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LayerShape.Count">
      <summary>
            Number of shapes in this layer.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LayerShape.Item(System.Int32)">
      <summary>
            Get a shape by index (0-based).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.TabStopCollection">
      <summary>
            Collection of tab stops.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TabStopCollection.Add(TallComponents.PDF.Shapes.TabStop)">
      <summary>
            Add a new tab stop.
            </summary>
      <param name="tabStop">Add this tab stop.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TabStopCollection.Add(System.Double)">
      <summary>
            Add a new tab stop.
            </summary>
      <param name="position">Position of new tab stop.</param>
      <returns>New tab stop.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TabStopCollection.Clear">
      <summary>
            Clear this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TabStopCollection.Count">
      <summary>
            Number of tab stops.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TabStopCollection.Item(System.Int32)">
      <summary>
            Get a tabstop by 0-based index.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler">
      <summary>
            VeriSign signature. Requires the VeriSign plugin for Acrobat.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler">
      <summary>
            The base class of all standard signature handlers. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.SignatureHandler">
      <summary>
            Abstract base class of all signature handlers.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.SignatureHandler.Sign(System.Byte[])">
      <summary>
            Signs the given bytes and returns the digest.
            </summary>
      <param name="bytesToSign">The bytes to sign.</param>
      <returns>The digist for the bytesToSign.</returns>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
      <summary>
            This function verifies the given bytes.
            </summary>
      <param name="bytesToVerify">The bytes to verify.</param>
      <param name="digest">The digest calculated by the Sign function.</param>
      <param name="certificates">The certificate info if not present in the digest (can be <see langword="null" />).</param>
      <returns>True if the bytesToVerify are correct, otherwise false.</returns>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Filter">
      <summary>
            The name of this signarure handler.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Revision">
      <summary>
            The version of this signature handler.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.SubFilter">
      <summary>
            The name that identifies the encoding of the signature value and key information.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Name">
      <summary>
            The name of the person or authority signing the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.DistinguishedName">
      <summary>
            The Distinguished Name (DN) of the person or authority signing the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Certificates">
      <summary>
            An array of strings representing the X.509 certicicate chain used for signing 
            and validating signatures that use public-key cryptology.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.SignDate">
      <summary>
            The date and time of signing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.MaxDigestLength">
      <summary>
            The maximum length in bytes of the digest as returned by the Sign function (default 300).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.UsePropBuild">
      <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.CanSign">
      <summary>
            Returns true if and only if this signature handler can be used to sign a document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.CanVerify">
      <summary>
            Returns if this signature handler can be used to verify a document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(System.Security.Cryptography.X509Certificates.X509Chain)">
      <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
      <param name="chain">The chain containing the private key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
      <param name="certificate">The certificate containing the private key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
      <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
      <param name="keyStore">The key store containing the private key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
      <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
      <param name="keyStore">The key store containing the private key.</param>
      <param name="name">The name that is associated with the private key in the store.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Sign(System.Byte[])">
      <summary>
            Signs the given bytes and returns the digest.
            </summary>
      <param name="bytesToSign">Sign these bytes</param>
      <returns>The calculated signature</returns>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Name">
      <summary>
            The subject name in the signing certificate (the element "CN")
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Filter">
      <summary>
            The filter parameter used in the PDF document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.SubFilter">
      <summary>
            The subfilter parameter used in the PDF document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.SignDate">
      <summary>
            The date and time of signing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.CanSign">
      <summary>
            Always true.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.CanVerify">
      <summary>
            Always true.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.DistinguishedName">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
      <summary>
            Create a new VeriSignSignatureHandler to sign using the first key in the store.
            </summary>
      <param name="keyStore">A key store.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
      <summary>
            Create a new VeriSignSignatureHandler to sign using the specified key in the store.
            </summary>
      <param name="keyStore">A key store.</param>
      <param name="name">Name of the key to use for signing.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
      <summary>
            Create a new VeriSignSignatureHandler and use the given chain to sign.
            </summary>
      <param name="chain">The chain containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Create a new VeriSignSignatureHandler and use the given certificate to sign.
            </summary>
      <param name="certificate">The certificate containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
      <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
      <param name="bytesToVerify">For internal use only.</param>
      <param name="digest">For internal use only.</param>
      <param name="certificates">For internal use only.</param>
      <returns>For internal use only.</returns>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.Revision">
      <summary>
            Revision number of the SignatureHandler.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.MaxDigestLength">
      <summary>
            The maximum length of the digest.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.IccColorSpace">
      <summary>
            Represents an ICC colorspace instance.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.IccColorSpace.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Colors.IccColorSpace" /> class.
            </summary>
      <param name="profileData">The profile data.</param>
    </member>
    <member name="P:TallComponents.PDF.Colors.IccColorSpace.NumberOfComponents">
      <summary>
            Gets the number of color components this profile assumes.
            </summary>
      <value>
            The number of color components.
            </value>
    </member>
    <member name="T:TallComponents.PDF.Colors.CmykColor">
      <summary>
            CMYK color.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.DeviceColor">
      <summary>
            Base class for all derived device color classes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.Color">
      <summary>
            Base class for all derived color classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.Color.Convert">
      <summary>
            Convert this color to a WPF color.
            </summary>
      <returns>The converted color.</returns>
    </member>
    <member name="M:TallComponents.PDF.Colors.Color.op_Implicit(System.Windows.Media.Color)~TallComponents.PDF.Colors.Color">
      <summary>
            Provides implicit conversion from a .Net system color.
            </summary>
      <param name="systemColor">The system color that will be implicitly casted.</param>
      <returns>A PDF.Colors.DeviceColor that has the same value as the .Net system color.</returns>
    </member>
    <member name="M:TallComponents.PDF.Colors.Color.Clone">
      <summary>
            Clones a Color.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.Color.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a Color
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.Color.Parse(System.String)">
      <summary>
            Parse a string to extract a color.
            </summary>
      <param name="color">A string describing a color.</param>
      <returns>A Color.</returns>
    </member>
    <member name="M:TallComponents.PDF.Colors.Color.Equals(System.Object)">
      <summary>
            Compares two colors.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Colors.Color.GetHashCode">
      <summary>
            Provides a hashcode.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Colors.Color.Name">
      <summary>
            The name of the color. This can be a string describing the color
            or an actual name like Orange or Green.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.Color.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.DeviceColor.Convert(System.Windows.Media.Color)">
      <summary>
            Convert a WPF color to a PDF device color.
            </summary>
      <param name="wpfColor">
      </param>
      <returns>
            A Color or <see langword="null" /> if the WPF color is Transparant.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Colors.DeviceColor.op_Implicit(System.Windows.Media.Color)~TallComponents.PDF.Colors.DeviceColor">
      <summary>
            Provides implicit conversion from a .Net system color.
            </summary>
      <param name="systemColor">The system color that will be implicitly casted.</param>
      <returns>A PDF.Colors.DeviceColor that has the same value as the .Net Color.</returns>
    </member>
    <member name="M:TallComponents.PDF.Colors.CmykColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new CmykColor from it's components.
            </summary>
      <param name="c">Cyan component [0-255]</param>
      <param name="m">Magenta component [0-255]</param>
      <param name="y">Yellow component [0-255]</param>
      <param name="k">Black component [0-255]</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.CmykColor.Convert">
      <summary>
            Convert this color to a System.Windows.Media.Color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.C">
      <summary>
            The Cyan color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.M">
      <summary>
            The Magenta color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Y">
      <summary>
            The Yellow color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.K">
      <summary>
            The Black color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Name">
      <summary>
            The name of the CMYK color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.White">
      <summary>
            White (all component 0%)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Black">
      <summary>
            Process Black (100% black)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Cyan">
      <summary>
            Process Cyan (100% Cyan)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Magenta">
      <summary>
            Process Magenta (100% Magenta)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Yellow">
      <summary>
            Process Yellow (100% Yellow)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Red">
      <summary>
            CMYK Red
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Orange">
      <summary>
            CMYK Orange
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Green">
      <summary>
            CMYK Green
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Blue">
      <summary>
            CMYK Blue
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Purple">
      <summary>
            CMYK Purple
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Pink">
      <summary>
            CMYK Pink
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.Gray">
      <summary>
            CMYK Gray
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.CmykColor.LightGray">
      <summary>
            CMYK Light Gray
            </summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.TextMatch">
      <summary>
            Represents a single occurrence that matches a text search.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextMatch.FindCriteria">
      <summary>
            The TextFindCriteria that resulted into this match.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextMatch.Page">
      <summary>
            The page that contains this match.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextMatch.Glyphs">
      <summary>
            The glyphs in this match.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.Bookmark">
      <summary>
            An item in the bookmark tree.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.Bookmark.#ctor">
      <summary>
            Create a new empty bookmark.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.Bookmark.#ctor(System.String)">
      <summary>
            Create a new empty bookmark, with a specified title
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.Bookmark.Title">
      <summary>
            Title of this bookmark.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.Bookmark.Italic">
      <summary>
            If set, display the bookmark italic.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.Bookmark.Bold">
      <summary>
            If set, display the bookmark bold.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.Bookmark.TextColor">
      <summary>
            The color for the title's text of this bookmark.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.Bookmark.Bookmarks">
      <summary>
            Children bookmarks.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.Bookmark.Parent">
      <summary>
            The parent bookmark. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.Bookmark.Actions">
      <summary>
            The actions that are executed when this bookmark is activated.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.JavaScript.JavaScriptEnumerator">
      <summary>
            A custom enumerator to iterate over all items in the JavaScript collection. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.JavaScript.JavaScriptEnumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the current element in the JavaScript collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.JavaScript.JavaScriptEnumerator.Current">
      <summary>
            Gets the current element in the JavaScript collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.TextField">
      <summary>
            A text PDF form field. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.TextField.#ctor(System.String)">
      <summary>
            Create a new Text field.
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.TextField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.RichText">
      <summary>
            Specifies whether the text may include styling (also known as rich text)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.Multiline">
      <summary>
            Specifies whether the text span multiple lines
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.DoNotScroll">
      <summary>
            Specifies whether long text must be scrolled.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.SpellCheckAllowed">
      <summary>
            Specifies whether spell-checking is allowed on this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.Comb">
      <summary>
            If set, the field is automatically divided into as many equally
            spaced positions, or combs, as the value of MaxLength, and the text is laid out
            into those combs.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.FileSelect">
      <summary>
            Specifies whether this text field is used to enter a pathname of a file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.MaxLength">
      <summary>
            The maximum characters that may be entered into this text field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.TextField.FormattedValue">
      <summary>
            The Formatted Value. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.ImageSizing">
      <summary>
            The mapping between the image size and the widget (field) size.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.ImageSizing.Stretch">
      <summary>
            Stretch the image to perfecly fit (the aspect ratio will be ignored).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.ImageSizing.Scale">
      <summary>
            Fit the image with respecting the aspect ratio.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.ImageSizing.Actual">
      <summary>
            Use the actual image size (note that this can result in clipped or overflowed images).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.FieldCollection">
      <summary>
            Collection of form fields.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Contains(System.String)">
      <summary>
            Check if the fully qualified name exists in this collection
            </summary>
      <returns>True is the collection contains the fully qualified name, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Add(TallComponents.PDF.Forms.Fields.Field)">
      <summary>
            Add a field to this collection.
            </summary>
      <param name="field">The field to add.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Remove(System.String)">
      <summary>
            Removes a field from this collection.
            </summary>
      <param name="fullName">The full name from the field to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Remove(TallComponents.PDF.Forms.Fields.Field)">
      <summary>
            Removes a field from this collection.
            </summary>
      <param name="field">The field to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Clear">
      <summary>
            Removes all fields from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.Item(System.Int32)">
      <summary>
            Retrieve a field by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.Item(System.String)">
      <summary>
            Retrieve a field by the fully qualified name.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.Count">
      <summary>
            Number of fields in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.FullNames">
      <summary>
            Returns all fully qualified names in this collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.FormatOptions">
      <summary>
            Encapsulates format-specific options.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.PushButtonWidget">
      <summary>
            A push button widget is a specialized widget.
             </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.Widget">
      <summary>
            A PDF form field Widget.  
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Annotation">
      <summary>
            An annotation is the base class all annotations.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Annotation.BeginUpdate">
      <summary>
            This method can be used to begin a properties bulk updat .
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Annotation.EndUpdate">
      <summary>
            This method can be used to end the properties bulk update.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Annotation.Flatten(TallComponents.PDF.Shapes.Canvas)">
      <summary>
            Flatten the annotation as static content to the given canvas.
            </summary>
      <param name="canvas">The canvas to add the content.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Annotation.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The visitor to accept.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Page">
      <summary>
            The associated page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.TabOrder">
      <summary>
            Retrieve the tab-order for this annotation.
            </summary>
      <returns>The zero-based tab-order. Return -1 if the annotation is not connected to any page.</returns>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Left">
      <summary>
            Position of annotation's left edge. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Bottom">
      <summary>
            Position of annotation's bottom edge. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Right">
      <summary>
            Position of annotation's right edge. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Top">
      <summary>
            Position of annotation's top edge. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Width">
      <summary>
            Width of this annotation. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Height">
      <summary>
            Height of this annotation. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Locked">
      <summary>
            Specifies if the annotations properties are locked in a viewer application.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.BorderColor">
      <summary>
            The color of the border of this annotation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.BorderWidth">
      <summary>
            The width in points of the border of this annotation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.BorderStyle">
      <summary>
            The border style of this annotation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Invisible">
      <summary>
            This annotation will not be visible in the pdf-viewer.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Annotation.Print">
      <summary>
            This annotation will be visible on a printout.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.#ctor">
      <summary>
            Create a new PDF form field Widget.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PDF form field Widget.
            </summary>
      <param name="left">The left position for this widget.</param>
      <param name="bottom">The bottom position for this widget.</param>
      <param name="width">The width for this widget.</param>
      <param name="height">The height for this widget.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.Flatten(TallComponents.PDF.Shapes.Canvas,System.Boolean)">
      <summary>
            Flatten the annotation as static content to the given canvas.
            </summary>
      <param name="canvas">The canvas to add the content.</param>
      <param name="reformat">Force this widget to re-format the content.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.UpdateAppearance">
      <summary>
            This updates the appearance of this widget.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.ToString">
      <summary>
            Obtains the String representation of this instance.
             </summary>
      <returns>
            The friendly name of the Widget 
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.TestOverflow(System.String)">
      <summary>
            Determines whether a given text will "overflow", i.e. whether scrolling is needed
            to display the entire text.
            </summary>
      <param name="text">The text that is to be fitted.</param>
      <returns>True if the text will cause an overflow. False if it can be displayed
            without scrolling.</returns>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Field">
      <summary>
            The associated Field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.TextColor">
      <summary>
            The text color 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.FontSize">
      <summary>
            The font size.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Font">
      <summary>
            The text font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.BorderColor">
      <summary>
            The color of the border of this widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.BackgroundColor">
      <summary>
            The background color of this widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.HorizontalAlignment">
      <summary>
            The horiontal text alignment 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.VerticalAlignment">
      <summary>
            The vertical text aligment 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Invisible">
      <summary>
            This annotation will not be visible in the pdf-viewer.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Orientation">
      <summary>
            Orientation of this widget in degrees. Default is Rotate0.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Persistency">
      <summary>
            The widget's persistency when this document is written.  
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseEnterActions">
      <summary>
            The actions executed when a mouse/pointing device enters the widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseExitActions">
      <summary>
            The actions executed when a mouse/pointing device leaves the widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseDownActions">
      <summary>
            The actions executed when a mouse/pointing device goes down in the widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.GotFocusActions">
      <summary>
            The actions executed when the widget recieves the input focus.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.LostFocusActions">
      <summary>
            The actions executed when the widget loses the input focus.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseUpActions">
      <summary>
            The actions executed when a mouse/pointing device goes up.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.#ctor">
      <summary>
            Create a new PDF form field Push button Widget.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PDF form field Push button Widget.
            </summary>
      <param name="left">The left position for this widget.</param>
      <param name="bottom">The bottom position for this widget.</param>
      <param name="width">The width for this widget.</param>
      <param name="height">The height for this widget.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.SetIcon(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
            Set a new Icon for this PushButtonWidget
            </summary>
      <param name="icon">The icon to set.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.SetIcon(TallComponents.PDF.Shapes.ShapeCollection)">
      <summary>
            Set a new Icon for this PushButtonWidget
            </summary>
      <param name="icon">The icon to set.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.GetIcon">
      <summary>
            Returns the content of the icon as a collection of shape objects (nested).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.HasIcon">
      <summary>
            Checks if an icon is present.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.Label">
      <summary>
            The label for the button.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.Layout">
      <summary>
            The Layout mode for this push button widget.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.StateModel">
      <summary>
            Different state models of a note.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.None">
      <summary>
            No state model. This is the state model of a note that does not represent a state change.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.Marked">
      <summary>
            This is the state model of a note that either marks or unmarks a note.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.Review">
      <summary>
            This is the state model of a note that changes the review state of a note.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.Migration">
      <summary>
            This is the state model of a note that changes the migration state of a note.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.GetWebCredentialsEventHandler">
      <summary>
            Represents the method that handles the GetWebCredentials event.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The GetWebCredentials event arguments.</param>
    </member>
    <member name="T:TallComponents.PDF.Shapes.RectangleShape">
      <summary>
            A rectangle drawn using a pen and brush. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.PathShape">
      <summary>
            PathShape is the base class for all shapes that have an associated pen or brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PathShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.PathShape.Pen">
      <summary>
            Used to draw the curves on this path.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.PathShape.Brush">
      <summary>
            The brush that is used to fill this shape if closed.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor">
      <summary>
            Create a new rectangle with zero width and height.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double)">
      <summary>
            Creates a new RectangleShape with given startpoint, width and height.
            </summary>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new RectangleShape with given startpoint, width and height.
            </summary>
      <param name="x">X-position of the lower-left corner.</param>
      <param name="y">Y-position of the lower-left corner.</param>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
      <summary>
            Creates a new RectangleShape with given startpoint, width, height and pen.
            </summary>
      <param name="x">X-position of the lower-left corner.</param>
      <param name="y">Y-position of the lower-left corner.</param>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
      <param name="pen">Used to draw the lines on this rectangle.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
      <summary>
            Creates a new RectangleShape with given startpoint, width, height, pen and brush.
            </summary>
      <param name="x">X-position of the lower-left corner.</param>
      <param name="y">Y-position of the lower-left corner.</param>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
      <param name="pen">Used to draw the lines on this rectangle.</param>
      <param name="brush">The brush that is used to fill the rectangle.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.RectangleShape.Width">
      <summary>
            Width of this rectangle.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.RectangleShape.Height">
      <summary>
            Height of this rectangle.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.ClipShape">
      <summary>
            The ClipShape allow you to build an arbitray curve composed of
            straight lines and bezier curves, used as clipping path.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ClipShape.#ctor">
      <summary>
            Create a new open free hand shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ClipShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ClipShape.Paths">
      <summary>
            The paths that make up this clip shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ClipShape.FillRule">
      <summary>
            The FillRule used by this clip shape. (Default = FillRule.NonzeroWindingNumber)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.BezierShape">
      <summary>
            A cubic bezier shape. It has a start and an end point and two respective
            control points.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.BezierShape.#ctor">
      <summary>
            Create a new BezierShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
      <param name="x0">Horizontal position of the start point.</param>
      <param name="y0">Vertical position of the start point.</param>
      <param name="x1">Horizontal position of the start control point.</param>
      <param name="y1">Vertical position of the start control point.</param>
      <param name="x2">Horizontal position of the end control point.</param>
      <param name="y2">Vertical position of the end control point.</param>
      <param name="x3">Horizontal position of the end point.</param>
      <param name="y3">Vertical position of the end point.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
      <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
      <param name="x0">Horizontal position of the start point.</param>
      <param name="y0">Vertical position of the start point.</param>
      <param name="x1">Horizontal position of the start control point.</param>
      <param name="y1">Vertical position of the start control point.</param>
      <param name="x2">Horizontal position of the end control point.</param>
      <param name="y2">Vertical position of the end control point.</param>
      <param name="x3">Horizontal position of the end point.</param>
      <param name="y3">Vertical position of the end point.</param>
      <param name="pen">Used to draw the curves of this bezier.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.X0">
      <summary>
            Horizontal position of the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.Y0">
      <summary>
            Vertical position of the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.X1">
      <summary>
            Horizontal position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.Y1">
      <summary>
            Vertical position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.X2">
      <summary>
            Horizontal position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.Y2">
      <summary>
            Vertical position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.X3">
      <summary>
            Horizontal position of the end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.BezierShape.Y3">
      <summary>
            Vertical position of the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape">
      <summary>
            QR (Quick Response) code shape.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.TwoDimensionalBarcodeShape">
      <summary>
            Base Shape for all 2D barcodes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.BarcodeShape">
      <summary>
            Abstract base class of all barcode shapes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.#ctor">
      <summary>
            Creates a new bar code shape. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.#ctor(System.String)">
      <summary>
            Creates a new bar code shape. 
            </summary>
      <param name="data">The data that is represented by this barcode.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Data">
      <summary>
            The data that is represented by this barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.DataLength">
      <summary>
            Maximum length of data. Default: 12.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Location">
      <summary>
            If, and how the textual respresentation of the data is displayed. Default: None.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.UseQuietZone">
      <summary>
            Add a quiet zone to the left and to the right of the barcode. Default: false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Width">
      <summary>
            The actual width of the barcode. If set to 0 (default), the minimum width will be used.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Height">
      <summary>
            The actual height of the barcode. If set to 0 (default), the minimum height will be used.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.MinimumHeight">
      <summary>
            The recommended minimum height (in points) of the barcode given the current settings.
            It is possible to set the height smaller than the minimum height but then the content
            will be clipped.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.MinimumWidth">
      <summary>
            The recommended minimum width (in points) of the barcode given the current settings.
            It is possible to set the width smaller than the minimum width but then the content
            will be clipped.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.XDimension">
      <summary>
            The x-dimension (narrowest element of a bar code symbol) in mils.
            1 mil = 0.001 inch. E.g. A 7.5 mil x-dimension means that the most narrow
            bar code element measures 0.0075 inches. Default: 13.5.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.TwoDimensionalBarcodeShape.#ctor">
      <summary>
            Create a new 2D bar code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.TwoDimensionalBarcodeShape.#ctor(System.String)">
      <summary>
            Create a new 2D bar code.
            </summary>
      <param name="data">The Data.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.#ctor">
      <summary>
            Create a new QR code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.#ctor(System.String)">
      <summary>
            Create a new QR code.
            </summary>
      <param name="data">The Data. </param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.MinimumWidth">
      <summary>
            For QR codes the minimum width is ignored.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.MinimumHeight">
      <summary>
            For QR codes the minimum height is ignored.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.BorderStyle">
      <summary>
            Different styles for the border of a form field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.BorderStyle.Solid">
      <summary>
            A Solid rectangle around the field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.BorderStyle.Dashed">
      <summary>
            A Dashed rectangle surrounding the field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.BorderStyle.Beveled">
      <summary>
            A simulated embossed rectangle that appears to be raised above the surface of the page.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.BorderStyle.Inset">
      <summary>
            A simulated engraved rectangle that appears to be recessed below the surface of the page.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.BorderStyle.Underline">
      <summary>
            A single line along the bottom of the field's bounding box.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.ISignatureHandlerFactory">
      <summary>
            Implementations of ISignatureHandlerFactory create a signature handler. You should implement this
            interface if you want to verify a PDF document that has a custom signature.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.ISignatureHandlerFactory.Create(System.String,System.Int32,System.String)">
      <summary>
            This function returns a SignatureHandler which can validate a signature with given attributes.
            </summary>
      <param name="filter">The filter.</param>
      <param name="revision">The revision.</param>
      <param name="subFilter">The sub filter.</param>
    </member>
    <member name="T:TallComponents.PDF.Colors.TintTransform">
      <summary>
            Base class for all derived tint transform classes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.JavaScript.JavaScript">
      <summary>
            JavaScript Code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScript.#ctor">
      <summary>
            Create a new JavaScript object, without any code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScript.#ctor(System.String)">
      <summary>
            Create a new JavaScript object, with the given code.
            </summary>
      <param name="javaScriptCode">The initial javascript code.</param>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScript.Parse">
      <summary>
            Parse the JavaScript code, throws an exception if a problem is found.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScript.Run(TallComponents.PDF.Document)">
      <summary>
            Runs the JavaScript.
            </summary>
      <param name="context">The context to run in.</param>
    </member>
    <member name="P:TallComponents.PDF.JavaScript.JavaScript.Text">
      <summary>
            The JavaScript Code.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.ListOption">
      <summary>
            A PDF form field option. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Option">
      <summary>
            A PDF form field option. This base class is used for both ListOption and RadioButtonOption.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Option.ExportName">
      <summary>
            Name as exported. (assign this string to the field's  Value) 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOption.#ctor(System.String)">
      <summary>
            Creates a new List option.
            </summary>
      <param name="name">Both the ExportName and the DisplayName.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOption.#ctor(System.String,System.String)">
      <summary>
            Creates a new List option.
            </summary>
      <param name="exportName">Name as exported.</param>
      <param name="displayName">Name as displayed.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOption.ToString">
      <summary>
            Returns a String that represents the current ListOption.
            </summary>
      <returns>A String that represents the current ListOption.</returns>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListOption.DisplayName">
      <summary>
            Name as displayed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Transforms.Transform">
      <summary>
            A 2D geometric transform that can be used to transform ContentShape objects and Brushes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.Transform.CreateWpfMatrix">
      <summary>
            Creates a new System.Windows.Media.Matrix from the current Transform.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Transforms.Transform.Identity">
      <summary>
            The identity transform.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Transforms.MatrixTransform">
      <summary>
            A 2D geometric transform that is defined by a 3-by-3 affine matrix.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor">
      <summary>
            Create a new MatrixTransform.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor(System.Windows.Media.Transform)">
      <summary>
            Create a new MatrixTransform.
            </summary>
      <param name="transform">Create a matrix transform from this WPF transform.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor(System.Windows.Media.Matrix)">
      <summary>
            Create a new MatrixTransform.
            </summary>
      <param name="matrix">Create a matrix transform from this WPF matrix.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new MatrixTransform based on the provided matrix entries.
            </summary>
      <param name="a">The first element</param>
      <param name="b">The second element</param>
      <param name="c">The third element</param>
      <param name="d">The fouth element</param>
      <param name="e">The fifth element</param>
      <param name="f">The sixth element</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor(TallComponents.PDF.Transforms.Transform)">
      <summary>
            Create a new MarixTransform from an existing transform.
            </summary>
      <param name="transform">A transform.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Translate(System.Double,System.Double)">
      <summary>
            Translates over (x,y).
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Scale(System.Double,System.Double)">
      <summary>
            Scales in the x and y direction.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Rotate(System.Double)">
      <summary>
            Rotates the transform the given amount of degrees.
            </summary>
      <param name="degrees">The degrees.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Append(TallComponents.PDF.Transforms.Transform)">
      <summary>
            Appends a transform.
            </summary>
      <param name="transformation">
      </param>
    </member>
    <member name="P:TallComponents.PDF.Transforms.MatrixTransform.Inverse">
      <summary>
            Delivers the inverse transform.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.SimpleXhtmlFormatException">
      <summary>
            Thrown when badly formatted Simple Xhtml is encountered.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.PdfException">
      <summary>
            Base class for all exceptions thrown from TallComponents components.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.PdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.PdfException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="P:TallComponents.PDF.PdfException.Source">
      <summary>
            Get or set the name of the application or the object that causes the error.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PdfException.StackTrace">
      <summary>
            Get a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.SimpleXhtmlFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.SimpleXhtmlFormatException.#ctor(System.String)">
      <summary>
            Create a new SimpleXhtmlFormatException.
            </summary>
      <param name="message">Description of the cause of this exception</param>
    </member>
    <member name="T:TallComponents.PDF.Shapes.ShapeSizeException">
      <summary>
            The exception that is thrown when a shape cannot be placed on a page because 
            the shape has an invalid size.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ShapeSizeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.Brushes.TilingBrush">
      <summary>
            A brush that paints a pattern cell that is repeated from right to left, from top to bottom.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.Brush">
      <summary>
            When a path is drawn, enclosed areas are filled using a brush. 
            Brush is an abstract base class for all brushes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.Brush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.Brush.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a Brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.TilingBrush.#ctor">
      <summary>
            Creates a new TilingBrush with an empty pattern cell.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.TilingBrush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.TilingBrush.Transform">
      <summary>
            Add an additional transformation to this tiling brush.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.TilingBrush.Pattern">
      <summary>
            The shapes that are repeated from right to left, from top to bottom. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.ArcShape">
      <summary>
            An arc shape is a segment of an ellipse outline. It has a center, a horizontal
            and vertical radi and it has a start and sweep angle.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor">
      <summary>
            Create a new ArcShape. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius.
            </summary>
      <param name="centerX">X-position of the center of the arc.</param>
      <param name="centerY">Y-position of the center of the arc.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="centerX">X-position of the center of the arc.</param>
      <param name="centerY">Y-position of the center of the arc.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="centerX">X-position of the center of the arc.</param>
      <param name="centerY">Y-position of the center of the arc.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
      <param name="centerX">X-position of the center of the arc.</param>
      <param name="centerY">Y-position of the center of the arc.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="centerX">X-position of the center of the arc.</param>
      <param name="centerY">Y-position of the center of the arc.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="centerX">X-position of the center of the arc.</param>
      <param name="centerY">Y-position of the center of the arc.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.Start">
      <summary>
            Start angle (0 corresponds to 3 o-clock).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.Sweep">
      <summary>
            Sweep angle, counter-clockwise.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.CenterX">
      <summary>
            X-position of the center of the arc.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.CenterY">
      <summary>
            Y-position of the center of the arc.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.RadiusX">
      <summary>
            Horizontal radius.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.RadiusY">
      <summary>
            Vertical radius.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.StartX">
      <summary>
            Calculated horizontal position of the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.StartY">
      <summary>
            Calculated vertical position of the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.EndX">
      <summary>
            Calculated horizontal position of the end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ArcShape.EndY">
      <summary>
            Calculated vertical position of the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Printing.Duplex">
      <summary>
            The duplex setting print dialog is displayed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Printing.Duplex.Simplex">
      <summary>
            Print single-sided.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Printing.Duplex.DuplexFlipShortEdge">
      <summary>
            Duplex and flip on the short edge of the sheet.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Printing.Duplex.DuplexFlipLongEdge">
      <summary>
            Duplex and flip on the long edge of the sheet.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Printing.Duplex.Unspecified">
      <summary>
            Do not specify a duplex setting. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FragmentCollection">
      <summary>
            Collection of fragment objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.#ctor">
      <summary>
            Create a new empty collection of fragments.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Add(TallComponents.PDF.Shapes.Fragment)">
      <summary>
            Add an existing fragment to this collection.
            </summary>
      <param name="fragment">Add this fragment.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Remove(TallComponents.PDF.Shapes.Fragment)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> from this <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see>.
            </summary>
      <param name="fragment">The fragment to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.AddRange(TallComponents.PDF.Shapes.FragmentCollection)">
      <summary>
            Adds the elements of a FragmentCollection to the end of this collection.
            </summary>
      <param name="fragments">The FragmentCollection whose elements should be added to 
            the end of the collection.
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para></param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.AddRange(TallComponents.PDF.Shapes.Fragment[])">
      <summary>
            Adds the elements of an array of fragments to the end of this collection.
            </summary>
      <param name="fragments">The array of fragments whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Clear">
      <summary>
            Removes all fragments from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Contains(TallComponents.PDF.Shapes.Fragment)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> is in the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see>.
            </summary>
      <param name="fragment">The <see cref="T:TallComponents.PDF.Shapes.Fragment" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Fragment" /> is found in this <see cref="T:TallComponents.PDF.Shapes.FragmentCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.IndexOf(TallComponents.PDF.Shapes.Fragment)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> in the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see>.
            </summary>
      <param name="fragment">The <see cref="T:TallComponents.PDF.Shapes.Fragment" /> to locate in the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Shapes.Fragment" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Insert(System.Int32,TallComponents.PDF.Shapes.Fragment)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Shapes.Fragment" /> on a specific place in this <see cref="T:TallComponents.PDF.Shapes.FragmentCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Shapes.Fragment" /> should be inserted.</param>
      <param name="fragment">The <see cref="T:TallComponents.PDF.Shapes.Fragment" /> to be insert.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> from the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Shapes.Fragment" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Clone">
      <summary>
            Clones a FragmentCollection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FragmentCollection.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a FragmentCollection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FragmentCollection.Count">
      <summary>
            Number of fragment objects in this collecion.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FragmentCollection.Item(System.Int32)">
      <summary>
            0-based indexer that returns the fragments at the specified position. 
            Returns <see langword="null" /> if index is invalid.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Metadata.MetadataSchemaCollection">
      <summary>
            The XMP Metadata Schema collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.#ctor">
      <summary>
            Create a new <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection">MetadataSchemaCollection</see>.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Add(System.String,System.String)">
      <summary>
            Create and add a new MetadataSchema to this collection.
            </summary>
      <param name="prefix">The prefix of the new schema.</param>
      <param name="namespaceUri">The namespace URI of the new schema.</param>
      <returns>The new schema.</returns>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Contains(System.String)">
      <summary>
            Determine whether the <see cref="T:TallComponents.PDF.Metadata.MetadataSchema" /> with gicen prefix is in the <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection" />.
            </summary>
      <param name="prefix">The <see cref="T:TallComponents.PDF.Metadata.MetadataSchema" /> to look for.</param>
      <returns>True if the prefix is found in this <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Remove(System.String)">
      <summary>
            Remove a <see cref="T:TallComponents.PDF.Metadata.MetadataSchema" /> from this <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection" />.
            </summary>
      <param name="prefix">The prefix of the <see cref="T:TallComponents.PDF.Metadata.MetadataSchema" /> to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Clone">
      <summary>
            Clones a MetadataSchemaCollection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a MetadataSchemaCollection
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Metadata.MetadataSchemaCollection.Item(System.String)">
      <summary>
            Retrieve an <see cref="T:TallComponents.PDF.Metadata.MetadataSchema" /> by its prefix from the <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection" />. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Metadata.MetadataSchemaCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Metadata.MetadataSchema" />s actually contained in the <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection" /></summary>
    </member>
    <member name="T:TallComponents.Licensing.License">
      <summary>
            The License class let you check if you have entered a valid license key.
            </summary>
    </member>
    <member name="M:TallComponents.Licensing.License.IsValid">
      <summary>
            Check if this component detects a valid license key.
            </summary>
    </member>
    <member name="M:TallComponents.Licensing.License.GetLicenseInfo">
      <summary>
            This method returns some information which is used to check if the component runs in evaluation mode, or in unlock/purchased mode.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.RgbColor">
      <summary>
            RGB color.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.RgbColor.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Create a new RgbColor from it's color components.
            </summary>
      <param name="r">Red color component [0-255]</param>
      <param name="g">Green color component [0-255]</param>
      <param name="b">Blue color component [0-255]</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.RgbColor.#ctor(System.Windows.Media.Color)">
      <summary>
            Create a new RgbColor from a System.Windows.Media.Color.
            </summary>
      <param name="color">A .NET system color.</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.RgbColor.Convert">
      <summary>
            Convert to a System.Windows.Media.Color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Colors.RgbColor.op_Implicit(System.Windows.Media.Color)~TallComponents.PDF.Colors.RgbColor">
      <summary>
            Provides implicit conversion from System.Windows.Media.Color.
            </summary>
      <param name="systemColor">The system color that will be implicitly casted.</param>
      <returns>A PDF.Colors.RgbColor that has the same value as the System.Windows.Media.Color.</returns>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.R">
      <summary>
            Red color component [0-255]
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.G">
      <summary>
            Green color component [0-255]
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.B">
      <summary>
            Blue color component [0-255]
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Name">
      <summary>
            The name of the RGB color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.White">
      <summary>
            RGB White
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Gray">
      <summary>
            RGB Gray
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Black">
      <summary>
            RGB Black
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Red">
      <summary>
            RGB Red
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Green">
      <summary>
            RGB Green
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Blue">
      <summary>
            RGB Blue
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Orange">
      <summary>
            RGB Orange
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.RgbColor.Yellow">
      <summary>
            RGB Yellow
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.ColorStop">
      <summary>
            The ColorStop class lets you define multiple color stops for a gradient brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.ColorStop.#ctor(TallComponents.PDF.Colors.Color,System.Double)">
      <summary>
            Create a new color stop with given color and position.
            </summary>
      <param name="color">The color of this color stop.</param>
      <param name="position">The position of this color stop.</param>
    </member>
    <member name="P:TallComponents.PDF.Brushes.ColorStop.Color">
      <summary>
            The color of this color stop.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.ColorStop.Position">
      <summary>
            The position of this color stop.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.UnknownField">
      <summary>
            An unknown PDF form field. You cannot create an instance of this class. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.UnknownField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.DocumentType">
      <summary>
            Different document types.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentType.Classic">
      <summary>
            This document is a classic document, compatible with Adobe Acrobat Form designer. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentType.XfaStatic">
      <summary>
            This document has XFA (compatible with Adobe Designer). All forms are static.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentType.XfaDynamic">
      <summary>
            This document has XFA (compatible with Adobe Designer). One or more forms may be dynamic.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Page">
      <summary>
            A page inside a document. You either create a new page or retrieve it from an existing document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Page.#ctor(System.Double,System.Double)">
      <summary>
            Create a new page with given size.
            </summary>
      <param name="width">Width in points.</param>
      <param name="height">Height in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Page.#ctor(TallComponents.PDF.PageSize)">
      <summary>
            Create a new page with given pagesize
            </summary>
      <param name="pageSize">The specified page size</param>
    </member>
    <member name="M:TallComponents.PDF.Page.#ctor(TallComponents.PDF.PageSize,System.Boolean)">
      <summary>
            Create a new page with given pagesize, and format the size to landscape or portrait.
            </summary>
      <param name="pageSize">The specified page size</param>
      <param name="landscape">force the page to be landscape, otherwise force to be portrait</param>
    </member>
    <member name="M:TallComponents.PDF.Page.Find(TallComponents.PDF.TextExtraction.TextFindCriteria)">
      <summary>
            Find text in this page.
            </summary>
      <param name="findCriteria">Specifies find criteria.</param>
      <returns>An enumerator that lets you enumerate over all TextMatch elements.</returns>
    </member>
    <member name="M:TallComponents.PDF.Page.Find(TallComponents.PDF.TextExtraction.TextFindCriteria,TallComponents.PDF.TextExtraction.IGlyphComparer,System.Boolean)">
      <summary>
            Find text in this page.
            </summary>
      <param name="findCriteria">Specifies find criteria.</param>
      <param name="glyphComparer">The custom glyph comparer.</param>
      <param name="transformGlyphs">If true, each glyph is transformed with the page transformation (orientation) before de glyph comparer is applied.</param>
      <returns>An enumerator that lets you enumerate over all TextMatch elements</returns>
    </member>
    <member name="M:TallComponents.PDF.Page.CreateShapes">
      <summary>
            Returns the content on this page as a collection of shape objects (nested).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Page.CreateShapes(TallComponents.PDF.Diagnostics.Summary)">
      <summary>
            Returns the content on this page as a collection of shape objects (nested).
            </summary>
      <param name="summary">Provides a summary of messages collected during the create shapes method.</param>
    </member>
    <member name="M:TallComponents.PDF.Page.System#ICloneable#Clone">
      <summary>
            Clones this Page
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Page.Clone">
      <summary>
            Clones this page with default clone settings.
            </summary>
      <returns>The cloned page.</returns>
    </member>
    <member name="M:TallComponents.PDF.Page.Clone(TallComponents.PDF.PageCloneSettings)">
      <summary>
            Clones this page with the specified clone settings.
            </summary>
      <param name="cloneSettings">The clone settings.</param>
      <returns>The cloned page.</returns>
    </member>
    <member name="M:TallComponents.PDF.Page.Clone(System.String)">
      <summary>
            Clones this page with the default clone settings but prefix the field fullNames.
            </summary>
      <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
      <returns>The cloned page.</returns>
    </member>
    <member name="M:TallComponents.PDF.Page.Clone(TallComponents.PDF.PageCloneSettings,System.String)">
      <summary>
            Clones this page with the specified clone settings and prefix the field fullNames.
            </summary>
      <param name="cloneSettings">The clone settings.</param>
      <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
      <returns>The cloned page.</returns>
    </member>
    <member name="P:TallComponents.PDF.Page.Index">
      <summary>
            The 0 based index of this page in the document.Pages collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Label">
      <summary>
            The Label of this page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Widgets">
      <summary>
            All widgets on this page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Markups">
      <summary>
            All markups on this page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Links">
      <summary>
            All link annotations on this page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Overlay">
      <summary>
            The layer that lies on top of the original content. You define the appearance of this layer
            by adding shapes to it.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Underlay">
      <summary>
            The layer that lies underneath the original content. You define the appearance of this layer
            by adding shapes to it.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.VisualOverlay">
      <summary>
            The canvas that lies on top of the original content and on top of the Overlay. You define the appearance of this layer
            by adding shapes to it.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.VisualUnderlay">
      <summary>
            The canvas that lies underneath the original content, but on top of the Underlay. You define the appearance of this layer
            by adding shapes to it.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Glyphs">
      <summary>
            The Glyphs located on the page. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Width">
      <summary>
            Width of this page in points (i.e. the width of its Mediabox).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Height">
      <summary>
            Height of this page in points (i.e. the height of its Mediabox).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.Orientation">
      <summary>
            Orientation of this page in degrees. Default is Rotate0.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.MediaBox">
      <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the boundaries of the physical medium 
            on which the page is intented to be displayed or printed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.CropBox">
      <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the visible region of default user space. 
            When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle and then imposed 
            on the output medium in some implementation-defined manner.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.BleedBox">
      <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the region to which the contents of the 
            page should be clipped when output in a production environment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.TrimBox">
      <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the intended dimensions of the finished page after trimming.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.ArtBox">
      <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the extent of the page meaningful content (including potential 
            white space) as intended by the page's creator.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.OpenActions">
      <summary>
            The actions executed when the page is opened.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Page.CloseActions">
      <summary>
            The actions executed when the page is closed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.DisplaySettings">
      <summary>
            Enum which specifies what to display in the Text region in a SignatureAppearance.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.None">
      <summary>
            Displays non of the proerties. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Name">
      <summary>
            Display the name property.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.DistinguishedName">
      <summary>
            Display the distinguished name property.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Reason">
      <summary>
            Display the reason property.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Location">
      <summary>
            Display the location property.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Date">
      <summary>
            Display the date property.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Labels">
      <summary>
            Display labels in front of the other properties.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.All">
      <summary>
            Displays all the properties including labels.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.TextMarkup">
      <summary>
            A text markup is a specialized markup and appear as highlight, underline, strikout or jagged ('Squiggly') underline.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.Markup">
      <summary>
            Base class of all markup annotations.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Author">
      <summary>
            The author of this markup.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.CreationDate">
      <summary>
            The date and time when the markup was created.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Popup">
      <summary>
            The popup annotation that is associated with this markup annotation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Opacity">
      <summary>
            The opacity (0...255) which must be used for this markup. Default is 255.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Text">
      <summary>
            The (rich) text that is displayed by the pop-up window of this markup.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Contents">
      <summary>
            The plain text that is displayed by the pop-up window of this markup.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Replies">
      <summary>
            The markups that reply directly to this one.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.InReplyTo">
      <summary>
            The markup to which this markup replies.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Subject">
      <summary>
            The subject of this markup. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.TextMarkup.#ctor">
      <summary>
            Create a new text markup (as highlight).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.TextMarkup.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new text markup.
            </summary>
      <param name="left">The left position for this text markup.</param>
      <param name="bottom">The bottom position for this text markup.</param>
      <param name="width">The width for this text markup.</param>
      <param name="height">The height for this text markup.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.TextMarkup.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.TextMarkup.Appearance">
      <summary>
            The appearance of this text markup (annotation).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.StampAppearance">
      <summary>
            Standard appearances of the text markup (annotation).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Unknown">
      <summary>
            The stamp appearance is none of the standard ones.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Approved">
      <summary>
            An Approved stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.AsIs">
      <summary>
            An AsIs stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Confidential">
      <summary>
            A Confidential Stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Departmental">
      <summary>
            A Departmental stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Draft">
      <summary>
             A Draft stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Experimental">
      <summary>
            An Experimental stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Expired">
      <summary>
            An Expired stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Final">
      <summary>
            A Final stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.ForComment">
      <summary>
            A ForComment stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.ForPublicRelease">
      <summary>
            A ForPublicRelease stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.NotApproved">
      <summary>
            A NotApproved stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.NotForPublicRelease">
      <summary>
            A NotForPublicRelease stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Sold">
      <summary>
            A Sold stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.TopSecret">
      <summary>
            A TopSecret stamp.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Completed">
      <summary>
            A completed
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Void">
      <summary>
            A void stamp
            </summary>
    </member>
    <member name="T:TallComponents.PDF.IndexRange">
      <summary>
            A range of indexes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.IndexRange.#ctor(System.Int32)">
      <summary>
            Creates a new, zero-based range that consists of a single index.
            </summary>
      <param name="n">The zero-based index.</param>
    </member>
    <member name="M:TallComponents.PDF.IndexRange.#ctor(System.Int32,System.Int32)">
      <summary>
            Creates a new, zero-based range.
            </summary>
      <param name="from">The start index of the range.</param>
      <param name="to">The end index of the range (inclusive)</param>
    </member>
    <member name="P:TallComponents.PDF.IndexRange.From">
      <summary>
            The start index of the range.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.IndexRange.To">
      <summary>
            The end index of the range (inclusive).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Transforms.RotateTransform">
      <summary>
            A 2D geometric transform that applies a clockwise rotation.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.RotateTransform.#ctor">
      <summary>
            Create a new RotateTransform with angle 0 and rotation offset (0,0).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.RotateTransform.#ctor(System.Double)">
      <summary>
            Create a new RotateTransform with given angle and rotation offset (0, 0).
            </summary>
      <param name="angle">Clockwise rotation in degrees.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.RotateTransform.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Create a new RotateTransform with given rotation and ration offset (0,0).
            </summary>
      <param name="angle">Clockwise angle in degrees.</param>
      <param name="rotationOffsetX">X-coordinate of the rotation center, relative to the origin of the shape.</param>
      <param name="rotationOffsetY">Y-coordinate of the rotation center, relative to the origin of the shape.</param>
    </member>
    <member name="P:TallComponents.PDF.Transforms.RotateTransform.Angle">
      <summary>
            Clockwise angle in degrees around the origin of the shape.
            Default is 0.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Transforms.RotateTransform.RotationOffsetX">
      <summary>
            Get or set the x-coordinate of the rotation center, relative to the origin of the shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Transforms.RotateTransform.RotationOffsetY">
      <summary>
            Get or set the y-coordinate of the rotation center, relative to the origin of the shape.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.PieShape">
      <summary>
            A pie is an arc shape with the addition of two straight lines drawn
            from the center to the start and end point of the arc. The closed area
            is filled using the specified brush (if any).
            A pie is fully defined by attributes of its base classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor">
      <summary>
            Create a new, uninitialized PieShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius.
            </summary>
      <param name="centerX">X-position of the center of the pie.</param>
      <param name="centerY">Y-position of the center of the pie.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="centerX">X-position of the center of the pie.</param>
      <param name="centerY">Y-position of the center of the pie.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="centerX">X-position of the center of the pie.</param>
      <param name="centerY">Y-position of the center of the pie.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
      <param name="centerX">X-position of the center of the pie.</param>
      <param name="centerY">Y-position of the center of the pie.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="centerX">X-position of the center of the pie.</param>
      <param name="centerY">Y-position of the center of the pie.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="centerX">X-position of the center of the pie.</param>
      <param name="centerY">Y-position of the center of the pie.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="T:TallComponents.PDF.Shapes.MultilineTextShape">
      <summary>
            The MultilineTextShape allows you to stamp text that is wrapped given
            a certain maximum line width. The text is stored in 1 or more fragments.
            You can set layout properties such as alignment and indentation.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.MultilineTextShape.#ctor">
      <summary>
            Create a new empty multiline text shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.MultilineTextShape.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Create a new empty multiline text shape.
            </summary>
      <param name="x">The X position.</param>
      <param name="y">The Y position.</param>
      <param name="width">Width of this MultilineTextShape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.MultilineTextShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Shapes.MultilineTextShape.LineBreak">
      <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.HorizontalAlignment">
      <summary>
            The horizontal alignment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Justified">
      <summary>
            Whether text is justified.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.JustifyLastLine">
      <summary>
            Whether last line of the text is justified.
            </summary>/// 
        </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.HangIndentation">
      <summary>
            Indentation of all except first line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.FirstLineIndentation">
      <summary>
            Indentation of first line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.LineSpacing">
      <summary>
            Extra spacing between lines in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Fragments">
      <summary>
            Collection of text fragments. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Width">
      <summary>
            Width of this MultilineTextShape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Height">
      <summary>
            Height of this MultilineTextShape, when the contents should be auto-sized. The content will be auto-sized when the following constaints are true: 1) Only one fragment is present; 2) The font-size in that fragment is specified as zero (0).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.MeasuredHeight">
      <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            This height is calculated with the fragments available in the fragments collection, 
            it respects the Width property and font-sizes used in the fragments. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.MeasuredWidth">
      <summary>
            The measured width is the space that will be used when drawing this shape on the page. 
            This width is calculated with the fragments available in the fragments collection, 
            it respects the Width property and font-sizes used in the fragments. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.TabStops">
      <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.ReadDirection">
      <summary>
            The read direction of text elements (fragments).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.MaxFontSize">
      <summary>
            The maximum font size the auto-sized text will be (default = 24).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandSegment">
      <summary>
            The base class for all FreeHandSegment objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegment.Clone">
      <summary>
            Clones a FreeHandSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegment.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a FreeHandSegment.
            </summary>
    </member>
    <member name="M:EMFConverter.Wmf.Functions.UnknownFunction.ToString">
      <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
      <returns>Information string</returns>
    </member>
    <member name="T:TallComponents.PDF.WrongPasswordException">
      <summary>
            The exception that is thrown when a wrong password is specified or no password is specified where it is required.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.WrongPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.Orientation">
      <summary>
            Orientations of various objects.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Orientation.Rotate0">
      <summary>
            No rotation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Orientation.Rotate90">
      <summary>
            90 degrees rotation, counter-clockwise.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Orientation.Rotate180">
      <summary>
            180 degrees rotation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Orientation.Rotate270">
      <summary>
            270 degrees rotation, counter-clockwise.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler">
      <summary>
            Pkcs#7 Sha1 signature handler.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
      <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the first key from the store to sign.
            </summary>
      <param name="keyStore">A key store.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
      <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given key from the store to sign.
            </summary>
      <param name="keyStore">A key store.</param>
      <param name="name">Name of the key to use for signing.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
      <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given chain to sign.
            </summary>
      <param name="chain">The chain containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given certificate to sign.
            </summary>
      <param name="certificate">The certificate containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
      <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
      <param name="bytesToVerify">For internal use only.</param>
      <param name="digest">For internal use only.</param>
      <param name="certificates">For internal use only.</param>
      <returns>For internal use only.</returns>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.MaxDigestLength">
      <summary>
            The maximum length of the digest.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.Revision">
      <summary>
            Revision number of the SignatureHandler.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.RadialGradientBrush">
      <summary>
            A brush that paints a gradient fill that changes from one color to another between an inner and an outer circle.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.GradientBrush">
      <summary>
            An abstract base class for AxialGradientBrush and RadialGradientBrush that holds 
            common properties for these classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.GradientBrush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.GradientBrush.StartColor">
      <summary>
            The start color of the gradient fill.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.GradientBrush.EndColor">
      <summary>
            The end color of the gradient fill.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.GradientBrush.ColorStops">
      <summary>
            The color stops of this gradient.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.GradientBrush.StartWrapMode">
      <summary>
            How the gradient behaves before the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.GradientBrush.EndWrapMode">
      <summary>
            How the gradient behaves after the end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.GradientBrush.Transform">
      <summary>
            Add an additional transformation to this gradient brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.RadialGradientBrush.#ctor">
      <summary>
            Create a new RadialGradientBrush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.RadialGradientBrush.#ctor(TallComponents.PDF.Colors.Color,TallComponents.PDF.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new RadialGradientBrush with given centerpoint and radius of both circles.
            </summary>
      <param name="startColor">The start color of the gradient fill.</param>
      <param name="endColor">The end color of the gradient fill.</param>
      <param name="x">The horizontal position of the center point of both circles.</param>
      <param name="y">The vertical position of the center point of both circles.</param>
      <param name="innerRadius">The radius of the inner circle.</param>
      <param name="outerRadius">The radius of the outer circle.</param>
    </member>
    <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.X">
      <summary>
            The horizontal position of the center point of both circles. 
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.Y">
      <summary>
            The vertical position of the center point of both circles.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.InnerRadius">
      <summary>
            The radius of the inner circle.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.OuterRadius">
      <summary>
            The radius of the outer circle.
            </summary>
    </member>
    <member name="T:TallComponents.Licensing.PDFKitLicenseAttribute">
      <summary>
             License key attribute. Use this attribute to include a license key with your assembly or application.
             </summary>
    </member>
    <member name="T:TallComponents.Licensing.LicenseAttribute">
      <summary>
            Base class of product specific custom attributes that let you enter
            the redistribution license key as an attribute of the entry or calling assembly.
            </summary>
    </member>
    <member name="P:TallComponents.Licensing.LicenseAttribute.Key">
      <summary>
            The type of license key.
            </summary>
    </member>
    <member name="P:TallComponents.Licensing.LicenseAttribute.Value">
      <summary>
            The license key value.
            </summary>
    </member>
    <member name="M:TallComponents.Licensing.PDFKitLicenseAttribute.#ctor(System.String,System.String)">
      <summary>
            Initialize a PDFKit.NET License attribute. 
            </summary>
      <param name="key">The key to use.</param>
      <param name="value">The value to use (retrieved from the 'MyAccount' section from our website).</param>
    </member>
    <member name="P:TallComponents.Licensing.PDFKitLicenseAttribute.Key">
      <summary>
            The key entered in the constructor.
            </summary>
    </member>
    <member name="P:TallComponents.Licensing.PDFKitLicenseAttribute.Value">
      <summary>
            The value entered in the constructor.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.XfaInfo">
      <summary>
            This class contains additional XFA specific information for this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DataBinding">
      <summary>
            Returns the type of DataBinding this XFA fields use. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DataBindingPath">
      <summary>
            Returns the data binding path this XFA field use.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DisplayPattern">
      <summary>
            The display pattern accociated with this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.ValidationPattern">
      <summary>
            The validation pattern accociated with this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DataPattern">
      <summary>
            The data pattern accociated with this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.EditPattern">
      <summary>
            The edit pattern accociated with this field.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.InternalDestinationEnumerator">
      <summary>
            A custom enumerator to iterate over all items in the Internal Destination collection. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Navigation.InternalDestinationEnumerator.System#Collections#IEnumerator#Current">
      <summary>
            Gets the current element in the Destination collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.InternalDestinationEnumerator.Current">
      <summary>
            Gets the current element in the Destination collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.MarkupCollection">
      <summary>
            A markup collection which belongs to a page inside this document, or the replies-to from an other markup.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Add(TallComponents.PDF.Annotations.Markups.Markup)">
      <summary>
            Add an existing markup annotation to this collection.
            </summary>
      <param name="markup">The markup to add.</param>
      <returns>The zero-based index where the markup is added.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Remove(TallComponents.PDF.Annotations.Markups.Markup)">
      <summary>
            Remove a markup annotation from this collection.
            </summary>
      <param name="markup">Remove this markup annotation.</param>
      <returns>true of removing the markup succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.AddRange(TallComponents.PDF.Annotations.Markups.Markup[])">
      <summary>
            Adds the elements of an array of markups to the end of the collection.
            </summary>
      <param name="markupAnnotations">The array of markups to be addded to the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Markups.Markup)">
      <summary>
            Insert an existing markup annotation at the specified index.
            </summary>
      <param name="index">The index of the markup annotation after insertion.</param>
      <param name="markup">Insert this markup annotation.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a markup annotation at the specified index.
            </summary>
      <param name="index">The index of the markup annotation to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Clear">
      <summary>
            Clear this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Contains(TallComponents.PDF.Annotations.Markups.Markup)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Markups.Markup" /> is in the <see cref="T:TallComponents.PDF.Annotations.Markups.MarkupCollection" />.
            </summary>
      <param name="markup">The <see cref="T:TallComponents.PDF.Annotations.Markups.Markup" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Markups.Markup" /> is found in this <see cref="T:TallComponents.PDF.Annotations.Markups.MarkupCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.IndexOf(TallComponents.PDF.Annotations.Markups.Markup)">
      <summary>
            Returns the index of the specified markup annotation in the collection.
            </summary>
      <param name="markup">The markup annotation to locate in this collection.</param>
      <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation for all items in the collection.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.MarkupCollection.Item(System.Int32)">
      <summary>
            Retrieve a Sticky note by 0-based index. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.MarkupCollection.Count">
      <summary>
            Number of sticky notes in this collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.SubmitFormAction">
      <summary>
            The submit form action send form data (containing field values) to a URL in a specified format.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.FormAction">
      <summary>
            The form action is the base class for several form related actions.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.Action">
      <summary>
            Abstract base class of all action classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.Action.System#ICloneable#Clone">
      <summary>
            Clone this action
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.Action.Clone">
      <summary>
            Clone this action
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.Action.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The visitor to accept.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.FormAction.Fields">
      <summary>
            The fields used in this form action.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.FormAction.AllFields">
      <summary>
            All fields in the document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.SubmitFormAction.#ctor">
      <summary>
            Create a new submit form action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.SubmitFormAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned submit form action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.SubmitFormAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.SubmitFormAction.Url">
      <summary>
            The uniform resource locator (url) for this submit form action.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.SubmitFormAction.SubmitFormat">
      <summary>
            The submit format specifies what to submit to the server.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.SubmitFormAction.HttpMethod">
      <summary>
            The http method specifies how to submit to the server.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.SubmitFormAction.IncludeEmptyFields">
      <summary>
            Fields without a value should be submitted also.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.SubmitFormAction.ConvertDatesToStandardFormat">
      <summary>
            When submitting all fields which contains a date are converted to a predefined format, 
            otherwise the value is submitted as-is (aka how the user entered the data).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.LineShape">
      <summary>
            A straight line. It has a start and an end point.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LineShape.#ctor">
      <summary>
            Create a new LineShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new LineShape with given start and end point.
            </summary>
      <param name="startX">Horizontal position of start point.</param>
      <param name="startY">Vertical position of start point.</param>
      <param name="endX">Horizontal position of end point.</param>
      <param name="endY">Vertical position of end point.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
      <summary>
            Creates a new LineShape with given start and end point and pen.
            </summary>
      <param name="startX">Horizontal position of start point.</param>
      <param name="startY">Vertical position of start point.</param>
      <param name="endX">Horizontal position of end point.</param>
      <param name="endY">Vertical position of end point.</param>
      <param name="pen">Used to draw the line.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineShape.StartX">
      <summary>
            Horizontal position of start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineShape.StartY">
      <summary>
            Vertical position of start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineShape.EndX">
      <summary>
            Horizontal position of end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineShape.EndY">
      <summary>
            Vertical position of end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandShape">
      <summary>
            The FreeHandShape allow you to build an arbitray curve composed of
            straight lines and bezier curves.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandShape.#ctor">
      <summary>
            Create a new open free hand shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandShape.Paths">
      <summary>
            The paths that make up this free hand shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandShape.FillRule">
      <summary>
            The FillRule used by this free hand shape. (Default = FillRule.NonzeroWindingNumber)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandBezierSegment">
      <summary>
            A cubic bezier segment. It has an end point and two respective
            control points.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandBezierSegment.#ctor">
      <summary>
            Create a new FreeHandBezierSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandBezierSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new BezierShape given a start control point, end control point and an end point
            </summary>
      <param name="x1">Horizontal position of the start control point.</param>
      <param name="y1">Vertical position of the start control point.</param>
      <param name="x2">Horizontal position of the end control point.</param>
      <param name="y2">Vertical position of the end control point.</param>
      <param name="x3">Horizontal position of the end point.</param>
      <param name="y3">Vertical position of the end point.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.X1">
      <summary>
            Horizontal position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.Y1">
      <summary>
            Vertical position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.X2">
      <summary>
            Horizontal position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.Y2">
      <summary>
            Vertical position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.X3">
      <summary>
            Horizontal position of the end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.Y3">
      <summary>
            Vertical position of the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.PageMode">
      <summary>
            The page mode of the document in the PDF viewer.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageMode.None">
      <summary>
            Display none.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageMode.Outlines">
      <summary>
            Display outlines (also known as bookmarks).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageMode.Thumbnails">
      <summary>
            Display thumbnails.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageMode.FullScreen">
      <summary>
            Display document fullscreen.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Metadata.MetadataString">
      <summary>
            A string value for a <see cref="T:TallComponents.PDF.Metadata.MetadataSchema">MetadataSchema</see>.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Metadata.MetadataValue">
      <summary>
            Abstact base class for Metadata values
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Metadata.MetadataString.Value">
      <summary>
            The value.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.ProgressEventArgs">
      <summary>
            Provides data for the Progress event of a TextMatchEnumerator.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.ProgressEventArgs.Page">
      <summary>
            The new page, used to find text.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.ProgressEventArgs.TotalPages">
      <summary>
            The total number of pages used to find text.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.ProgressEventArgs.CurrentIndex">
      <summary>
            The new (zero-based) page index in the pages to search in to find text.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Version">
      <summary>
            Tuple that denotes the PDF version: (major, minor); e.g., (1.4) denotes version 1.4.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Version.ToString">
      <summary>
            The string representation for this version.
            </summary>
      <returns>The string representation for this version.</returns>
    </member>
    <member name="P:TallComponents.PDF.Version.Major">
      <summary>
            The major version number.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Version.Minor">
      <summary>
            The minor version number.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.SignatureField">
      <summary>
            A signature PDF form field. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.#ctor(System.String)">
      <summary>
            Create a new Signature field.
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Clear">
      <summary>
            Clear the signature for this field.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Verify">
      <summary>
            Checks if the Signature field is valid (verified), based on a standard signature handler.
            </summary>
      <returns>
            Returns if this signature field is valid or not, with the default signature handler factory.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Verify(TallComponents.PDF.DigitalSignatures.ISignatureHandlerFactory)">
      <summary>
            Checks if the Signature field is valid (verified), based on the supplied factory.
            </summary>
      <param name="handlerFactory">The factory used to retrieve the correct signature handler.</param>
      <returns>
            Returns if this signature field is valid or not.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Verify(TallComponents.PDF.DigitalSignatures.SignatureHandler)">
      <summary>
            Checks if the Signature field is valid.
            </summary>
      <param name="signatureHandler">The signature handler used to verify the signature.</param>
      <returns>
            Returns if this signature field is valid or not.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignatureHandler">
      <summary>
            The Signature handler which sign this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.Location">
      <summary>
            The CPU host name or physical location of signing. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.Reason">
      <summary>
            The reason for the signing, such as 'I Agree...'.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.ContactInfo">
      <summary>
             Information provided by the signer to enable a recipient to contact the signer to verify the signature;
             for example, a phone number.
             </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.IsSigned">
      <summary>
            Returns if this field has a signature attached. The signature can be valid or not.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignedUpdate">
      <summary>
            The update in which this signature field is signed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.Certificates">
      <summary>
            The signing certificate and its chain certificates.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.DocumentModifiedAfterSigning">
      <summary>
            Returns if the document is modified after the signature was added,  meaning that an update is append to this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignedDate">
      <summary>
            The date the signature is applied to the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignedName">
      <summary>
            The name which signed this document.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.RadioButtonOption">
      <summary>
            A PDF form field option. 
            Radio button options are returned by the Options property of the RadioButtonField class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOption.ToString">
      <summary>
            Returns a System.String that represents the current RadioButtonOption.
            </summary>
      <returns>A System.String that represents the current RadioButtonOption.</returns>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOption.ExportName">
      <summary>
            Name as exported. (assign this string to the field's  Value) 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOption.Widget">
      <summary>
            The associated radio button widget for this option.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.NumberFormat">
      <summary>
            The data format the number field use.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.NumberFormat.Float">
      <summary>
            float, any number.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.NumberFormat.Decimal">
      <summary>
            Decimal is like the float, but the number of digits before and after the the decimal point can be specified.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.NumberFormat.Integer">
      <summary>
            Only non-fractal numbers are allowed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Update">
      <summary>
            An update object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Update.Write(System.IO.Stream)">
      <summary>
            Write this update of the document to a stream, eg a FileStream or MemoryStream.
            </summary>
      <param name="stream">Write the document to this stream.</param>
    </member>
    <member name="M:TallComponents.PDF.Update.Write(System.IO.BinaryWriter)">
      <summary>
            Write this update of the document to any writer.
            </summary>
      <param name="binaryWriter">Write the document to this writer.</param>
    </member>
    <member name="P:TallComponents.PDF.Update.Index">
      <summary>
            The 0 based index of this update in the document.Updates collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.PageCloneSettings">
      <summary>
            PageCloneSettings specifies what and how to clone a page.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.PageCloneSettings.None">
      <summary>
            None of the flags are set (value = 0).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.PageCloneSettings.Actions">
      <summary>
            Clones Actions
            </summary>
    </member>
    <member name="F:TallComponents.PDF.PageCloneSettings.Shapes">
      <summary>
            Clones all Shapes included in the Canvas from the [Visual]Underlay and [Visual]Overlay.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.PageCloneSettings.Widgets">
      <summary>
            Clones Widgets including Fields
            </summary>
    </member>
    <member name="F:TallComponents.PDF.PageCloneSettings.NoOriginalGraphics">
      <summary>
            Force the skip cloning the original graphics (content).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.XfaInfo">
      <summary>
            This class contains additional XFA specific information for this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.XfaInfo.HasDataConnections">
      <summary>
            Whether or not this document has data connections.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.AnnotationsUsageRights">
      <summary>
            Annotation-related usage rights.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.None">
      <summary>
            None of the usage rights are enabled.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Unknown">
      <summary>
            The usage rights are unknown (the rights are saved by an unknown version)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Create">
      <summary>
            Permits to create annotations.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Delete">
      <summary>
            Permits to delete annotations.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Modify">
      <summary>
            Permits to modify annotations.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Copy">
      <summary>
            Permits to copy annotations.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Import">
      <summary>
            Permits to import annotations.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Export">
      <summary>
            Permits to export annotations.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.Online">
      <summary>
            Permits online commenting.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AnnotationsUsageRights.SummaryView">
      <summary>
            Permits a summery of the markup annotations.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.MigrationState">
      <summary>
            Different migration states of a note.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.MigrationState.None">
      <summary>
            This markup has no migration state (default).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.MigrationState.Confirmed">
      <summary>
            The migration has been confirmed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.MigrationState.NotConfirmed">
      <summary>
            The migration has not been confirmed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.TextShape">
      <summary>
            Used to add a single-line text to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor">
      <summary>
            Create an empty text shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(System.String,TallComponents.PDF.Fonts.Font,System.Double)">
      <summary>
            Create a text shape with given properties.
            </summary>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Size of the font in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(System.Double,System.Double,System.String,TallComponents.PDF.Fonts.Font,System.Double)">
      <summary>
            Create a text shape with given properties.
            </summary>
      <param name="x">Horizontal position of left edge.</param>
      <param name="y">Vertical position of bottom edge.</param>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Size of the font in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(TallComponents.PDF.Shapes.IReference{System.String},TallComponents.PDF.Fonts.Font,System.Double)">
      <summary>
            Create a variable (late-bound) text shape with given properties.
            </summary>
      <param name="textReference">The variable text implementation.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Size of the font in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(System.Double,System.Double,TallComponents.PDF.Shapes.IReference{System.String},TallComponents.PDF.Fonts.Font,System.Double)">
      <summary>
            Create a text shape with given properties.
            </summary>
      <param name="x">Horizontal position of left edge.</param>
      <param name="y">Vertical position of bottom edge.</param>
      <param name="textReference">The variable text implementation.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Size of the font in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Bold">
      <summary>
            If set, the text appears bold. Note that the boldness is simulated by using a thicker stroke.
            It is preferrable to use a bold font if possible. E.g. use arialbd.ttf for bold Arial and arial.ttf for
            regular Arial. This property is ignored if applied to a Bold font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Italic">
      <summary>
            If set, the text appears italic. Note that the italicness is simulated by skewing the text slightly.
            It is preferrable to use an italic font if possible. E.g. use ariali.ttf for italic Arial and arial.ttf for
            regular Arial. This property is ignored if applied to an Italic font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.MeasuredWidth">
      <summary>
            The measured width is the space that will be used when drawing this shape on the page. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.MeasuredHeight">
      <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Font">
      <summary>
            Text is typeset using this font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.FontSize">
      <summary>
            Size of font in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Pen">
      <summary>
            Used to draw the curves on this text. (default = null)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Brush">
      <summary>
            The brush that is used to fill this text. (default = Black - SolidBrush)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Text">
      <summary>
            Display this text.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.StrikeOut">
      <summary>
            Get or set if the text shape is rendered striked out.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Underline">
      <summary>
            Get or set if the text shape is rendered with an underline.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.Overline">
      <summary>
            Get or set if the text shape is rendered with an overline.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.DoubleUnderline">
      <summary>
            Get or set if the text shape is rendered with a double underline.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.ReadDirection">
      <summary>
            Read direction of this text (left-to-right or right-to-left).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.CharacterSpacing">
      <summary>
            Get or set the character spacing. This is the extra spacing (in points) occupied by each character. Default is 0 (no extra spacing).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.WordSpacing">
      <summary>
            Get or set the word spacing. This is the extra spacing (in points) occupied by each space character. Default is 0 (no extra spacing).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TextShape.BoundingBox">
      <summary>
            The size of the textshape after rotation is applied.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.UnknownAction">
      <summary>
            Unknown action. This action will be created if the action is unknown or different from the supported types.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.UnknownAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned unknown action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.UnknownAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.UnknownAction.Name">
      <summary>
            The name for this unknown action.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.ResetFormAction">
      <summary>
            The reset form action resets the fields to there default value.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.ResetFormAction.#ctor">
      <summary>
            Create a new reset form action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.ResetFormAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned reset form action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ResetFormAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.Unit">
      <summary>
            Unit is used to convert a wide variety of units to points, which is the
            unit used in PDF.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Unit.#ctor(System.Double)">
      <summary>
            Create a Unit from a value. The value is assumed to be in Points.
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:TallComponents.PDF.Unit.#ctor(System.Double,TallComponents.PDF.UnitType)">
      <summary>
            Create a Unit from a value and a UnitType
            </summary>
      <param name="val">The value of the Unit object expressed in the unit specified by type.</param>
      <param name="type">The unit of val, for example Inch.</param>
    </member>
    <member name="M:TallComponents.PDF.Unit.op_Equality(TallComponents.PDF.Unit,TallComponents.PDF.Unit)">
      <summary>
            Compares two Unit objects for equality.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Unit.op_Inequality(TallComponents.PDF.Unit,TallComponents.PDF.Unit)">
      <summary>
            Compares two Unit objects for inequality.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Unit.Equals(System.Object)">
      <summary>
            Determines whether two Object instances are equal.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Unit.GetHashCode">
      <summary>
            Calculates a hash for this type.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Unit.Parse(System.String)">
      <summary>
            Create a unit from a string.
            </summary>
      <param name="unitString">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Unit.FromPixels(System.Int32,System.Double)">
      <summary>
            Create a unit from pixels and a resolution. Useful for
            working with images.
            </summary>
      <param name="pixels">Length in pixels</param>
      <param name="dpi">Resolution in dpi (Dots Per Inch)</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Unit.ToPoints(System.String)">
      <summary>
            Convert a unit string to points
            </summary>
      <param name="unitString">A unit string.</param>
      <returns>The value in points</returns>
    </member>
    <member name="M:TallComponents.PDF.Unit.ToString">
      <summary>
            Returns the value of the Unit as a formatted string in points.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Unit.op_Implicit(TallComponents.PDF.Unit)~System.Double">
      <summary>
            Implicit conversion to double. The value is expressed in points.
            </summary>
      <param name="unit">Instance to convert.</param>
      <returns>Value of the unit in points.</returns>
    </member>
    <member name="M:TallComponents.PDF.Unit.op_Implicit(System.Double)~TallComponents.PDF.Unit">
      <summary>
            Implicit conversion from double. This allows you to assign a double 
            to any variable or property of type Unit without constructors or casting.
            </summary>
      <param name="val">The value in points</param>
      <returns>A Unit with the value val and UnitType Points</returns>
    </member>
    <member name="M:TallComponents.PDF.Unit.op_Implicit(System.String)~TallComponents.PDF.Unit">
      <summary>
            Implicit conversion from string. This allows you to assign a sized string 
            to any variable or property of type Unit without constructors or casting.
            </summary>
      <param name="val">The value in a format that can be parsed</param>
      <returns>A Unit with the value val and UnitType found.</returns>
    </member>
    <member name="P:TallComponents.PDF.Unit.IsRelative">
      <summary>
            This Unit is a relative value. True if this Unit is a percentage.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Unit.Points">
      <summary>
            Return the value of this Unit in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandPath">
      <summary>
            A free hand path.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPath.#ctor">
      <summary>
            Create a new FreeHandPath.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPath.#ctor(System.Boolean)">
      <summary>
            Creates a new FreeHandPath.
            </summary>
      <param name="closed"> Close this free hand path by drawing a straight line from the end point to the start point.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPath.Clone">
      <summary>
            Clones a FreeHandPath.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPath.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a FreeHandPath.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandPath.Closed">
      <summary>
            Close this free hand path by drawing a straight line from the end point to the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandPath.Segments">
      <summary>
            The segments that make up this free hand path.
            </summary>
    </member>
    <member name="F:EMFConverter.Emf.StockObject.WHITE_BRUSH">
      <summary>
            Pre-definied white brush
            </summary>
    </member>
    <member name="F:EMFConverter.Emf.StockObject.LTGRAY_BRUSH">
      <summary>
            Pre-definied light gray brush
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.BlendMode">
      <summary>
            Different blend modes.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.BlendMode.Inherit">
      <summary>
            Do not change the blend mode, but interit it from it's container.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.BlendMode.Normal">
      <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.BlendMode.Multiply">
      <summary>
            Multiplies the backdrop and source color.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.BlendMode.Screen">
      <summary>
            Multiplies the complements of the backdrop and source color, then complements the result.
            Note: Screening any color with white results in white; screening with black leaved the original color unchanged. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.BlendMode.Difference">
      <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            Note: Paiting with white inverts the backdrop color; painting with black produce no change. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.BlendMode.Exclusion">
      <summary>
            Subtracts the darker of the two constituent colors from the lighter color (see difference, but with lowel contrast).
            Note: Paiting with white inverts the backdrop color; painting with black produce no change. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Annotations.AnnotationShape">
      <summary>
            Used to position an existing annotation in a layer or shape collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Annotations.AnnotationShape.#ctor">
      <summary>
            Create a new AnnotationShape on position 0,0.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Annotations.AnnotationShape.#ctor(System.Double,System.Double,TallComponents.PDF.Annotations.Annotation)">
      <summary>
            Creates a new AnnotationShape with given startpoint.
            </summary>
      <param name="x">X-position of the lower-left corner.</param>
      <param name="y">Y-position of the lower-left corner.</param>
      <param name="annotation">The annotation you want to place.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Annotations.AnnotationShape.#ctor(TallComponents.PDF.Annotations.Annotation)">
      <summary>
            Creates a new AnnotationShape with given annotation.
            </summary>
      <param name="annotation">The annotation you want to place.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Annotations.AnnotationShape.Annotation">
      <summary>
            The Annotation to replace.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Annotations.AnnotationShape.X">
      <summary>
            Get the Left position of the annotation, or 0 if nu annotation is connected.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Annotations.AnnotationShape.Y">
      <summary>
            Get the Bottom position of the annotation, or 0 if nu annotation is connected.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.Replace(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="text">For internal use only.</param>
      <returns>For internal use only.</returns>
    </member>
    <member name="F:TallComponents.PDF.Shapes.ContextFieldsReplacer.EscapeRegexp">
      <summary>
            Escape replacment symbol
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.ContextFieldsReplacer.TempReplaceString">
      <summary>
            First temp escape char sequence.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.ContextFieldsReplacer.TempReplaceString1">
      <summary>
            Second temp escape char sequence
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.PrepareReplacement(System.String)">
      <summary>
            Prepares the replacement.
            </summary>
      <param name="result">The result.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.ReturnEscapeCharacters(System.String)">
      <summary>
            Returns the escape characters.
            </summary>
      <param name="result">The result.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.MatchEvaluator(System.Text.RegularExpressions.Match)">
      <summary>
            Matches the evaluator.
            </summary>
      <param name="match">The match.</param>
      <returns>
      </returns>
    </member>
    <member name="T:TallComponents.PDF.Metadata.MetadataSchema">
      <summary>
            Base class for Metadata schemas.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchema.Add(System.String,System.String)">
      <summary>
            Add a simple value to the schema.
            </summary>
      <param name="name">The name of this value.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:TallComponents.PDF.Metadata.MetadataSchema.Clear">
      <summary>
            Clear all the values from this schema.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Metadata.MetadataSchema.Item(System.String)">
      <summary>
            Get or set data by name.
            </summary>
      <param name="name">The name of the value.</param>
      <returns>The <see cref="T:TallComponents.PDF.Metadata.MetadataValue" /> associated with the given key, or <see langword="null" /> if not found.</returns>
    </member>
    <member name="P:TallComponents.PDF.Metadata.MetadataSchema.Names">
      <summary>
            The names of all values in this metadata schema.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Metadata.MetadataSchema.Prefix">
      <summary>
            The prefix associated to the namespace uri.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Metadata.MetadataSchema.NamespaceUri">
      <summary>
            The namespace URI.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Spacing">
      <summary>
            Spacing is used to define Margin and Padding.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Spacing.#ctor">
      <summary>
            Initializes a new instance of the Spacing class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Spacing.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the Spacing class with the given spacing.
            </summary>
      <param name="val">The spacing in points to be assigned to all sides.</param>
    </member>
    <member name="M:TallComponents.PDF.Spacing.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the Spacing class with the given spacing.
            </summary>
      <param name="top">The spacing in points to be assigned to the top.</param>
      <param name="left">The spacing in points to be assigned to the left.</param>
      <param name="right">The spacing in points to be assigned to the right.</param>
      <param name="bottom">The spacing in points to be assigned to the bottom.</param>
    </member>
    <member name="M:TallComponents.PDF.Spacing.op_Implicit(System.Double)~TallComponents.PDF.Spacing">
      <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
      <param name="val">The value to assign.</param>
      <returns>A new Spacing instance.</returns>
    </member>
    <member name="M:TallComponents.PDF.Spacing.op_Implicit(TallComponents.PDF.Unit)~TallComponents.PDF.Spacing">
      <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
      <param name="val">The value to assign.</param>
      <returns>A new Spacing instance.</returns>
    </member>
    <member name="M:TallComponents.PDF.Spacing.Clone">
      <summary>
            Clones a Spacing.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Spacing.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a Spacing.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Spacing.CopyFrom(TallComponents.PDF.Spacing)">
      <summary>
            Copy the values for left, right, top and bottom from another Spacing object.
            </summary>
      <param name="other">The object to copy values from.</param>
    </member>
    <member name="P:TallComponents.PDF.Spacing.Left">
      <summary>
            Spacing on the left side
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Spacing.Right">
      <summary>
            Spacing on the right side
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Spacing.Top">
      <summary>
            Spacing above.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Spacing.Bottom">
      <summary>
            Spacing below.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Fonts.FontCollection">
      <summary>
            A font collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Fonts.FontCollection.Contains(TallComponents.PDF.Fonts.Font)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Fonts.Font">Font</see> is in the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see>.
            </summary>
      <param name="font">The <see cref="T:TallComponents.PDF.Fonts.Font" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Fonts.Font" /> is found in this <see cref="T:TallComponents.PDF.Fonts.FontCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.FontCollection.IndexOf(TallComponents.PDF.Fonts.Font)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Fonts.Font">Font</see> in the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see>.
            </summary>
      <param name="font">The <see cref="T:TallComponents.PDF.Fonts.Font" /> to locate in the <see cref="T:TallComponents.PDF.Fonts.FontCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Fonts.Font" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.FontCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.FontCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Fonts.FontCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:TallComponents.PDF.Fonts.Font">Font</see> by zero-based index from the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.FontCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Fonts.Font">Fonts</see>s actually contained in the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see></summary>
    </member>
    <member name="T:TallComponents.PDF.UnsupportedImageException">
      <summary>
            The exception that is thrown when an unsupported or unrecognised image format is encountered.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.UnsupportedImageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.StandardSignatureHandlerFactory">
      <summary>
            The signature handler factory for all standard signature handlers.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandlerFactory.#ctor">
      <summary>
            Create a new StandardSignatureHandlerFactory to validate.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandlerFactory.Create(System.String,System.Int32,System.String)">
      <summary>
            Create a handler for the type of signature as specified by filter, revision and subfilter.
            </summary>
      <param name="filter">The filter.</param>
      <param name="revision">The revision.</param>
      <param name="subFilter">The sub filter.</param>
    </member>
    <member name="T:TallComponents.PDF.Diagnostics.Message">
      <summary>
            Message.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Diagnostics.Message.Text">
      <summary>
            The message text.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Diagnostics.Message.Exception">
      <summary>
            The exception that caused this error message.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Diagnostics.Message.Severity">
      <summary>
            The severity of the message.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.LinearCmykTintTransform">
      <summary>
            A Linear Cmyk Tint Transform.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.LinearCmykTintTransform.#ctor">
      <summary>
            Create a new LinearCmykTintTransform with color Black.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.LinearCmykTintTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new Linear Cmyk Tint Transform  from it's components.
            </summary>
      <param name="c">Cyan component [0-255]</param>
      <param name="m">Magenta component [0-255]</param>
      <param name="y">Yellow component [0-255]</param>
      <param name="k">Black component [0-255]</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.LinearCmykTintTransform.#ctor(TallComponents.PDF.Colors.CmykColor)">
      <summary>
            Create a new Linear Cmyk Tint Transform.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.LinearCmykTintTransform.Value">
      <summary>
            The Cmyk Color used in this tint transform.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.AxialGradientBrush">
      <summary>
            A brush that paints a gradient fill that changes from one color to another along a straight line.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.AxialGradientBrush.#ctor">
      <summary>
            Create a new AxialGradientBrush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.AxialGradientBrush.#ctor(TallComponents.PDF.Colors.Color,TallComponents.PDF.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new AxialGradientBrush with given start and endpoint.
            </summary>
      <param name="startColor">The start color of the gradient fill.</param>
      <param name="endColor">The end color of the gradient fill.</param>
      <param name="startX">The horizontal position of the starting point of the gradient fill.</param>
      <param name="startY">The vertical position of the starting point of the gradient fill.</param>
      <param name="endX">The horizontal position of the ending point of the gradient fill.</param>
      <param name="endY">The vertical position of the ending point of the gradient fill.</param>
    </member>
    <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.StartX">
      <summary>
            The horizontal position of the starting point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.StartY">
      <summary>
            The vertical position of the starting point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.EndX">
      <summary>
            The horizontal position of the ending point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.EndY">
      <summary>
            The vertical position of the ending point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Configuration.TrustLevel.Medium">
      <summary>
            This allows the software to be run under IIS using Medium trust, but memory usage is higher when using large images.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Configuration.TrustLevel.High">
      <summary>
            This allows the software to be run under IIS using High trust, but memory usage is higher when using large images.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Configuration.TrustLevel.Full">
      <summary>
            Memory usage is low when using large images, but it can only be run in Full trust under IIS.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.BookmarkCollection">
      <summary>
            A collection of child bookmarks or the root bookmarks.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.#ctor">
      <summary>
            Create a new empty collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Clear">
      <summary>
            Clear this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.IndexOf(TallComponents.PDF.Navigation.Bookmark)">
      <summary>
            Returns the index of the specified bookmark in the collection.
            </summary>
      <param name="bookmark">The bookmark to locate in this collection.</param>
      <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Contains(TallComponents.PDF.Navigation.Bookmark)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Navigation.Bookmark">Bookmark</see> is in the <see cref="T:TallComponents.PDF.Navigation.BookmarkCollection">BookmarkCollection</see>.
            </summary>
      <param name="bookmark">The <see cref="T:TallComponents.PDF.Navigation.Bookmark" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Navigation.Bookmark" /> is found in this <see cref="T:TallComponents.PDF.Navigation.BookmarkCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Add(TallComponents.PDF.Navigation.Bookmark)">
      <summary>
            Add an existing bookmark to the end of the collection.
            </summary>
      <param name="bookmark">Add this bookmark.</param>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Remove(TallComponents.PDF.Navigation.Bookmark)">
      <summary>
            Remove a bookmark from this collection.
            </summary>
      <param name="bookmark">Remove this bookmark.</param>
      <returns>true if removing the bookmark succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.AddRange(TallComponents.PDF.Navigation.Bookmark[])">
      <summary>
            Adds the elements of a Bookmark array to the end of this collection.
            </summary>
      <param name="bookmarks">The array of Bookmarks whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Insert(System.Int32)">
      <summary>
            Insert a new bookmark at the specified index.
            </summary>
      <param name="index">The index of the new bookmark.</param>
      <returns>The newly added bookmark.</returns>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Insert(System.Int32,TallComponents.PDF.Navigation.Bookmark)">
      <summary>
            Insert an existing bookmark at the specified index.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a bookmark at the specified index.
            </summary>
      <param name="index">The index of the bookmark to remove.</param>
    </member>
    <member name="P:TallComponents.PDF.Navigation.BookmarkCollection.Count">
      <summary>
            Number of bookmarks in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.BookmarkCollection.Item(System.Int32)">
      <summary>
            Get the bookmark at the specified index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.BookmarkCollection.Open">
      <summary>
            Indicates whether the bookmark collection is open (i.e. expanded).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.RadioButtonField">
      <summary>
            A radio button PDF form field. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonField.#ctor(System.String)">
      <summary>
            Create a new Radio Button field.
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.Options">
      <summary>
            Contains all options from which a choice can be made. An option has both 
            an exported name and a reference to the associated widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.RadioButtonValue">
      <summary>
            The value for this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.RadioButtonDefaultValue">
      <summary>
            The default value for this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.CanBeDeselected">
      <summary>
            Whether this field can be deselected. (like the CheckBox field)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.NumericField">
      <summary>
            A Numeric PDF form field. You cannot create an instance of this class. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.NumericField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.NumericField.Format">
      <summary>
            The data format 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.NumericField.NumericValue">
      <summary>
            The strongtyped value for this field
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.NumericField.NumericDefaultValue">
      <summary>
            The default value asociated with this field.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.ReviewState">
      <summary>
            Different review states of a note.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.None">
      <summary>
            This markup has no review state (default).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Accepted">
      <summary>
            The markup has been accepted.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Rejected">
      <summary>
            The markup has been rejected.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Cancelled">
      <summary>
            The markup has een cancelled.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Completed">
      <summary>
            The markup has been completed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.FileAttachment">
      <summary>
            A FileAttachment is a specialized markup instance that refers to a file that is embedded in the document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.FileAttachment.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new file attachment.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="left">The left position for this file attachment.</param>
      <param name="bottom">The bottom position for this file attachment.</param>
      <param name="width">The width for this file attachment.</param>
      <param name="height">The height for this file attachment.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.FileAttachment.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.FileAttachment.EmbeddedFile">
      <summary>
            Gets the file associated with this annotation.
            </summary>
      <value>
            The embedded file.
            </value>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.FileAttachment.IconName">
      <summary>
            The name of the icon that is used in displaying the annotation.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Rectangle">
      <summary>
            A rectangle represents an area on the page.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new rectangle.
            </summary>
      <param name="left">The left position in points.</param>
      <param name="bottom">The bottom position in points.</param>
      <param name="width">The rectangle width in points.</param>
      <param name="height">The rectangle height in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Rectangle.ToString">
      <summary>
            Return a string in format '[' Left Bottom Width Height ']'.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Rectangle.Left">
      <summary>
            The left position in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Rectangle.Bottom">
      <summary>
            The bottom position in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Rectangle.Width">
      <summary>
            The rectangle width in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Rectangle.Height">
      <summary>
            The rectangle height in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape">
      <summary>
            Barcode 39 (or 3 of 9) shape.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.OneDimensionalBarcodeShape">
      <summary>
            Base Shape for all 1D barcodes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.OneDimensionalBarcodeShape.#ctor">
      <summary>
            Create a new 1D bar code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.OneDimensionalBarcodeShape.#ctor(System.String)">
      <summary>
            Create a new 1D bar code.
            </summary>
      <param name="data">The Data. This should not include the start and end codes '*'.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.#ctor">
      <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.#ctor(System.String)">
      <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
      <param name="data">The Data. This should not include the start and end codes '*'.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.QuiteZone">
      <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.Checksum">
      <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.MinimumWidth">
      <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.MinimumHeight">
      <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.WideNarrowRatio">
      <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Fonts.ResolveCMapEventArgs">
      <summary>
            Class containing data for the Font.ResolveCMap event.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.ResolveCMapEventArgs.Name">
      <summary>
            The CMap name that needs to be resolved.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.ResolveCMapEventArgs.CMap">
      <summary>
            The resolved CMap, or null if the CMap cannot be resolved.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.UnsupportedPdfException">
      <summary>
            The exception that is thrown when the PDF document is not supported.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.UnsupportedPdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.EmbeddedFileCollection">
      <summary>
            An embedded file (also know as attachment) collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.Add(TallComponents.PDF.EmbeddedFile)">
      <summary>
            Adds an embedded file to the end of the collection.
            </summary>
      <param name="embeddedFile">The embedded file to be added.</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.AddRange(TallComponents.PDF.EmbeddedFile[])">
      <summary>
            Add the entries in an array of <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFiles</see> to the end of the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>.
            </summary>
      <param name="embeddedFiles">The <see cref="T:TallComponents.PDF.EmbeddedFile">embeddedFiles</see> to be added to the end of the <see cref="T:TallComponents.PDF.EmbeddedFileCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.Insert(System.Int32,TallComponents.PDF.EmbeddedFile)">
      <summary>
            Insert a new embeddedFile in this collection at the given index. 
            </summary>
      <param name="index">The zero-based index the embeddedFile will get.</param>
      <param name="embeddedFile">The source page.</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.Remove(TallComponents.PDF.EmbeddedFile)">
      <summary>
            Removes an embedded file from the collection.
            </summary>
      <param name="embeddedFile">The embedded file to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an embedded file from the collection.
            </summary>
      <param name="index">The zero-based index for the embedded file to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.RemoveRange(TallComponents.PDF.EmbeddedFile[])">
      <summary>
            Removes multiple embedded files from the collection.
            </summary>
      <param name="embeddedFiles">The embedded files to remove</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.Contains(TallComponents.PDF.EmbeddedFile)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see> is in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>.
            </summary>
      <param name="embeddedFile">The <see cref="T:TallComponents.PDF.EmbeddedFile" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.EmbeddedFile" /> is found in this <see cref="T:TallComponents.PDF.EmbeddedFileCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.IndexOf(TallComponents.PDF.EmbeddedFile)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see> in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>.
            </summary>
      <param name="embeddedFile">The <see cref="T:TallComponents.PDF.EmbeddedFile" /> to locate in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.EmbeddedFile" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.Clear">
      <summary>
            Clears the complete collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFileCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see> by zero-based index from the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFileCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see>s actually contained in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see></summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget">
      <summary>
            A radio button widget is a specialized widget, which has an additional Name which specifies the widget.
             </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.#ctor(System.String)">
      <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
      <param name="exportName">The exportName used when this option is checked.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
      <param name="left">The left position for this widget.</param>
      <param name="bottom">The bottom position for this widget.</param>
      <param name="width">The width for this widget.</param>
      <param name="height">The height for this widget.</param>
      <param name="exportName">The exportName used when this option is checked.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.CheckMarkAppearance">
      <summary>
            The check mark appearance for this radio button widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.Option">
      <summary>
            The associated Option for this Widget.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.Persistency">
      <summary>
            The widget's persistency when this document is written.  
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance">
      <summary>
            Different appearances of the text markup (annotation).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Unknown">
      <summary>
            The type is unknown of cannot determined.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Highlight">
      <summary>
            This markup annotation appears as a highlight.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Underline">
      <summary>
            This markup annotation appears as an underline.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Squiggly">
      <summary>
            This markup annotation appears as a squiggly (jagged) underline.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.StrikeOut">
      <summary>
            This markup annotation appears as a strike out.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.HideAction">
      <summary>
            The hide action sets or clears the annotation's Hidden flag.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.HideAction.#ctor">
      <summary>
            Creates a new hide action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.HideAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned hide action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.HideAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.HideAction.Show">
      <summary>
            Specify if the annotations should be shown (true) of hidden (false).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.HideAction.Annotations">
      <summary>
            The annotations which must be showns or hidden, depending of the Show boolean.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.HideAction.Fields">
      <summary>
            The fields which must be showns or hidden, depending of the Show boolean.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.NamedAction">
      <summary>
            A Named action executes an action predefined by the viewer application.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.NamedAction.#ctor">
      <summary>
            Create a new Named action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.NamedAction.#ctor(System.String)">
      <summary>
            Create a new Named action.
            </summary>
      <param name="name">The name for the action to be performed by this named action.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.NamedAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned named action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.NamedAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.NamedAction.Name">
      <summary>
            The name for the action to be performed by this named action.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.ActionCollection">
      <summary>
            An action collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.Add(TallComponents.PDF.Actions.Action)">
      <summary>
            Adds an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action" /> to be addded to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection" />.</param>
      <returns>
            The <see cref="T:TallComponents.PDF.Actions.ActionCollection" /> index at which the <see cref="T:TallComponents.PDF.Actions.Action" /> has been added.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.Remove(TallComponents.PDF.Actions.Action)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> from this <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The action to remove.</param>
      <returns>true if removing the action succeeded/</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.AddRange(TallComponents.PDF.Actions.Action[])">
      <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Actions.Action">actions</see> to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="actions">The array of <see cref="T:TallComponents.PDF.Actions.Action">actions</see> to be added to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.Clear">
      <summary>
            Removes all actions from the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.Contains(TallComponents.PDF.Actions.Action)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> is in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Actions.Action" /> is found in this <see cref="T:TallComponents.PDF.Actions.ActionCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.IndexOf(TallComponents.PDF.Actions.Action)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Actions.Action">Action</see> in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action" /> to locate in the <see cref="T:TallComponents.PDF.Actions.ActionCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Actions.Action" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.Insert(System.Int32,TallComponents.PDF.Actions.Action)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Actions.Action" /> on a specific place in this <see cref="T:TallComponents.PDF.Actions.ActionCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Actions.Action" /> should be inserted.</param>
      <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action" /> to be insert.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.InsertRange(System.Int32,TallComponents.PDF.Actions.Action[])">
      <summary>
            Insert the entries in an array of <see cref="T:TallComponents.PDF.Actions.Action">Actions</see> to the specific locations in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="index">The zero based start index for the inserted actions.</param>
      <param name="actions">The <see cref="T:TallComponents.PDF.Actions.Action">actions</see> to be interted in the <see cref="T:TallComponents.PDF.Actions.ActionCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> from the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Actions.Action" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.RemoveRange(TallComponents.PDF.Actions.Action[])">
      <summary>
            Removes multiple actions from the collection.
            </summary>
      <param name="actions">The actions to remove</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ActionCollection.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept all actions in this collection (in the order the collection contains the actions).
            </summary>
      <param name="visitor">The visitor to accept.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.ActionCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> by zero-based index from the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.ActionCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Actions.Action">Action</see>s actually contained in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see></summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.ActionCollection.IsReadOnly">
      <summary>
            Get a value indicating whether this collection is read-only.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.ImageShape">
      <summary>
            A shape containing bitmap image.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor">
      <summary>
            Creates a new ImageShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.String)">
      <summary>
            Create a new image shape from a relative or virtual path.
            </summary>
      <param name="path">Relative, absolute or virtual path</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.String,System.Int32)">
      <summary>
            Create a new image shape from a relative, absolute or virtual path.
            </summary>
      <param name="path">Relative, absolute or virtual path</param>
      <param name="frameIndex">Index of frame. Typically used to select a page in a multi-page TIFF.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
            Create a new ImageShape from a System.Windows.Media.Imaging.BitmapSource.
            This constructor allows you to draw to a WPF image and pass it to the ImageShape 
            class without intermediate, temporary file.
            </summary>
      <param name="bitmapSource">In-memory WPF bitmap object.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.IO.Stream)">
      <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
      <param name="stream">The stream containing the binairy image data.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
      <param name="stream">The stream containing the binairy image data.</param>
      <param name="frameIndex">0-based frame index.</param>
      <param name="disposeStream">The stream will be disposed by this component.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.GetFrameCount(System.String)">
      <summary>
            Extract the number of frames from the image data.
            </summary>
      <param name="path">The path to the image. May be a file path or a URL.</param>
      <returns>Number of frames in this image.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.GetFrameCount(System.String,System.Object,TallComponents.PDF.GetWebCredentialsEventHandler)">
      <summary>
            Extract the number of frames from the image data.
            </summary>
      <param name="path">The path to the image. May be a file path or a URL.</param>
      <param name="sender">The sender for the GetWebCredentials event.</param>
      <param name="getWebCredentials">The event handlers to query for the web credentials.</param>
      <returns>Number of frames in this image.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.GetFrameCount(System.IO.Stream)">
      <summary>
            Extract the number of frames from the image data.
            </summary>
      <param name="stream">A stream containing an image file.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.ImageShape.CreateBitmapSource">
      <summary>
            This function created a bitmap based on an extracted ImageShape (returned by page.CreateShapes).
            </summary>
      <returns>The created bitmap</returns>
    </member>
    <member name="E:TallComponents.PDF.Shapes.ImageShape.GetWebCredentials">
      <summary>
            Occurs when an image is loaded from a weblocation to retrieve the credentials.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.Compression">
      <summary>
            The compression to apply to the image data.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.MaskColor">
      <summary>
            Set the color that will act as the transparent color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.FrameIndex">
      <summary>
            The FrameIndex which will be used to get the actual image data from the Bitmap  
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.FrameCount">
      <summary>
            The number of frames in the image.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.Path">
      <summary>
            Relative or absolute path of image file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.Width">
      <summary>
            The width of the image. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.VerticalSize">
      <summary>
            Get the vertical size (height) in pixels of this image.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.HorizontalSize">
      <summary>
            Get the horizontal size (width) in pixels of this image.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.VerticalResolution">
      <summary>
            Get the vertical resolution, in pixels per inch, of this image.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.HorizontalResolution">
      <summary>
            Get the horizontal resolution, in pixels per inch, of this image.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.Height">
      <summary>
            The height of the image. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.KeepAspectRatio">
      <summary>
            If KeepAspectRatio is set to true, the height is calculated from the 
            width so that the width/height ratio is equal to the columns/rows ratio
            of the raster of the original image. If set to false, the specified
            width and height are used and the image will in general appear distorted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.IgnoreAlpha">
      <summary>
            Set to true to completely ignore alpha transparency in the image. If no alpha information
            is available this setting is ignored.
            Default value is false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.ImageShape.InvertCmykChannels">
      <summary>
            Set to true to invert the colors in a CMYK image.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.DockStyle">
      <summary>
            Different ways to dock shapes.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.DockStyle.None">
      <summary>
            The shape is positioned at its exact coordinates.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.DockStyle.Top">
      <summary>
            The shape is moved up to the top edge of the container if the first, otherwise to the bottom edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.DockStyle.Left">
      <summary>
            The shape is moved up to the left edge of the container if the first, otherwise to the right edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.DockStyle.Bottom">
      <summary>
            The shape is moved up to the bottom edge of the container if the first, otherwise to the top edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.DockStyle.Right">
      <summary>
            The shape is moved up to the right edge of the container if the first, otherwise to the left edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.DockStyle.Fill">
      <summary>
            The shape fills the entire remaining area.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape">
      <summary>
            Shape for the PDF 417 barcode.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.#ctor">
      <summary>
            Create a new PDF 417 bar code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.#ctor(System.String)">
      <summary>
            Create a new PDF 417 bar code.
            </summary>
      <param name="data">The Data. </param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.MinimumWidth">
      <summary>
            The effective width (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.MinimumHeight">
      <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape">
      <summary>
            Barcode 128 shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.#ctor">
      <summary>
            Create a new Code 128 barcode.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.#ctor(System.String)">
      <summary>
            Create a new Code 128 barcode.
            </summary>
      <param name="data">The Data. This should not include the start and end codes '*'.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.QuiteZone">
      <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.CharacterSet">
      <summary>
            The character set this Code 128 barcode will use. (default=B)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.GS1Compatible">
      <summary>
            Whether this barcode is GS1-128 compatibly (default false).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.MinimumWidth">
      <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.MinimumHeight">
      <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Pens.Pen">
      <summary>
            A pen defines the characteristics of a line such as
            color and pattern (solid, dashed, etc.).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.#ctor">
      <summary>
            Create a solid black pen that has a width of 1 user space unit. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.#ctor(TallComponents.PDF.Colors.Color)">
      <summary>
            Create a solid pen with given color that has a width of 1 user space unit.
            </summary>
      <param name="color">Color of this pen.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.#ctor(TallComponents.PDF.Colors.Color,System.Double)">
      <summary>
            Create a solid pen with given color and fractional width.
            </summary>
      <param name="color">Color of this pen.</param>
      <param name="width">Width of this pen.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.#ctor(TallComponents.PDF.Colors.Color,System.Double,TallComponents.PDF.Pens.DashPattern)">
      <summary>
            Create a solid pen with given color, fractional width and <see cref="T:TallComponents.PDF.Pens.DashPattern">pattern</see>.
            </summary>
      <param name="color">Color of this pen.</param>
      <param name="width">Width of this pen.</param>
      <param name="pattern">Pattern of this pen.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.Equals(System.Object)">
      <summary>
            Compare two Pens.
            </summary>
      <param name="obj">
      </param>
      <returns>True if the pens are equal.</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.Clone">
      <summary>
            Clones a Pen.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a Pen.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.Pen.GetHashCode">
      <summary>
            Returns base.GetHashCode().
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Pens.Pen.Width">
      <summary>
            Width of this pen.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.Pen.Color">
      <summary>
            Color of this pen.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.Pen.Pattern">
      <summary>
            Pattern of this pen.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.Pen.CapStyle">
      <summary>
            How caps (end-points) are drawn.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.Pen.JoinStyle">
      <summary>
            How joints are drawn.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.Pen.MiterLimit">
      <summary>
            The Miter Limit imposes a maximum on the ratio of the miter length to the line width.
            When the limit is exceeded, the join is converted from a miter to a bevel. (default = 10.0)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.LineBreakEventHandler">
      <summary>
            Represents the method that handles LineBreak events.
            </summary>
      <param name="sender">The fragment the word has to be broken for.</param>
      <param name="args">The LineBreak event arguments.</param>
    </member>
    <member name="T:TallComponents.PDF.Shapes.TextFlowException">
      <summary>
            The exception that is thrown when a text flow constraint cannot be satisfied.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TextFlowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.HorizontalAlignment">
      <summary>
            Horizontal alignment of text lines.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.HorizontalAlignment.Left">
      <summary>
            Left aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.HorizontalAlignment.Center">
      <summary>
            Center aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.HorizontalAlignment.Right">
      <summary>
            Right aligned
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.PageDisplay">
      <summary>
            Different ways to specifiy how the page is displayed in the viewer.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.PositionZoom">
      <summary>
            The page is displayed with specified zoom and specified position.
            <para>
            The top and left positions and the zoom are specified by the Top, Left and Zoom properties of ExplicitDestination.
            </para><para>
            The Right and Bottom properties of ExplicitDestination may not be set.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitEntire">
      <summary>
            Fit the entire page both horizontally and vertically.
            </summary>
      <para>
            The Left, Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitHorizontally">
      <summary>
            Fit the page horizontally.
            <para>
            The top position is specified by the Top property of ExplicitDestination.
            </para><para>
            The Left, Right, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitVertically">
      <summary>
            Fit the page vertically.
            <para>
            The left position is specified by the Left property of ExplicitDestination.
            </para><para>
            The Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitRectangle">
      <summary>
            Fit the specified rectangle. 
            <para>
            The rectangle is specified by the Left, Right, Top and Bottom properties of ExplicitDestination.
            </para><para>
            The Zoom property of ExplicitDestination may not be set.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitBoundingBox">
      <summary>
            Fit the bounding box of the page contents both horizontally and vertically.
            <para>
            The Left, Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitBoundingBoxHorizontally">
      <summary>
            Fit the bounding box of the page contents horizontally.
            <para>
            The top position is specified by the Top property of ExplicitDestination.
            </para><para>
            The Left, Right, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitBoundingBoxVertically">
      <summary>
            Fit the bounding box of the page contents vertically.
            <para>
            The left position is specified by the Left property of ExplicitDestination.
            </para><para>
            The Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para></summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.RemoteDestination">
      <summary>
            Describes a location inside an other PDF document. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.ExplicitDestination">
      <summary>
            Base class for classes that describe a location in a PDF document.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.Destination">
      <summary>
            Base class for classes that describe a location in a PDF document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Left">
      <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the left edge of the page window.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Right">
      <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the right edge of the page window.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Top">
      <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the top edge of the page window.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Bottom">
      <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the bottom edge of the page window.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.ZoomFactor">
      <summary>
            The zoom factor to use when displaying the page. 1 means actual size; 2 means magnify twice.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay">
      <summary>
            Specifies how the page is displayed after the destination is resolved.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.RemoteDestination.#ctor">
      <summary>
            Create a new Remote Destination.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.RemoteDestination.#ctor(System.String,System.Int32)">
      <summary>
            Create a new Remote Destination.
            </summary>
      <param name="path">The uniform resource locator (url) for this remote destination.</param>
      <param name="pageIndex">The zero-based index.</param>
    </member>
    <member name="M:TallComponents.PDF.Navigation.RemoteDestination.#ctor(System.String,System.Int32,TallComponents.PDF.Navigation.WindowBehavior)">
      <summary>
            Create a new Remote Destination.
            </summary>
      <param name="path">The uniform resource locator (url) for this remote destination.</param>
      <param name="pageIndex">The zero-based index.</param>
      <param name="windowBehavior">Whether to open the destination in a new windows, current one or specified by the user preferences.</param>
    </member>
    <member name="P:TallComponents.PDF.Navigation.RemoteDestination.Path">
      <summary>
            The uniform resource locator (url) for this remote destination.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.RemoteDestination.PageIndex">
      <summary>
            The pageIndex this destination points to.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.RemoteDestination.WindowBehavior">
      <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.PdfFormData">
      <summary>
            Specialization of FormData that represents a full PDF document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.PdfFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.PdfFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.PdfFormData.Write(System.IO.BinaryWriter)">
      <summary>
            Write this PDF document.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.ImportDataException">
      <summary>
            ImportDataException is raised when one or more exeptions are raised when importing data.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.ImportDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.ImportDataException.ToString">
      <summary>
            Creates and returns a string representation of the current exception.
            </summary>
      <returns>Returns a string representation of the current exception.</returns>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.ImportDataException.InnerExceptions">
      <summary>
            The actual exceptions that are thrown.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.ImportDataException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.HttpPostFormData">
      <summary>
            Specialization of SubmittedData that represents a Http post data set.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.HttpPostFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.HttpPostFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.HttpPostFormData.Write(System.IO.BinaryWriter)">
      <summary>
            Writing HttpPostFormData is not supported.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.Stamp">
      <summary>
            A (rubber) stamp markup is a specialized markup and displays text or graphics intended to look as if they were stamped on the page with a rubber stamp.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.#ctor(System.String)">
      <summary>
            Create a new stamp markup.
            </summary>
      <param name="name">The name of the icon to be used for displaying the stamp.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.#ctor(TallComponents.PDF.Annotations.Markups.StampAppearance)">
      <summary>
            Create a new stamp markup.
            </summary>
      <param name="appearance">The appearance of the icon to be used for displaying the stamp.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new stamp markup.
            </summary>
      <param name="name">The name of the icon to be used for displaying the stamp.</param>
      <param name="left">The left position for this stamp markup.</param>
      <param name="bottom">The bottom position for this stamp markup.</param>
      <param name="width">The width for this stamp markup.</param>
      <param name="height">The height for this stamp markup.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.SetIcon(TallComponents.PDF.Shapes.ShapeCollection)">
      <summary>
            Set a new Icon for this Stamp
            </summary>
      <param name="icon">The icon to set.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Stamp.Appearance">
      <summary>
            The appearance of this stamp markup (annotation).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Stamp.Name">
      <summary>
            The name of the icon to be used for the appearance.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Stamp.Orientation">
      <summary>
            Orientation of the Stamp annotation in degrees. Default is Rotate0.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.LinkCollection">
      <summary>
            A link annotation collection which belongs to a page inside this document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.Add(TallComponents.PDF.Annotations.Link)">
      <summary>
            Add an existing link annotation to this collection.
            </summary>
      <param name="linkAnnotation">The link to add.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.Remove(TallComponents.PDF.Annotations.Link)">
      <summary>
            Remove a link annotation from this collection.
            </summary>
      <param name="linkAnnotation">Remove this link annotation.</param>
      <returns>true if removing the link annotation succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.AddRange(TallComponents.PDF.Annotations.Link[])">
      <summary>
            Adds the elements of an array of links to the end of the collection.
            </summary>
      <param name="links">The array of links to be addded to the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Link)">
      <summary>
            Insert an existing link annotation at the specified index.
            </summary>
      <param name="index">The index of the link annotation after insertion.</param>
      <param name="linkAnnotation">Insert this link annotation.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a link annotation at the specified index.
            </summary>
      <param name="index">The index of the link annotation to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.Clear">
      <summary>
            Clear this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.Contains(TallComponents.PDF.Annotations.Link)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Link" /> is in the <see cref="T:TallComponents.PDF.Annotations.LinkCollection" />.
            </summary>
      <param name="link">The <see cref="T:TallComponents.PDF.Annotations.Link" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Link" /> is found in this <see cref="T:TallComponents.PDF.Annotations.LinkCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.IndexOf(TallComponents.PDF.Annotations.Link)">
      <summary>
            Returns the index of the specified link annotation in the collection.
            </summary>
      <param name="linkAnnotation">The link annotation to locate in this collection.</param>
      <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.LinkCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation for all items in the collection.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.LinkCollection.Item(System.Int32)">
      <summary>
            Retrieve a Link annotation by 0-based index. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.LinkCollection.Count">
      <summary>
            Number of link annotations in this collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.HttpMethod">
      <summary>
            The http method specifies how to submit to the server.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.HttpMethod.Post">
      <summary>
            Use Http post request.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.HttpMethod.Get">
      <summary>
            Use Http get.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.ReadOnlyBitStream.ReadBits(System.Int32,System.UInt32@)">
      <summary>
            Reads n bits from the stream.
            </summary>
      <param name="n">The number of bit to read. Maximum is 32.</param>
      <param name="result">The bits read.</param>
      <returns>A Boolean that indicates succes.</returns>
    </member>
    <member name="M:TallComponents.PDF.ReadOnlyBitStream.ReadBits(System.Int32,System.UInt32[])">
      <summary>
            Reads n bits into each element of the argument array.
            </summary>
      <param name="n">The number of bits to store into each array element.</param>
      <param name="bitArray">The array that will hold the bits.</param>
      <returns>A boolean that indicates succes.</returns>
    </member>
    <member name="F:TallComponents.PDF.ReadOnlyBitStream._stream">
      <summary>
            Underlying stream.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.ReadOnlyBitStream.bitBuffer">
      <summary>
            Small buffer of bits already read from the stream.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.ReadOnlyBitStream.bitsAvailable">
      <summary>
            Number of bits in the buffer.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Transforms.ScaleTransform">
      <summary>
            A 2D geometric transform that applies a horizontal and vertical scale.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.ScaleTransform.#ctor">
      <summary>
            Create a new ScaleTransform.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.ScaleTransform.#ctor(System.Double,System.Double)">
      <summary>
            Create a new ScaleTransform.
            </summary>
      <param name="sx">Scale along the x-axis.</param>
      <param name="sy">Scale along the y-axis.</param>
    </member>
    <member name="P:TallComponents.PDF.Transforms.ScaleTransform.ScaleX">
      <summary>
            Scale along the x-axis.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Transforms.ScaleTransform.ScaleY">
      <summary>
            Scale along the y-axis.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.EllipseShape">
      <summary>
            An ellipse drawn using a pen and brush. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor">
      <summary>
            Create a new EllipseShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius.
            </summary>
      <param name="centerX">X-position of the center of the ellipse.</param>
      <param name="centerY">Y-position of the center of the ellipse.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
      <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="centerX">X-position of the center of the ellipse.</param>
      <param name="centerY">Y-position of the center of the ellipse.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the ellipse.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
      <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius, pen and brush.
            </summary>
      <param name="centerX">X-position of the center of the ellipse.</param>
      <param name="centerY">Y-position of the center of the ellipse.</param>
      <param name="radiusX">Horizontal radius.</param>
      <param name="radiusY">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the ellipse.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.EllipseShape.CenterX">
      <summary>
            X-position of the center of the ellipse.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.EllipseShape.CenterY">
      <summary>
            Y-position of the center of the ellipse.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.EllipseShape.RadiusX">
      <summary>
            Horizontal radius in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.EllipseShape.RadiusY">
      <summary>
            Vertical radius in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Pens.LineCapStyle">
      <summary>
            Different styles for line caps (end-points).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Pens.LineCapStyle.Butt">
      <summary>
            Flat end. Ends exactly at end point.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Pens.LineCapStyle.Round">
      <summary>
            Rounded end. Center lies exactly at end point.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Pens.LineCapStyle.ProjectingSquare">
      <summary>
            Flat end. The end is drawn half the width of the pen beyond the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.PageLayout">
      <summary>
            The page layout of the document in the PDF viewer.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageLayout.SinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageLayout.OneColumn">
      <summary>
            Display pages in one column.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageLayout.TwoColumnLeft">
      <summary>
            Display pages in 2 columns; odd page left.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.PageLayout.TwoColumnRight">
      <summary>
            Display pages in 2 column; odd page right.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.TabStop">
      <summary>
            A tab stop defines a point at which text continues after a tab character.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TabStop.#ctor">
      <summary>
            Create a new tab stop. Position is 0.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.TabStop.#ctor(System.Double)">
      <summary>
            Create a new tab stop.
            </summary>
      <param name="position">The position of this tab stop.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.TabStop.Position">
      <summary>
            The position of this tab stop measured from the left edge in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.ColorStopCollection">
      <summary>
            The ColorStopCollection class lets you define multiple color stops for a gradient brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.#ctor(TallComponents.PDF.Colors.Color,TallComponents.PDF.Colors.Color)">
      <summary>
            Create a new collection with 2 initial color stops positioned at 0 and 1 with colors start and end, respectivey.
            </summary>
      <param name="start">This is the color of the color stop at position 0.</param>
      <param name="end">This is the color of the color stop at position 1.</param>
    </member>
    <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.Add(TallComponents.PDF.Brushes.ColorStop)">
      <summary>
            Add a color stop to this collection.
            </summary>
      <param name="colorStop">Add this color stop.</param>
    </member>
    <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.Contains(TallComponents.PDF.Brushes.ColorStop)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Brushes.ColorStop">ColorStop</see> is in the <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection">ColorStopCollection</see>.
            </summary>
      <param name="colorStop">The <see cref="T:TallComponents.PDF.Brushes.ColorStop" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Brushes.ColorStop" /> is found in this <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.IndexOf(TallComponents.PDF.Brushes.ColorStop)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Brushes.ColorStop">ColorStop</see> in the <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection">ColorStopCollection</see>.
            </summary>
      <param name="colorStop">The <see cref="T:TallComponents.PDF.Brushes.ColorStop" /> to locate in the <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Brushes.ColorStop" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Brushes.ColorStopCollection.Count">
      <summary>
            Number of color stops in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.ColorStopCollection.Item(System.Int32)">
      <summary>
            The ColorStop on the given position
            </summary>
      <param name="index">the zero-based index.</param>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.TextFindCriteria">
      <summary>
            Defines criteria what text must be found.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.TextFindCriteria.#ctor">
      <summary>
            Create a TextFindCriteria object with default properties.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.TextFindCriteria.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Create a TextFindCriteria object with given properties.
            </summary>
      <param name="text">Find this text.</param>
      <param name="matchWholeWord">Find only whole occurrences.</param>
      <param name="matchCase">Find only occurrences that match case.</param>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.TextFindCriteria.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Create a TextFindCriteria object with given properties.
            </summary>
      <param name="text">Find this text.</param>
      <param name="matchWholeWord">Find only whole occurrences.</param>
      <param name="matchCase">Find only occurrences that match case.</param>
      <param name="backwards">Search backwards (otherwise forwards).</param>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.Text">
      <summary>
            Find this text. (default = [null])
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.MatchWholeWord">
      <summary>
            Match whole word only. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.MatchCase">
      <summary>
            Match case. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.Backwards">
      <summary>
            Search backwards. (default = false)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.PasswordField">
      <summary>
            A Password PDF form field.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.PasswordField.#ctor(System.String)">
      <summary>
            Create a new password field.
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.PasswordField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.PasswordField.DisplayCharacter">
      <summary>
            The Character (or string) used to hide the password
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.PasswordField.MaxLength">
      <summary>
            The maximum characters that may be entered into this password field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.PasswordField.FormattedValue">
      <summary>
            The Formatted Value. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.DateTimeField">
      <summary>
            A date time PDF form field. You cannot create an instance of this class. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.DateTimeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DateTimeField.Format">
      <summary>
            The data format 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DateTimeField.DateTimeValue">
      <summary>
            The strongtyped value for this field
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DateTimeField.DateTimeDefaultValue">
      <summary>
            The default value asociated with this field.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.TextLocation">
      <summary>
            The used text location in the barcode region.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.None">
      <summary>
            No text will be displayed
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.Below">
      <summary>
            Below the barcode
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.Above">
      <summary>
            Above the barcode
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.AboveEmbedded">
      <summary>
            In the top region of the barcode
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.BelowEmbedded">
      <summary>
            In the botton region of the barcode
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.XmlFormData">
      <summary>
            Specialization of FormData that represents Xml data.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XmlFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XmlFormData.#ctor(System.IO.Stream)">
      <summary>
            Create a XmlFormData object, based on existing data.
            </summary>
      <param name="stream">The stream to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XmlFormData.Write(System.IO.BinaryWriter)">
      <summary>
            Write this XML FormData.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.XmlFormData.Item(System.String)">
      <summary>
            Returns the data for this name
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DocumentUsageRights">
      <summary>
            Document level usage rights.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentUsageRights.None">
      <summary>
            None of the usage rights are enabled.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentUsageRights.Unknown">
      <summary>
            The uage rights are unknown (the rights are saved by an unknown version)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentUsageRights.FullSave">
      <summary>
            The document can be saved with modified form fields and/or annotations.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.FormFieldsUsageRights">
      <summary>
            Form-fields-related usage rights.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.None">
      <summary>
            None of the usage rights are enabled.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.Unknown">
      <summary>
            The uage rights are unknown (the rights are saved by an unknown version)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.FillIn">
      <summary>
            Permits the user to save a document on which form fill-in has been done.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.Import">
      <summary>
            Permits the user to import form data (FDF, XFDF and text (CSV/TVS) formats only).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.Export">
      <summary>
            Permits the user to export form data (FDF and XFDF formats only).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.SubmitStandalone">
      <summary>
            Permits the user to submit data when the document is not open in a web browser.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.SpawnTemplate">
      <summary>
            Permits new pages to be instanciated from named page templates.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.BarcodePlaintext">
      <summary>
            Permits text form field data to be encoded in a 2D barcode.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.Online">
      <summary>
            Permits the use of forms-specific online meganisms (like SOAP or Active Data Objects). 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.FormFieldsUsageRights.ModifySignatures">
      <summary>
            Permits a user to apply a digital signature to an existing signature form field or clear a signed signature field.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.AnnotationVisitor">
      <summary>
            A derived instance of AnnotationVisitor is passed to Annotation.Accept(...). This method
            calls one of the below AnnotationVisitor methods according to the type of annotation.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Annotation,System.Object)">
      <summary>
            Visit an annotation.
            </summary>
      <param name="annotation">The vistor must handle an annotation.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.Widget,System.Object)">
      <summary>
            Visit a widget (annotation).
            </summary>
      <param name="annotation">The vistor must handle a widget.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.RadioButtonWidget,System.Object)">
      <summary>
            Visit a radio button widget (annotation).
            </summary>
      <param name="annotation">The vistor must handle a radio button widget.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.PushButtonWidget,System.Object)">
      <summary>
            Visit a push button widget (annotation).
            </summary>
      <param name="annotation">The vistor must handle a push button widget.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.SignatureWidget,System.Object)">
      <summary>
            Visit a signature widget (annotation).
            </summary>
      <param name="annotation">The vistor must handle a signature widget.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.CheckBoxWidget,System.Object)">
      <summary>
            Visit a check box widget (annotation).
            </summary>
      <param name="annotation">The vistor must handle a check box widget.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Link,System.Object)">
      <summary>
            Visit a link (annotation).
            </summary>
      <param name="annotation">The vistor must handle a link annotation.</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Markup,System.Object)">
      <summary>
            Visit a markup (annotation).
            </summary>
      <param name="annotation">The vistor must handle a markup (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Note,System.Object)">
      <summary>
            Visit a sticky-note (annotation).
            </summary>
      <param name="annotation">The vistor must handle a sticky-note (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.TextMarkup,System.Object)">
      <summary>
            Visit a text markup (annotation).
            </summary>
      <param name="annotation">The vistor must handle a text markup (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Stamp,System.Object)">
      <summary>
            Visit a stamp markup (annotation).
            </summary>
      <param name="annotation">The vistor must handle a stamp markup (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.FreeText,System.Object)">
      <summary>
            Visit a free text markup (annotation).
            </summary>
      <param name="annotation">The vistor must handle a free text markup (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Square,System.Object)">
      <summary>
            Visit a square markup (annotation).
            </summary>
      <param name="annotation">The vistor must handle a square markup (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Line,System.Object)">
      <summary>
            Visit a line markup (annotation).
            </summary>
      <param name="annotation">The vistor must handle a line markup (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Popup,System.Object)">
      <summary>
            Visit a pop-up (annotation).
            </summary>
      <param name="annotation">The vistor must handle a pop-up (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.UnknownMarkup,System.Object)">
      <summary>
            Visit an unknown markup (annotation).
            </summary>
      <param name="annotation">The vistor must handle an unknown markup (annotation).</param>
      <param name="argument">The additional argument passed to the Accept method (can be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.Annotations.AnnotationCollection">
      <summary>
            An annotation collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Add(TallComponents.PDF.Annotations.Annotation)">
      <summary>
            Adds an <see cref="T:TallComponents.PDF.Annotations.Annotation">Annotation</see> to the end of the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection">AnnotationCollection</see>.
            </summary>
      <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation" /> to be addded to the end of the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />.</param>
      <returns>
            The <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" /> index at which the <see cref="T:TallComponents.PDF.Annotations.Annotation" /> has been added.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Remove(TallComponents.PDF.Annotations.Annotation)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Annotations.Annotation" /> from this <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />.
            </summary>
      <param name="annotation">The annotation to remove.</param>
      <returns>true if removing the annotation succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.AddRange(TallComponents.PDF.Annotations.Annotation[])">
      <summary>
            Adds the elements of an array of annotations to the end of the collection.
            </summary>
      <param name="annotations">The array of annotations to be addded to the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Clear">
      <summary>
            Removes all annotations from the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Contains(TallComponents.PDF.Annotations.Annotation)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Annotation" /> is in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />.
            </summary>
      <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Annotation" /> is found in this <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.IndexOf(TallComponents.PDF.Annotations.Annotation)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Annotations.Annotation" /> in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />.
            </summary>
      <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation" /> to locate in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Annotations.Annotation" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Annotation)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Annotations.Annotation" /> on a specific place in this <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Annotations.Annotation" /> should be inserted.</param>
      <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation" /> to be insert.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Annotations.Annotation" /> from the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" /> at the specified index.
            </summary>
      <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Annotations.Annotation" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation for all items in the collection.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.AnnotationCollection.Item(System.Int32)">
      <summary>
            Retrieve an <see cref="T:TallComponents.PDF.Annotations.Annotation" /> by zero-based index from the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" />. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.AnnotationCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Annotations.Annotation" />s actually contained in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection" /></summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.GoToAction">
      <summary>
             The go-to action moves the actual view to a destination in the current document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor">
      <summary>
            Create a new GoTo action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.GoToAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned go-to action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor(TallComponents.PDF.Page)">
      <summary>
            Create a new GoTo action based on a page
            </summary>
      <param name="page">The page point to.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor(System.String,System.Int32)">
      <summary>
            Create a new GoTo action that jumps to the specified document.
            </summary>
      <param name="fileSpecification">The name of the file.</param>
      <param name="pageIndex">The 0-based index of the page.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor(TallComponents.PDF.Navigation.Destination)">
      <summary>
            Create a new go-to action based on a Destination
            </summary>
      <param name="destination">The destination</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.GoToAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.GoToAction.Destination">
      <summary>
            The destination this go-to action points to.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AsyncJobState.Created">
      <summary>
            Job has been created, but has not been started yet.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AsyncJobState.Started">
      <summary>
            Job has been started.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AsyncJobState.Stopped">
      <summary>
            Job has been stopped.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.AsyncJobState.Ready">
      <summary>
            Job has completed sucessfully.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.AsyncJob.Finalize">
      <summary>
            This should not get invoked for as long as the job is running (I think), as then the thread still has
            a reference to this intance.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.AsyncJob.Dispose">
      <summary>
            In case a job holds resources data, it makes sense to Dispose it as soon as possble.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.AsyncJob.Dispose(System.Boolean)">
      <summary>
            Override this if your job needs to dispose resources. 
            </summary>
      <param name="disposing">True if called explicitly. False if called by the garbage collector.</param>
    </member>
    <member name="M:TallComponents.PDF.AsyncJob.Start(System.Object)">
      <summary>
            Start the job with the given job parameters.
            </summary>
      <param name="jobParameters">
      </param>
    </member>
    <member name="M:TallComponents.PDF.AsyncJob.Stop">
      <summary>
            Stop the job.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.AsyncJob.Wait">
      <summary>
            Wait for the job to complete.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.AsyncJob.Job(System.Object)">
      <summary>
            Job implementation. Override this method to define the job that must be done.
            </summary>
      <param name="jobParameters">The passed job parameters.</param>
    </member>
    <member name="P:TallComponents.PDF.AsyncJob.StopRequested">
      <summary>
            Returns true after Stop has been called for this job. The job override should check this
            value regularly and stop at the first opportunity once it becomes true.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.AsyncJob.IsDisposed">
      <summary>
            Indicates whether the AsyncJob was disposed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Transforms.TranslateTransform">
      <summary>
            A 2D geometric transform that applies a translation.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TranslateTransform.#ctor">
      <summary>
            Create a new TranslateTransform.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TranslateTransform.#ctor(System.Double,System.Double)">
      <summary>
            Create a new TranslateTransform.
            </summary>
      <param name="x">Translation along the x-axis.</param>
      <param name="y">Translation along the y-axis.</param>
    </member>
    <member name="P:TallComponents.PDF.Transforms.TranslateTransform.X">
      <summary>
            Translation along the x-axis.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Transforms.TranslateTransform.Y">
      <summary>
            Translation along the y-axis.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FillRule">
      <summary>
            Different rules for filling.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.FillRule.NonzeroWindingNumber">
      <summary>
            Specifies the nonzero winding number rule.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.FillRule.EvenOdd">
      <summary>
            Specifies the even-odd rule.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandStartSegment">
      <summary>
            The start point of the free hand path.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandStartSegment.#ctor">
      <summary>
            Create a new FreeHandStartSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandStartSegment.#ctor(System.Double,System.Double)">
      <summary>
            Creates a new FreeHandStartSegment with given end point.
            </summary>
      <param name="x">Horizontal position of start point.</param>
      <param name="y">Vertical position of start point.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandStartSegment.X">
      <summary>
            Horizontal position of start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandStartSegment.Y">
      <summary>
            Vertical position of start point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape">
      <summary>
            Shape for the Interleaved 2 of 5 barcode.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor">
      <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor(System.String)">
      <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
      <param name="data">The Data. This should not include the start and end codes '*'.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.QuiteZone">
      <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Checksum">
      <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumWidth">
      <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumHeight">
      <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.WideNarrowRatio">
      <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Security.Security">
      <summary>
            This base class encapsulates security settings of a PDF document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Security.Security.Clone">
      <summary>
            Clones a Security.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Security.Security.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a Security.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.Print">
      <summary>
            Allow printing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.Change">
      <summary>
            Allow changing the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.CopyExtract">
      <summary>
            Allow content copying or extraction.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.AuthorCommentsFormFields">
      <summary>
            Allow authoring comments and form fields.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.FormFillSign">
      <summary>
            Allow form field fill-in or signing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.ExtractAccessibilityContents">
      <summary>
            Enable content accessibility.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.Assembly">
      <summary>
            Allow document assemble (insert, rotate, or delete pages and bookmarks or thumbnail images).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.Security.PrintHighQuality">
      <summary>
            Allow printing at high quality.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.PageBoundary">
      <summary>
            The box which should be used as outline for the page.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.PageBoundary.Default">
      <summary>
            The dimensions of the intersection of the media box and the crop box. 
            If the crop box is not present, the visible box is set to the media box.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.PageBoundary.MediaBox">
      <summary>
            The boundaries of the physical medium on which the page is intended to be displayed or printed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.PageBoundary.CropBox">
      <summary>
            The visible region. When the page is displayed or printed, its contents are to be clipped (cropped).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.PageBoundary.BleedBox">
      <summary>
            The region to which the contents of the page should be clipped when output in a production environment.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.PageBoundary.TrimBox">
      <summary>
            The intended dimensions of the finished page after trimming.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.PageBoundary.ArtBox">
      <summary>
            The extent of the page’s meaningful content (including potential white space) as intended by the page’s creator.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.CieBasedColor">
      <summary>
            Base class for all derived cie-based color classes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.NamedDestination">
      <summary>
            The named destination describe a location in a PDF document, based on a name.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.NamedDestination.#ctor">
      <summary>
            Create a new named destination, without specifying a name.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.NamedDestination.#ctor(System.String)">
      <summary>
            Create a new named destination, with specifying a name.
            </summary>
      <param name="name">The name this named destination will initially get.</param>
    </member>
    <member name="P:TallComponents.PDF.Navigation.NamedDestination.Name">
      <summary>
            The name for this named destination.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.JavaScript.ScriptBehavior">
      <summary>
            The JavaScript behavior for JavaScript actions in fields.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.None">
      <summary>
            No script will be executed. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Calculate">
      <summary>
            The calculate script will be executed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Format">
      <summary>
            The format script will be executed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Validate">
      <summary>
            The validate script will be executed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Full">
      <summary>
            All scripts will be executed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.JavaScript.JavaScriptCollection">
      <summary>
            JavaScript defined at document level. You cannot create an instance of this class. Instead you retrieve an existing JavaScriptCollection object
            from the JavaScript property of the Document class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Add(System.String,TallComponents.PDF.JavaScript.JavaScript)">
      <summary>
            Add a javaScript with the given name.
            </summary>
      <param name="name">The name to use.</param>
      <param name="javaScript">The JavaScript to add.</param>
      <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Remove(System.String)">
      <summary>
            Removes the JavaScript object with the given name.
            </summary>
      <param name="name">The name to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Exists(System.String)">
      <summary>
            Check if the given name exists in the current collection.
            </summary>
      <param name="name">The script name to check.</param>
      <returns>True if found, false otherwise</returns>
      <para>
            The name is case sensitive.
            </para>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.Count">
      <summary>
            The number of JavaScript element in this collection
            </summary>
    </member>
    <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.ScriptNames">
      <summary>
            The script names in this document.
            </summary>
      <para>
            The script names are case sensitive.
            </para>
    </member>
    <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.Item(System.String)">
      <summary>
            The JavaScript associated with the given name.
            </summary>
      <param name="name">The script name.</param>
      <returns>A JavaScript object with the JavaScript code in it, <see langword="null" /> if the name cannot be found.</returns>
    </member>
    <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.Item(System.Int32)">
      <summary>
            The JavaScript associated with the given index.
            </summary>
      <param name="index">The zero-base index.</param>
      <returns>A JavaScript object with the JavaScript code in it.</returns>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.CheckState">
      <summary>
            The states for the check box.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.CheckState.On">
      <summary>
            The checkbox is checked.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.CheckState.Off">
      <summary>
            The checkbox in unchecked.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.CheckState.Neutral">
      <summary>
            The checkbox is neutral.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.CheckState.Unknown">
      <summary>
            The checkbox value is not one of the three accepted values. Note: You cannot set properties to this value.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.UnknownBarcodeField">
      <summary>
            An unknown bar code PDF form field. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.UnknownBarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField">
      <summary>
            A Interleave 2 of 5 Barcode PDF form field. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.Checksum">
      <summary>
            specifies if this  barcode includes a checksum.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.WideNarrowRatio">
      <summary>
            Specifies the wide narrow ratio for this barcode 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.EmbeddedFile">
      <summary>
            An embedded file (also know as attachment) object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFile.#ctor(System.IO.Stream,System.String)">
      <summary>
            Create a new <see cref="T:TallComponents.PDF.EmbeddedFile" /> from a Stream.
            </summary>
      <param name="stream">The stream</param>
      <param name="fileName">Associated file name identifying th embedded file</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFile.Write(System.IO.Stream)">
      <summary>
            Write this embedded file to a stream, eg a FileStream or MemoryStream.
            </summary>
      <param name="stream">Write the embedded file to this stream.</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFile.Write(System.IO.BinaryWriter)">
      <summary>
            Write this embedded file to any writer.
            </summary>
      <param name="binaryWriter">Write the embedded file to this writer.</param>
    </member>
    <member name="M:TallComponents.PDF.EmbeddedFile.ToString">
      <summary>
            Returns a string for the current EmbeddedFile object.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFile.Description">
      <summary>
            The description provided to this embedded file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFile.FileName">
      <summary>
            The file name for this embedded file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFile.MimeType">
      <summary>
            The MIME type for this embedded file. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFile.CreationDate">
      <summary>
            The creation date for this embedded file. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFile.ModificationDate">
      <summary>
            The modification date for this embedded file. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFile.Size">
      <summary>
            The size in bytes for this embedded file. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.EmbeddedFile.FolderName">
      <summary>
            The folder name in which this embedded file should be placed. (can be null, meaning not placed in any folder)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.UriAction">
      <summary>
            A UriAction starts an external web site from its URL.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.UriAction.#ctor">
      <summary>
            Creates a new UriAction that starts an external web site from its URL. Initial URL is empty.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.UriAction.#ctor(System.String)">
      <summary>
            Creates a new UriAction that starts an external web site from the given URL.
            </summary>
      <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.UriAction.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new UriAction that starts an external web site from the given URL.
            </summary>
      <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
      <param name="isMap">A flag specifying whether to track the mouse position when the Uri is resolved.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.UriAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned uri action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.UriAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.UriAction.Uri">
      <summary>
            The uniform resource identifier (uri) for this Uri action.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.UriAction.IsMap">
      <summary>
            A flag specifying whether to track the mouse position when the Uri is resolved.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.IndexRangeCollection">
      <summary>
            A collection (sequence) of index ranges.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.GetEnumerator">
      <summary>
            Get a PageRange enumerator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.Add(TallComponents.PDF.IndexRange)">
      <summary>
            Add a PageRange to the collection.
            </summary>
      <param name="item">The page range.</param>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.Remove(TallComponents.PDF.IndexRange)">
      <summary>
            Remove a PageRange from the collection.
            </summary>
      <param name="item">The page range.</param>
      <returns>True if sucessful/</returns>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.AddRange(TallComponents.PDF.IndexRange[])">
      <summary>
            Add a collection of PageRange items.
            </summary>
      <param name="items">The PageRange items.</param>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.Insert(System.Int32,TallComponents.PDF.IndexRange)">
      <summary>
            Insert a PageRange at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The PageRange item.</param>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.Clear">
      <summary>
            Remove all PageRange elements from the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.RemoveAt(System.Int32)">
      <summary>
            Remove the PageRange at the specified index.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.Contains(TallComponents.PDF.IndexRange)">
      <summary>
            Returns true if the collection contains the specified item.
            </summary>
      <param name="item">The PageRange item.</param>
      <returns>True if the collection contains the specified item.</returns>
    </member>
    <member name="M:TallComponents.PDF.IndexRangeCollection.IndexOf(TallComponents.PDF.IndexRange)">
      <summary>
            Returns the index of the specified item.
            </summary>
      <param name="item">The PageRange item.</param>
      <returns>The index of the specified item, or - 1 if it does not exist in this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.IndexRangeCollection.Count">
      <summary>
            The number of PageRange items in the collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.IndexRangeCollection.Item(System.Int32)">
      <summary>
            Returns the PageRange at the specified index.
            </summary>
      <param name="index">The index.</param>
      <returns>The PageRange at the specified index.</returns>
    </member>
    <member name="T:TallComponents.PDF.Transforms.TransformCollection">
      <summary>
            A collection of transforms that can be applied as a single transform.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.#ctor">
      <summary>
            Create a new TransformCollection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.Add(TallComponents.PDF.Transforms.Transform)">
      <summary>
            Add a new transform.
            </summary>
      <param name="transform">Add this transform.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.Remove(TallComponents.PDF.Transforms.Transform)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> from this <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
      <param name="transform">The transform to remove.</param>
      <returns>true if removing the transform succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.AddRange(TallComponents.PDF.Transforms.Transform[])">
      <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Transforms.Transform">transforms</see> to the end of the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
      <param name="transforms">The array of <see cref="T:TallComponents.PDF.Transforms.Transform">transforms</see> to be added to the end of the <see cref="T:TallComponents.PDF.Transforms.TransformCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.Insert(System.Int32,TallComponents.PDF.Transforms.Transform)">
      <summary>
            Inserts a transform into the TransformCollection at the specified index.
            </summary>
      <param name="index">At this index.</param>
      <param name="transform">Add this transform.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.Clear">
      <summary>
            Removes all transforms from the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.IndexOf(TallComponents.PDF.Transforms.Transform)">
      <summary>
            Returns the index of the specified transform.
            </summary>
      <param name="transform">The transform to locate in this collection.</param>
      <returns>The zero-based index of the transform found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.Contains(TallComponents.PDF.Transforms.Transform)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> is in the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
      <param name="transform">The <see cref="T:TallComponents.PDF.Transforms.Transform" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Transforms.Transform" /> is found in this <see cref="T:TallComponents.PDF.Transforms.TransformCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> from the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Transforms.Transform" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Transforms.TransformCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> by zero-based index from the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Transforms.TransformCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see>s actually contained in the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see></summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.RenderingIntent">
      <summary>
            Enumerates rendering intent types.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.RenderingIntent.RelativeColorimetric">
      <summary>
            Colors are represented with respect to the combination of the light source and the output medium’s white point.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.RenderingIntent.AbsoluteColorimetric">
      <summary>
            Colors are represented solely with respect to the light source; no correction is made for the output medium’s white point.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.RenderingIntent.Saturation">
      <summary>
            Colors are represented in a manner that preserves or emphasizes saturation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.RenderingIntent.Perceptual">
      <summary>
            Colors are represented in a manner that provides a pleasing perceptual appearance.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationMode.HighSpeed">
      <summary>
            HighSpeed uses a faster algorithm but with less quality ( especially for DeviceCMYK ).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationMode.HighQuality">
      <summary>
            ICC Based profiles are used to transform colors from the color space to the device.
            Very good quality, but a bit slower.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.SolidBrush">
      <summary>
            Solid brush. Used to control how a path is filled.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.SolidBrush.#ctor">
      <summary>
            Create a solid black brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Brushes.SolidBrush.#ctor(TallComponents.PDF.Colors.Color)">
      <summary>
            Create a solid brush with specified color.
            </summary>
      <param name="color">Color of this SolidBrush.</param>
    </member>
    <member name="M:TallComponents.PDF.Brushes.SolidBrush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Brushes.SolidBrush.Color">
      <summary>
            Color of this brush.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Configuration.ImageStripMode.HighSpeed">
      <summary>
             Accept interpolation artifacts while drawing images that are composed of
            tiles of smaller images, decreasing the time needed to draw them.
             </summary>
    </member>
    <member name="F:TallComponents.PDF.Configuration.ImageStripMode.HighQuality">
      <summary>
            Avoid interpolation artifacts while drawing images that are composed of
            tiles of smaller images, increasing the time needed to draw them.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Rasterizer.TiffCompression.None">
      <summary>
            Do not compress image data.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Rasterizer.TiffCompression.CcittG3">
      <summary>
            CCITT Group 3 fax encoding. Referred to as CCITT T.4 by TIFF 6.0.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Rasterizer.TiffCompression.CcittG4">
      <summary>
            CCITT Group 4 fax encoding. Referred to as CCITT T.6 by TIFF 6.0.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Rasterizer.TiffCompression.PackBits">
      <summary>
            Macintosh RLE (run-length encoding).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.XdpFormData">
      <summary>
            Specialization of FormData that represents Xdp data.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.#ctor(System.IO.Stream)">
      <summary>
            Create a XdpFormData object, based on existing data.
            </summary>
      <param name="stream">The stream to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.Write(System.IO.BinaryWriter)">
      <summary>
            Write this XDP FormData.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.XdpFormData.Item(System.String)">
      <summary>
            Returns the data for this name
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.XdpFormData.Path">
      <summary>
            The path from the PDF document file that this XDP file was exported 
            from or is intended to be imported into.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DocumentWriteMode">
      <summary>
            Different document write modes.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentWriteMode.Compact">
      <summary>
            Instead of appending an update only, the document is completely rewitten.
            <para>
            Note that existing signed signature fields will be invalidated.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentWriteMode.AppendUpdate">
      <summary>
            Only an update is appended to this existing document.
            <para>
            A new document will be written in Compact mode since this will be the first update.
            Existing document will be forced to append changes only.
            </para><para>
            Supported features:
            <list type="bullet"><item>Changes in Metadata.</item><item>Changes in DocumentInfo.</item><item>Removing, adding or moving Pages.</item><item>Adding Shapes to pages.</item><item>Changes in Actions (except the Bookmark actions).</item><item>Changes in NamedDestinations.</item><item>Changes in document level JavaScripts.</item><item>Changes in Widgets.</item><item>Changes in Fields (including signing an additional signature field, see signature field for details).</item><item>Changes in Bookmarks.</item><item>Changes in ViewerPreferences.</item></list></para><para>
            Note: You should not change the Security, otherwise an incorrect document will be written.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentWriteMode.Auto">
      <summary>
            The document is writen eighter Full or AppendUpdate, depending if a 
            signed signature is already embedded in the document or the document is marked 
            that it allows to have updates only.
            <para>
            New document will be written in Compact mode.
            Existing document will be written in Full mode if possible,
            otherwise AppendUpdate mode will be used.
            </para></summary>
    </member>
    <member name="T:TallComponents.PDF.UpdateCollection">
      <summary>
            An update collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.UpdateCollection.Contains(TallComponents.PDF.Update)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Update">update</see> is in the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see>.
            </summary>
      <param name="update">The <see cref="T:TallComponents.PDF.Update" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Update" /> is found in this <see cref="T:TallComponents.PDF.UpdateCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.UpdateCollection.IndexOf(TallComponents.PDF.Update)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Update">Update</see> in the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see>.
            </summary>
      <param name="update">The <see cref="T:TallComponents.PDF.Update" /> to locate in the <see cref="T:TallComponents.PDF.UpdateCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Update" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.UpdateCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.UpdateCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.UpdateCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:TallComponents.PDF.Update">Update</see> by zero-based index from the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.UpdateCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Update">Update</see>s actually contained in the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see></summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.ClipVisibility">
      <summary>
            This enum specifies the different clip visibilities a glyph can have.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.TextExtraction.ClipVisibility.Fully">
      <summary>
            This glyph is fully clipped, so nothing will be visible.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.TextExtraction.ClipVisibility.Partially">
      <summary>
            This glyph is partially clipped, so some content can be visible 
            (depending on the pen and brush, e.g. if both are null this is transparent content).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.TextExtraction.ClipVisibility.None">
      <summary>
            This glyph is not clipped, so all content can be visible 
            (depending on the pen and brush, e.g. if both are null this is transparent content).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.PdfA1bFormatOptions">
      <summary>
            Encapsulates options that are specific to the PdfA1b document format.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.PdfA1bFormatOptions.#ctor">
      <summary>
            Constructs a new PdfA1bFormatOptions instance with default settings. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PdfA1bFormatOptions.Resolution">
      <summary>
            Specifies the resolution used in the PDF/A conversion. (default = 200).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layer">
      <summary>
            This class represents a single layer item.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layer.#ctor">
      <summary>
            Create a new Layer, without a name.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layer.#ctor(System.String)">
      <summary>
            Create a new Layer.
            </summary>
      <param name="name">The name of this layer.</param>
    </member>
    <member name="M:TallComponents.PDF.Layer.#ctor(System.String,System.Boolean)">
      <summary>
            Create a new Layer.
            </summary>
      <param name="name">The name of this layer.</param>
      <param name="visible">The state if this layer should be visible or invisible by default.</param>
    </member>
    <member name="M:TallComponents.PDF.Layer.Clone">
      <summary>
            Clones this Layer, and detach it from the original document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layer.System#ICloneable#Clone">
      <summary>
            Clones this Layer, and detach it from the original document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layer.ToString">
      <summary>
            The name is this Layer.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layer.Name">
      <summary>
            The name of this layer.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layer.Visible">
      <summary>
            The state if this layer must be visible or invisible when the page is rasterized.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DocumentFormat">
      <summary>
      </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentFormat.Default">
      <summary> 
            Meets the normal PDF specification.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.DocumentFormat.PdfA1b">
      <summary>
            PDF/A-1b compliant. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.SignatureWidget">
      <summary>
            A signature widget is a specialized widget.
             </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureWidget.#ctor">
      <summary>
            Create a new PDF form field Signature Widget.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PDF form field Signature Widget.
            </summary>
      <param name="left">The left position for this widget.</param>
      <param name="bottom">The bottom position for this widget.</param>
      <param name="width">The width for this widget.</param>
      <param name="height">The height for this widget.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureWidget.SignedAppearance">
      <summary>
            The appearance settings that will be used during signing. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle">
      <summary>
            Enum which specifies the style for a SignatureAppearance.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.TextOnly">
      <summary>
            The text will use all space. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.ImageOnly">
      <summary>
            The image will use all space
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.ImageAndText">
      <summary>
            On the left side an image will be placed, if no image is given an empty image is used.
            On the right side the text is placed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.NameAndText">
      <summary>
            On the left side the name of the signer is used.
            On the right side the text is placed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.UnitType">
      <summary>
            Known units handled by the <see cref="T:TallComponents.PDF.Unit">Unit</see> class.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Micrometer">
      <summary>
            Unit of length. 1/1000.0000 meter.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Millimeter">
      <summary>
            Unit of length. 1/1000 meter.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Centimeter">
      <summary>
            Unit of length. 1/100 meter.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Meter">
      <summary>
            Unit of length.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Pica">
      <summary>
            Unit of length. 1/12 point
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Point">
      <summary>
            Unit of length. 1/72 inch. Point is the base unit used in PDF documents.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Pixel">
      <summary>
            Unit of length. Usually 1/96 inch.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Inch">
      <summary>
            Unit of length. 1 inch is 2.54 cm.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Foot">
      <summary>
            Unit of length. 12 inch is 1 foot.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Yard">
      <summary>
            Unit of length. 36 inch is 1 yard.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.UnitType.Percentage">
      <summary>
            Relative unit, represented as a fraction. 100% is 1.0, 50% is 0.5.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.LengthyJobMonitorCollection.#ctor">
      <summary>
            ctr
            </summary>
    </member>
    <member name="P:TallComponents.PDF.LengthyJobMonitorCollection.Cancelled">
      <summary>
            Returns whether all jobs in the collection are cancelled.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Transforms.IdentityTransform">
      <summary>
            The identity transform. This class cannot be instanciated. 
            Instead you retrieve an existing IndentityTransform object from the static Identity property of the Transform class. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.SvgShape">
      <summary>
            A shape containing a svg image.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.SvgShape.#ctor">
      <summary>
            Creates a new SvgShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.SvgShape.#ctor(System.String)">
      <summary>
            Create a new SvgShape from a relative, absolute or virtual path.
            </summary>
      <param name="path">Relative, absolute or virtual path.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.SvgShape.#ctor(System.IO.Stream)">
      <summary>
            Create a new SvgShape from a stream.
            </summary>
      <param name="stream">The stream containing the svg data.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.SvgShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Shapes.SvgShape.GetWebCredentials">
      <summary>
            Occurs when a svg is loaded from a weblocation to retrieve the credentials.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SvgShape.Path">
      <summary>
            Relative or absolute path of svg image file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SvgShape.Width">
      <summary>
            The width of the svg image. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SvgShape.Height">
      <summary>
            The height of the svg image. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SvgShape.KeepAspectRatio">
      <summary>
            If KeepAspectRatio is set to true, the height is calculated from the 
            width so that the width/height ratio is equal to the ratio of the original svg image. 
            If set to false, the specified width and height are used and the svg image will in general appear distorted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SvgShape.ViewPortWidth">
      <summary>
            Get the view port width specified on the root SVG element.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SvgShape.ViewPortHeight">
      <summary>
            Get the view port height specified on the root SVG element.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.SvgShape.ViewBox">
      <summary>
            Get the view port specified on the root SVG element(can be null/nothing).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Canvas">
      <summary>
            Each page has 4 canvasses: an underlay, a visual underlay, an overlay and a visual overlay, all of type Canvas.
            You draw underneath or on top of a page by adding shapes to one of the 
            4 layer objects. The layers are non-creatable and retrieved through
            the [Visual]Underlay and [Visual]Overlay properties of a page object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.#ctor(TallComponents.PDF.Shapes.ShapeCollection)">
      <summary>
            Creates a Canvas based on an existing shape collection.
            </summary>
      <param name="masterShapes">The shape collection to include.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.Add(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Add a shape to this canvas. Shapes are drawn in the same order as they are added.
            Consequently a shape may obscure previously added shapes.
            </summary>
      <param name="shape">The shape to add.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.Remove(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Remove a shape from this canvas.
            </summary>
      <param name="shape">Remove this shape.</param>
      <returns>true if removing the shape succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.AddRange(TallComponents.PDF.Shapes.Shape[])">
      <summary>
            Adds the elements of a Shape array to the end of this collection.
            </summary>
      <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.Insert(System.Int32,TallComponents.PDF.Shapes.Shape)">
      <summary>
            Insert an existing shape at the specified index.
            </summary>
      <param name="index">The index of the shape after insertion.</param>
      <param name="shape">Insert this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.RemoveAt(System.Int32)">
      <summary>
            Remove a shape at the specified index.
            </summary>
      <param name="index">The index of the shape to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.Clear">
      <summary>
            Remove all shapes from this canvas.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.Contains(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Shapes.Canvas">Canvas</see>.
            </summary>
      <param name="shape">The <see cref="T:TallComponents.PDF.Shapes.Shape" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Shape" /> is found in this <see cref="T:TallComponents.PDF.Shapes.Shape" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.IndexOf(TallComponents.PDF.Shapes.Shape)">
      <summary>
            Returns the index of the specified shape.
            </summary>
      <param name="shape">The shape to locate on this canvas.</param>
      <returns>The zero-based index of the shape found on this canvas; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Canvas.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Canvas.Width">
      <summary>
            Width of this canvas.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Canvas.Height">
      <summary>
            Height of this canvas.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Canvas.Count">
      <summary>
            Number of shapes in this Canvas.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Canvas.Item(System.Int32)">
      <summary>
            Get a shape by index (0-based).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Pens.DashCollection">
      <summary>
            A dash collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.#ctor">
      <summary>
            Create an empty <see cref="T:TallComponents.PDF.Pens.DashCollection" />.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.#ctor(System.Double[])">
      <summary>
            Creates <see cref="T:TallComponents.PDF.Pens.DashCollection" /> with the provided pattern.
            </summary>
      <param name="pattern">The pattern used to initialize this <see cref="T:TallComponents.PDF.Pens.DashCollection" /></param>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.op_Implicit(System.Double[])~TallComponents.PDF.Pens.DashCollection">
      <summary>
            Provides implicit conversion from double[].
            </summary>
      <param name="pattern">The pattern that will be implicitly casted.</param>
      <returns>A DashCollection that has the same values as the provided double array.</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.op_Implicit(TallComponents.PDF.Pens.DashCollection)~System.Double[]">
      <summary>
            Provides implicit conversion to double[].
            </summary>
      <param name="dashes">The dash collection that will be implicitly casted.</param>
      <returns>A double array that has the same values as the provided DashCollection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.Add(System.Double)">
      <summary>
            Adds an <see cref="T:System.Double">Dash</see> to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
      <param name="dash">The <see cref="T:System.Double">dash</see> to be addded to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.Remove(System.Double)">
      <summary>
            Removes an <see cref="T:System.Double">dash</see> from this <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
      <param name="dash">The <see cref="T:System.Double">dash</see> to remove.</param>
      <returns>true if removing the <see cref="T:System.Double">dash</see> succeeded/</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.AddRange(System.Double[])">
      <summary>
            Adds the entries in an array of <see cref="T:System.Double">dashes</see> to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
      <param name="dashes">The array of <see cref="T:System.Double">dashes</see> to be added to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.Clear">
      <summary>
            Removes all dashes from the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.Contains(System.Double)">
      <summary>
            Determine whether an <see cref="T:System.Double">dash</see> is in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
      <param name="dash">The <see cref="T:System.Double">dash</see> to verify.</param>
      <returns>True if the <see cref="T:System.Double">dash</see> is found in this <see cref="T:TallComponents.PDF.Pens.DashCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.IndexOf(System.Double)">
      <summary>
            Searches for the specified <see cref="T:System.Double">dash</see> in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
      <param name="dash">The <see cref="T:System.Double">dash</see> to locate in the <see cref="T:TallComponents.PDF.Pens.DashCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:System.Double">dash</see> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.Insert(System.Int32,System.Double)">
      <summary>
            Insert a <see cref="T:System.Double">dash</see> on a specific place in this <see cref="T:TallComponents.PDF.Pens.DashCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:System.Double">dash</see> should be inserted.</param>
      <param name="dash">The <see cref="T:System.Double">dash</see> to be insert.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.InsertRange(System.Int32,System.Double[])">
      <summary>
            Insert the entries in an array of <see cref="T:System.Double">dashes</see> to the specific locations in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
      <param name="index">The zero based start index for the inserted <see cref="T:System.Double">dashes</see>.</param>
      <param name="dashes">The <see cref="T:System.Double">dashes</see> to be interted in the <see cref="T:TallComponents.PDF.Pens.DashCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.RemoveAt(System.Int32)">
      <summary>
            Removes a <see cref="T:System.Double">dash</see> from the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index from the <see cref="T:System.Double">dash</see> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Pens.DashCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:System.Double">dash</see> by zero-based index from the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.DashCollection.Count">
      <summary>
            Get the number of <see cref="T:System.Double">dashes</see> actually contained in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see></summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.LineBreakFragment">
      <summary>
            Insert this fragment to force a line break.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Fragment">
      <summary>
            The fragment class represents a piece of text as part of a multiline text shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.GetTabSize">
      <summary>
            For internal use only.
            </summary>
      <returns>For internal use only.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor">
      <summary>
            Initializes a new empty instance of the Fragment class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String)">
      <summary>
            Initialize a new instance of the Fragment class with given content.
            </summary>
      <param name="text">Content.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String,TallComponents.PDF.Fonts.Font)">
      <summary>
            Initialize a new instance of the Fragment class with given content and font.
            </summary>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String,System.Double)">
      <summary>
            Initialize a new instance of the Fragment class with given content and fontsize.
            </summary>
      <param name="text">Content.</param>
      <param name="fontSize">Font size.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String,TallComponents.PDF.Fonts.Font,System.Double)">
      <summary>
            Initialize a new instance of the Fragment class with given content, font and fontsize.
            </summary>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Font size.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.Clone">
      <summary>
            Clones a Fragment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.Fragment.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a Fragment
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Text">
      <summary>
            Get or set the content of this fragment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Bold">
      <summary>
            Get or set if the text appears bold. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Italic">
      <summary>
            Get or set if the text appears italic. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.ReadDirection">
      <summary>
            Get or set the direction of the text fragment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.KeepWithNext">
      <summary>
            Get or set if the next fragment is started on the same line as this fragment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.FontSize">
      <summary>
            Font size in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Font">
      <summary>
            The font for this fragment. You can use one of the 14 standard PDF fonts or a TrueType font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.PreserveWhiteSpace">
      <summary>
            Preserve spaces, tabs (\t), carriage returns (\r) and line feeds (\n). 
            Set this property to true to include preformatted text like code fragments.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.TrimStartOfLine">
      <summary>
            If PreserveWhiteSpace is true, for each (see remarks) line the leading whitespaces will be removed. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.TabSize">
      <summary>
            If PreserveWhiteSpace is true, each tab character (\t) is replaced by 
            TabSize number of spaces. Default is 3.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.SuppressSpaceBefore">
      <summary>
            Suppress the insertion of an extra space between two successive fragments.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.StrikeOut">
      <summary>
            Get or set if the fragment is rendered striked out.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Underline">
      <summary>
            Get or set if the fragment is rendered with an underline.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.DoubleUnderline">
      <summary>
            Get or set if the fragment is rendered with a double underline.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Overline">
      <summary>
            Get or set if the fragment is rendered with an overline.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.TextColor">
      <summary>
            Get or set the color of the text and decoration, see remarks
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Pen">
      <summary>
            Used to draw the curves on this text. (default = null)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Brush">
      <summary>
            The brush that is used to fill this text. (default = Black - SolidBrush)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Superscript">
      <summary>
            Get or set if the fragment is rendered as superscript.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Subscript">
      <summary>
            Get or set if the fragment is rendered as subscript.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Background">
      <summary>
            Get or set the brush that is used to paint the background of the fragment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.Actions">
      <summary>
            The actions that the PDF reader will execute when this link is clicked.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.Fragment.ShowLinkBorder">
      <summary>
            If true a black 1pt outline is drawn around the clickable area of the link.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.LineBreakFragment.#ctor">
      <summary>
            Create a new line break fragment.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Fonts.FontLicensingRights">
      <summary>
            Font licensing rights.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.Unknown">
      <summary>
            The font licensing rights could not be determined.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.InstallableEmbedding">
      <summary>
            This setting indicates that the font may be embedded and permanently installed on the 
            remote system by an application. The user of the remote system acquires the identical rights, 
            obligations and licenses for that font as the original purchaser of the font, and is subject 
            to the same end-user license agreement, copyright, design patent, and/or trademark as was the 
            original purchaser.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.RestrictedLicenseEmbedding">
      <summary>
            This setting indicates that the font must not be modified, embedded or exchanged in any manner 
            without first obtaining permission of the legal owner. Caution: For Restricted License embedding 
            to take effect, it must be the only level of embedding selected.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.PreviewAndPrintEmbedding">
      <summary>
            This setting indicates that the font may be embedded, and temporarily loaded on the 
            remote system. Documents containing Preview &amp; Print fonts must be opened "read-only;" no edits 
            can be applied to the document. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.EditableEmbedding">
      <summary>
            This setting indicates that the font may be embedded but must only be installed temporarily 
            on other systems. In contrast to Preview &amp; Print fonts, documents containing Editable fonts may be 
            opened for reading, editing is permitted, and changes may be saved. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.NoSubsetting">
      <summary>
            This setting indicates that the font may not be subsetted prior to embedding. 
            Other embedding restrictions may also apply.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.BitmapEmbeddingOnly">
      <summary>
            This setting indicates that only bitmaps contained in the font may be embedded. 
            No outline data may be embedded. If there are no bitmaps available in the font, 
            then the font is considered unembeddable and the embedding services will fail. 
            Other embedding restrictions may also apply. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.ReadDirection">
      <summary>
            Different read directions for text.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.ReadDirection.LeftToRight">
      <summary>
            Text is read from left to right.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.ReadDirection.RightToLeft">
      <summary>
            Text is read from right to left (e.g. Arabic).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.ReadDirection.Default">
      <summary>
            Depending of the usage this means: LeftToRight or InheritFromParent.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Diagnostics.MessageSeverity">
      <summary>
            Severity of a message
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Information">
      <summary>
            An informational message.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Warning">
      <summary>
            A warning.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Error">
      <summary>
            An error.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.GrayColor">
      <summary>
            Gray color.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.GrayColor.#ctor(System.Double)">
      <summary>
            Create a new GrayColor from it's single color component.
            </summary>
      <param name="colorValue">Grayscale value [0-255].</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.GrayColor.Convert">
      <summary>
            Convert to a .Net system color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Colors.GrayColor.Value">
      <summary>
            The grayscale value [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.GrayColor.Name">
      <summary>
            The name of the gray scale color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.GrayColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.GrayColor.White">
      <summary>
            Grey white
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.GrayColor.Black">
      <summary>
            Grey Black
            </summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.Glyph">
      <summary>
            Represents a single glyph on a PDF page. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.Characters">
      <summary>
            Unicode characters that this glyph represents.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.BottomLeft">
      <summary>
            The position of the bottom-left corner of the glyph (in page coordinates).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.BottomRight">
      <summary>
            The position of the bottom-right corner of the glyph (in page coordinates).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.TopLeft">
      <summary>
            The position of the top-left corner of the glyph (in page coordinates).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.TopRight">
      <summary>
            The position of the top-right corner of the glyph (in page coordinates).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.Font">
      <summary>
            The associated font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.FontSize">
      <summary>
            The effective size of the associated font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.IsClipped">
      <summary>
            Whether this glyph is [partially] clipped or not.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.Pen">
      <summary>
            The pen used to draw this glyph.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.Glyph.Brush">
      <summary>
            The brush used to draw this glyph.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.InternalDestination">
      <summary>
            Describes a location inside a PDF document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestination.#ctor">
      <summary>
            Create a new internal destination.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestination.#ctor(TallComponents.PDF.Page)">
      <summary>
            Create a new internal destination, based on a page.
            </summary>
      <param name="page">The page to point to.</param>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestination.#ctor(TallComponents.PDF.Navigation.RemoteDestination,TallComponents.PDF.Document)">
      <summary>
            An resolved internal destination based on a remote destination and a document
            </summary>
      <param name="remoteDestination">The remote destination.</param>
      <param name="document">The document to resolve.</param>
    </member>
    <member name="P:TallComponents.PDF.Navigation.InternalDestination.Page">
      <summary>
            The page this destination points to.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.DropDownListField">
      <summary>
            A drop down list PDF form field (also known as combo box). 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.DropDownListField.#ctor(System.String)">
      <summary>
            Create a new drop down list field (also known as combobox).
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.DropDownListField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.Options">
      <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.AllowTextEntry">
      <summary>
            Whether text can be entered, if false the value of one of the available Options must be entered 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.SpellCheckAllowed">
      <summary>
            Specifies whether spell-checking is allowed on this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.CommitOnSelectionChange">
      <summary>
            Controls the moment that the selected value is committed to the field.
            If true, the field value is updated at the moment that a user changes
            the selection. If false, the value is updated when the field looses
            focus.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.DropDownListValue">
      <summary>
            The strong types Value
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.DropDownListDefaultValue">
      <summary>
            The default value for this field
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.CustomDefaultValue">
      <summary>
            The default value for this field
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.DateTimeFormat">
      <summary>
            The data format the date time field use.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.DateTimeFormat.Date">
      <summary>
            Date only.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.DateTimeFormat.Time">
      <summary>
            Time only.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.DateTimeFormat.DateAndTime">
      <summary>
            Both Date and Time.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.ListOptionCollection">
      <summary>
            Collection of form options. Associated with a DropDownListField and ListBoxField.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Clear">
      <summary>
            Removes all options from the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a list option at the specified zero-based index.
            </summary>
      <param name="index">Zero-based index.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Insert(System.Int32,TallComponents.PDF.Forms.Fields.ListOption)">
      <summary>
            Insert an option at the specified zero-based index.
            </summary>
      <param name="index">Zero-based index.</param>
      <param name="option">Insert this option.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Add(TallComponents.PDF.Forms.Fields.ListOption)">
      <summary>
            Add an option to the end of the collection.
            </summary>
      <param name="option">The option to add.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Remove(TallComponents.PDF.Forms.Fields.ListOption)">
      <summary>
            Remove a list option from this collection.
            </summary>
      <param name="listOption">Remove this list option.</param>
      <returns>true if removing the listOption succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.AddRange(TallComponents.PDF.Forms.Fields.ListOption[])">
      <summary>
            Adds the elements of a ListOption array to the end of this collection.
            </summary>
      <param name="listOptions">The array of ListOptions whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Contains(TallComponents.PDF.Forms.Fields.ListOption)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Forms.Fields.ListOption">ListOption</see> is in the <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection">ListOptionCollection</see>.
            </summary>
      <param name="listOption">The <see cref="T:TallComponents.PDF.Forms.Fields.ListOption" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Forms.Fields.ListOption" /> is found in this <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.IndexOf(TallComponents.PDF.Forms.Fields.ListOption)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Forms.Fields.ListOption">ListOption</see> in the <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection">ListOptionCollection</see>.
            </summary>
      <param name="listOption">The <see cref="T:TallComponents.PDF.Forms.Fields.ListOption" /> to locate in the <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Forms.Fields.ListOption" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListOptionCollection.Item(System.Int32)">
      <summary>
            Retrieve a list option by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListOptionCollection.Count">
      <summary>
            Number of options.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.WriteOptions">
      <summary>
            Encapsulates various write options.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.WriteOptions.#ctor">
      <summary>
            Create a new WriteOptions instance with default settings: Mode is Compact, KeepOpen is true and Format is Default.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.WriteOptions.#ctor(TallComponents.PDF.DocumentWriteMode,TallComponents.PDF.DocumentFormat,System.Boolean)">
      <summary>
            Create a new WriteOptions with given properties.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.WriteOptions.Mode">
      <summary>
            Append an update or write a new document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.WriteOptions.Format">
      <summary>
            Select the PDF format. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.WriteOptions.KeepOpen">
      <summary>
            Keep the document open after writing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.WriteOptions.FormatOptions">
      <summary>
            Format-specific options.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.FreeText">
      <summary>
            A free text annotation is a specialized markup and displays text directly on a page.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.FreeText.#ctor">
      <summary>
            Create a new free text markup.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.FreeText.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new free text markup.
            </summary>
      <param name="left">The left position for this free text markup.</param>
      <param name="bottom">The bottom position for this free text markup.</param>
      <param name="width">The width for this free text markup.</param>
      <param name="height">The height for this free text markup.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.FreeText.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The visitor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.InteriorColor">
      <summary>
            The interior color of the FreeText markup.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.BorderColor">
      <summary>
            The border color 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.TextColor">
      <summary>
            The text color. If null, the text color is the same as the border color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.FontSize">
      <summary>
            The font size of the text.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.Orientation">
      <summary>
            Orientation of the FreeText annotation in degrees. Default is Rotate0.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.LaunchAction">
      <summary>
            A LaunchAction starts an external Application.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.LaunchAction.#ctor">
      <summary>
            Creates a new LaunchAction that starts an external Application.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.LaunchAction.#ctor(System.String)">
      <summary>
            Creates a new LaunchAction that starts an external Application.
            </summary>
      <param name="path">The complete path of the application to launch.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.LaunchAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned named action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.LaunchAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.LaunchAction.Path">
      <summary>
            The complete path of the application to launch.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Actions.LaunchAction.WindowBehavior">
      <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.ImportDataAction">
      <summary>
            The ImportData action imports field values from a file.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.ImportDataAction.#ctor">
      <summary>
            Create a new ImportData action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.ImportDataAction.#ctor(System.String)">
      <summary>
            Create a new ImportData action.
            </summary>
      <param name="path">The path of the FDF file to import.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.ImportDataAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned ImportData action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.ImportDataAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.ImportDataAction.Path">
      <summary>
            The path of the FDF file to import.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.GetWebCredentialsEventArgs">
      <summary>
            Class containing data for the GetWebCredentials event.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.GetWebCredentialsEventArgs.Url">
      <summary>
            The url to get the credentials for.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.GetWebCredentialsEventArgs.Credentials">
      <summary>
            The credentials for the url.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Pens.DashPattern">
      <summary>
            A pattern for a pen (e.g. solid, dotted, dashed, etc.). 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashPattern.#ctor(System.Double,System.Double[])">
      <summary>
            Create a custom pattern with given phase and pattern.
            </summary>
      <param name="phase">The start phase.</param>
      <param name="pattern">The pattern of dashes.</param>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashPattern.Parse(System.String)">
      <summary>
            Create a new DashPattern from a string description of alternating ink lengths..
            </summary>
      <param name="pattern">A comma separated list of positive integers.</param>
      <returns>A new dash pattern.</returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashPattern.Equals(System.Object)">
      <summary>
            Compare two DashPatterns.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashPattern.Clone">
      <summary>
            Clones a DashPattern.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashPattern.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a DashPattern.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Pens.DashPattern.GetHashCode">
      <summary>
            Returns base.GetHashCode().
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Pens.DashPattern.Solid">
      <summary>
            A solid pattern.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.DashPattern.Dashes">
      <summary>
            The pattern of dashes. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Pens.DashPattern.Phase">
      <summary>
            The phase of the pattern. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Metadata.UnsupportedMetadataValue">
      <summary>
            A value for a <see cref="T:TallComponents.PDF.Metadata.MetadataSchema" /> that has an unupported type.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Fonts.ResolveCMapEventHandler">
      <summary>
            Represents the method that handles the Font.ResolveCMap event.
            </summary>
      <param name="e">The resolve cmap event arguments.</param>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler">
      <summary>
            Pkcs #1 signature handler.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
      <summary>
            Create a new Pkcs1SignatureHandler and use the first key from the store to sign.
            </summary>
      <param name="keyStore">A key store.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
      <summary>
            Create a new Pkcs1SignatureHandler and use the given key from the store to sign.
            </summary>
      <param name="keyStore">A key store.</param>
      <param name="name">Name of the key to use for signing.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
      <summary>
            Create a new Pkcs1SignatureHandler and use the given chain to sign.
            </summary>
      <param name="chain">The chain containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Create a new Pkcs1SignatureHandler and use the given certificate to sign.
            </summary>
      <param name="certificate">The certificate containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
      <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
      <param name="bytesToVerify">For internal use only.</param>
      <param name="digest">For internal use only.</param>
      <param name="certificates">For internal use only.</param>
      <returns>For internal use only.</returns>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.Revision">
      <summary>
            Revision number of the SignatureHandler.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.MaxDigestLength">
      <summary>
            The maximum length of the digest.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.UsePropBuild">
      <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default true)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.Certificates">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.GlyphCollection">
      <summary>
            An glyph collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Contains(TallComponents.PDF.TextExtraction.Glyph)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.TextExtraction.Glyph" /> is in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection" />.
            </summary>
      <param name="glyph">The <see cref="T:TallComponents.PDF.TextExtraction.Glyph" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.TextExtraction.Glyph" /> is found in this <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.IndexOf(TallComponents.PDF.TextExtraction.Glyph)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.TextExtraction.Glyph" /> in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection" />.
            </summary>
      <param name="glyph">The <see cref="T:TallComponents.PDF.TextExtraction.Glyph" /> to locate in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.TextExtraction.Glyph" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Sort">
      <summary>
            Sort the collection so that the glyphs are ordered from left to right, top to bottom.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Sort(TallComponents.PDF.TextExtraction.IGlyphComparer)">
      <summary>
            Sort the collection based on a custom comparer.
            </summary>
      <param name="glyphComparer">The custom glyph comparer.</param>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Sort(TallComponents.PDF.TextExtraction.IGlyphComparer,System.Boolean)">
      <summary>
            Sort the collection based on a custom comparer.
            </summary>
      <param name="glyphComparer">The custom glyph comparer.</param>
      <param name="transformGlyphs">Transform each glyph with the page transformation (orientation) before sorting.</param>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.GlyphCollection.Item(System.Int32)">
      <summary>
            Retrieve an <see cref="T:TallComponents.PDF.TextExtraction.Glyph" /> by zero-based index from the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection" />. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.GlyphCollection.Count">
      <summary>
            Gets the number of <see cref="T:TallComponents.PDF.TextExtraction.Glyph" />s actually contained in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection" /></summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.GlyphCollection.Page">
      <summary>
            Gets the page that the glyphs are located on.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.ProgressEventHandler">
      <summary>
            Represents the signature for the method that will handle the Progress event of a TextMatchEnumerator.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.ListBoxField">
      <summary>
            A list box PDF form field.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListBoxField.#ctor(System.String)">
      <summary>
            Create a new List box field.
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ListBoxField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.MultiSelect">
      <summary>
            More than one of the option items may be selected simultaneously. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.CommitOnSelectionChange">
      <summary>
            Controls the moment that the selected value is committed to the field.
            If true, the field value is updated at the moment that a user changes
            the selection. If false, the value is updated when the field looses
            focus.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.Options">
      <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.ListBoxValue">
      <summary>
            The strong types Value
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.ListBoxDefaultValue">
      <summary>
            The default value for this field.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.Code128BarcodeField">
      <summary>
            A Code128 Barcode PDF form field.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.Code128BarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.PushButtonField">
      <summary>
            A push button PDF form field.  
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.PushButtonField.#ctor(System.String)">
      <summary>
            Create a new Push Button field. 
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.PushButtonField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet">
      <summary>
            The used character set in the code128 barcode.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet.A">
      <summary>
            Use Code 128 - Set A
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet.B">
      <summary>
            Use Code 128 - Set B
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet.C">
      <summary>
            Use Code 128 - Set C
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.InternalDestinationCollection">
      <summary>
            Named Destinations defined at document level. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Add(System.String,TallComponents.PDF.Navigation.InternalDestination)">
      <summary>
            Add a Destination with the given name.
            </summary>
      <param name="name">The name to use.</param>
      <param name="destination">The Destination to add.</param>
      <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Remove(System.String)">
      <summary>
            Removes the Destination object with the given name.
            </summary>
      <param name="name">The name to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Exists(System.String)">
      <summary>
            Check if the given name exists in the current collection.
            </summary>
      <param name="name">The destination name to check.</param>
      <returns>True if found, false otherwise</returns>
      <para>
            The name is case sensitive.
            </para>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Count">
      <summary>
            The number of destination names in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Names">
      <summary>
            The destination names in this document.
            </summary>
      <para>
            The names are case sensitive.
            </para>
    </member>
    <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Item(System.String)">
      <summary>
            Retrieve a Destination with a given name.
            </summary>
      <param name="name">The destination name.</param>
      <returns>An internal destination or null if the name cannot be found.</returns>
    </member>
    <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Item(System.Int32)">
      <summary>
            The Destination associated with the given index.
            </summary>
      <param name="index">The zero-base index.</param>
      <returns>A destination object.</returns>
    </member>
    <member name="T:TallComponents.PDF.LayerCollection">
      <summary>
            A collection of layer objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.Add(TallComponents.PDF.Layer)">
      <summary>
            Add a new layer to the end of this collection.
            </summary>
      <param name="layer">The layer to add.</param>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.AddRange(TallComponents.PDF.Layer[])">
      <summary>
            Add a layer array to the end of this collection.
            </summary>
      <param name="layers">The layers to add.</param>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.Insert(System.Int32,TallComponents.PDF.Layer)">
      <summary>
            Inserts a new layer to this collection.
            </summary>
      <param name="index">The zero-based index this layer get in this collection.</param>
      <param name="layer">The layer to add.</param>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.Remove(TallComponents.PDF.Layer)">
      <summary>
            Remove the specified layer.
            </summary>
      <param name="layer">The layer to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.Clear">
      <summary>
            Remove all layers in this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.RemoveAt(System.Int32)">
      <summary>
            Remove the layer on the specified index.
            </summary>
      <param name="index">The zero-based index to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.Contains(TallComponents.PDF.Layer)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layer">Layer</see> is in the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see>.
            </summary>
      <param name="layer">The <see cref="T:TallComponents.PDF.Layer" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layer" /> is found in this <see cref="T:TallComponents.PDF.LayerCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.IndexOf(TallComponents.PDF.Layer)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layer">Layer</see> in the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see>.
            </summary>
      <param name="layer">The <see cref="T:TallComponents.PDF.Layer" /> to locate in the <see cref="T:TallComponents.PDF.LayerCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layer" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.Clone">
      <summary>
            Clones this LayerCollection, and detach it from the original document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.System#ICloneable#Clone">
      <summary>
            Clones this LayerCollection, and detach it from the original document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.LayerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.LayerCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:TallComponents.PDF.Layer">Layer</see> by zero-based index from the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.LayerCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layer">Layer</see>s actually contained in the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see></summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.PushButtonLayout">
      <summary>
            Different layout modes for a push button widget.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelOnly">
      <summary>
            Display the label only.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.IconOnly">
      <summary>
            Display the icon only.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelBelowIcon">
      <summary>
            Display both label and icon, with the label on the bottom, the icon on the top. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelAboveIcon">
      <summary>
            Display both label and icon, with the label on the top, the icon on the bottom.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelRightIcon">
      <summary>
            Display both label and icon, with the label to the right of the icon. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelLeftIcon">
      <summary>
            Display both label and icon, with the label to the left of the icon.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelOverIcon">
      <summary>
            Display both label and icon, with the label overlaid directly on the icon.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.Popup">
      <summary>
            A Pop-up annotation, this annotation belongs to a Markup annotation. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Popup.#ctor">
      <summary>
            Create a new pop-up annotation.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Popup.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new pop-up annotation.
            </summary>
      <param name="left">The left position for this pop-up.</param>
      <param name="bottom">The bottom position for this pop-up.</param>
      <param name="width">The width for this pop-up.</param>
      <param name="height">The height for this pop-up.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Popup.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
      <returns>The object as returned by the visitor. Meaning is visitor specific.</returns>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Popup.Markup">
      <summary>
            The markup annotation that is associated with this pop-up.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Popup.Open">
      <summary>
            The pop-up should initially be displayed open.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.Line">
      <summary>
            A Line is a specialized markup and appear as Line, with 2 line endings.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Line.#ctor">
      <summary>
            Create a new line markup.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new line markup.
            </summary>
      <param name="startX">the x coordinate of the line start</param>
      <param name="startY">the y coordinate of the line start</param>
      <param name="endX">the x coordinate of the line end</param>
      <param name="endY">the y coordinate of the line end</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Line.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Line.InteriorColor">
      <summary>
            The interior color for line endings.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Line.StartStyle">
      <summary>
            The line end style at the start of the line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Line.EndStyle">
      <summary>
            The line end style at the end of the line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Line.LeaderLine">
      <summary>
            The length of leader lines.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Line.LeaderLineExtension">
      <summary>
            The length of the leader line extension.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Line.HasCaption">
      <summary>
            If true, the text property is replicated as a caption on the line.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.SubmitFormat">
      <summary>
            The submit format specifies what to submit to the server.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.SubmitFormat.Pdf">
      <summary>
            Complete PDF document.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.SubmitFormat.Html">
      <summary>
            HTML form format.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.SubmitFormat.Xfdf">
      <summary>
            XML Forms Data Format.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.SubmitFormat.Fdf">
      <summary>
            Forms Data Format (saved as .fdf file).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.SubmitFormat.Xdp">
      <summary>
            XML Data Package.
            <para>
            Note: This value is supported in XFA documents only.
            </para></summary>
    </member>
    <member name="F:TallComponents.PDF.Actions.SubmitFormat.Xml">
      <summary>
            eXtensible Markup Language.
            <para>
            Note: This value is supported in XFA documents only.
            </para></summary>
    </member>
    <member name="M:TallComponents.PDF.IReadOnlyStream.ReadByte(System.Byte@)">
      <summary>
            Read the next byte from the stream.
            </summary>
      <param name="result">The resulting byte.</param>
      <returns>A Boolean that indicates succes.</returns>
    </member>
    <member name="T:TallComponents.PDF.Pens.LineJoinStyle">
      <summary>
            Different styles for line joints.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Pens.LineJoinStyle.Miter">
      <summary>
            The outer edges of the joining segments are extended until they meet.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Pens.LineJoinStyle.Round">
      <summary>
            A circle is drawn around the point where the centers of the segments meet.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Pens.LineJoinStyle.Bevel">
      <summary>
            The two segments are finished with butt caps.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.ViewerPreferences">
      <summary>
            Settings used to control the way the document is displayed in a PDF viewer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.ViewerPreferences.#ctor">
      <summary>
            Creates a new ViewerPreferences object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.ViewerPreferences.Clone">
      <summary>
            Clones a ViewerPreferences.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.ViewerPreferences.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a ViewerPreferences.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.HideToolbar">
      <summary>
            Hide toolbar.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.HideMenubar">
      <summary>
            Hide menubar.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.HideWindowUI">
      <summary>
            Hides everything except the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.FitWindow">
      <summary>
            Fits the first page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.CenterWindow">
      <summary>
            Centers document window.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.DisplayDocTitle">
      <summary>
            Displays the document title in the caption bar.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PageMode">
      <summary>
            Display none, outlines or thumbnails.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PageLayout">
      <summary>
            How to display pages.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ZoomFactor">
      <summary>
            The default zoom factor for this document (1 corresponds to 100%).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ViewArea">
      <summary>
            The page boundary representing the area of the page to be displayed when viewing the document on the screen.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ViewClip">
      <summary>
            The page boundary to which the contents of the page are to be clipped when viewing the document on the screen.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintArea">
      <summary>
            The page boundary representing the area of the page to be rendered when printing the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintClip">
      <summary>
            The page boundary to which the contents of the page are to be clipped when printing the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.Duplex">
      <summary>
            The paper handling option that shall be used when printing the file from the print dialog.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintScaling">
      <summary>
            The page scaling option that shall be selected when a print dialog is displayed for this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PickTrayByPdfSize">
      <summary>
            A flag specifying whether the PDF page size shall be used to select the input paper tray.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.NumCopies">
      <summary>
            The number of copies that shall be printed when the print dialog is opened for this file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintPageRange">
      <summary>
            The page numbers used to initialize the print dialog box when the file is printed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ReadDirection">
      <summary>
            The predominant reading order for the text in the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.InitialPageIndex">
      <summary>
            The initial page that will be displayed in the PDF viewer. (zero-based, default = 0)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Fonts.EmbedMode">
      <summary>
            The different ways that a font can be stored inside a PDF.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.EmbedMode.Auto">
      <summary>
            The embed mode will be determined based on how the font is used. If the font is used to render static
            text only, then the subset will be embedded. If the font is associated with an editable field, then
            the full font will be embedded. This is the default embed mode of a newly created 
            TrueType font.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.EmbedMode.Unknown">
      <summary>
            The font embed mode could not be determined.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.EmbedMode.ReferenceOnly">
      <summary>
            The font is not embedded. Only a reference is stored inside the PDF.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.EmbedMode.Subset">
      <summary>
            A subset of the font is embdedded inside the PDF.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Fonts.EmbedMode.Full">
      <summary>
            The font is fully embedded inside the PDF.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.Compression">
      <summary>
            Compression types for Image and ImageShape.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Compression.Zip">
      <summary>
            Lossless compression.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Compression.Jpeg">
      <summary>
            Lossy compression.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Shapes.Compression.Auto">
      <summary>
            Use source image compression or Zip if uncompressed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.SeperationColor">
      <summary>
            Seperation color (also known as spot color).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.SpecialColor">
      <summary>
            Base class for all derived special color classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.SeperationColor.#ctor(System.String)">
      <summary>
            Create a new seperation color.
            </summary>
      <param name="name">The name from the seperation color.</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.SeperationColor.#ctor(System.String,TallComponents.PDF.Colors.TintTransform)">
      <summary>
            Create a new seperation color.
            </summary>
      <param name="name">The name from the seperation color.</param>
      <param name="tintTransform">The tint transformation; used if the output device doesn't support the seperation color name.</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.SeperationColor.#ctor(System.String,TallComponents.PDF.Colors.TintTransform,System.Double)">
      <summary>
            Create a new seperation color.
            </summary>
      <param name="name">The name from the seperation color.</param>
      <param name="tintTransform">The tint transformation; used if the output device doesn't support the seperation color name.</param>
      <param name="tint">The tint component [0-1].</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.SeperationColor.Convert">
      <summary>
            Convert this color to a .Net system color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Colors.SeperationColor.TintTransform">
      <summary>
            The tint transformation; used if the output device doesn't support the seperation color name.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.SeperationColor.Tint">
      <summary>
            The Tint component [0-1].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.SeperationColor.Name">
      <summary>
            The name of the seperation color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.SeperationColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.WindowBehavior">
      <summary>
             Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.WindowBehavior.NewWindow">
      <summary>
            Open in a new window.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.WindowBehavior.CurrentWindow">
      <summary>
            Open in the current window.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Navigation.WindowBehavior.UserPreference">
      <summary>
            Use the current user preference.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Navigation.PageIndexDestination">
      <summary>
            Describes a location inside this PDF document. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.PageIndexDestination.#ctor">
      <summary>
            Create a new (Internal) Page Index  Destination.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Navigation.PageIndexDestination.#ctor(System.Int32)">
      <summary>
            Create a new (Internal) Page Index Destination.
            </summary>
      <param name="pageIndex">The zero-based page index.</param>
    </member>
    <member name="P:TallComponents.PDF.Navigation.PageIndexDestination.PageIndex">
      <summary>
            The pageIndex this destination points to.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.CheckBoxField">
      <summary>
            A check box PDF form field. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.CheckBoxField.#ctor(System.String)">
      <summary>
            Create a new Check box field.
            </summary>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.CheckBoxField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.OnValue">
      <summary>
            The value for the field when it's in On state
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.OffValue">
      <summary>
            The value for the field when it's in Off state
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.NeutralValue">
      <summary>
            The value for the field when it's in Neutral state (meaningful when HasNeutralState = true only)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.HasNeutralState">
      <summary>
            Whether the checkbox has a neutral state
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.CheckBoxValue">
      <summary>
            The strong typed value for this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.CheckBoxDefaultValue">
      <summary>
            The default value for this field
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.ValueFieldSequence">
      <summary>
            A Sequence (ordered collection) of value fields.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Contains(TallComponents.PDF.Forms.Fields.ValueField)">
      <summary>
            Check if the value field exists in this sequence.
            </summary>
      <returns>True is the sequence contains the value field, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.IndexOf(TallComponents.PDF.Forms.Fields.ValueField)">
      <summary>
            Returns the index of the given value field in this sequence.
            </summary>
      <param name="valueField">The value field.</param>
      <returns>The index in the sequence or -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Move(System.Int32,System.Int32)">
      <summary>
            Moves an existing value field to an other position.
            </summary>
      <param name="fromIndex">The zero-based index from the value field to move.</param>
      <param name="toIndex">The zero-based index for the new position.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Item(System.Int32)">
      <summary>
            Retrieve a value field by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Count">
      <summary>
            Number of value fields in this sequence.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.UsageRights">
      <summary>
            The Usage Rights for this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.UsageRights.Message">
      <summary>
            The Reason for adding usage rights to the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.UsageRights.Document">
      <summary>
            Document-wide usage rights.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.UsageRights.Annotations">
      <summary>
            Annotation related usage rights.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.UsageRights.FormFields">
      <summary>
            Form-Fields related usage rights.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.SignatureAppearance">
      <summary>
            The signature appearance can be used if the document is signed, 
            it is the appearance for a signed signature widget. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.#ctor">
      <summary>
            Create a new signature appearance.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.Style">
      <summary>
            The style used in the SignatureAppearance.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.BitmapSource">
      <summary>
            The image used if style is ImageOnly or ImageAndText.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.TopazSignature">
      <summary>
            The image (as vector graphics) used if style is ImageOnly or ImageAndText.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.KeepAspectRatio">
      <summary>
            specify if the image must respect its aspect ratio.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.DisplaySettings">
      <summary>
            Specifies what to display in the Text region.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget">
      <summary>
            A check box widget is a specialized widget.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.#ctor">
      <summary>
            Create a new PDF form field Check box Widget.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
      <param name="left">The left position for this widget.</param>
      <param name="bottom">The bottom position for this widget.</param>
      <param name="width">The width for this widget.</param>
      <param name="height">The height for this widget.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.CheckMarkAppearance">
      <summary>
            The check mark appearance for this check box widget.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.Note">
      <summary>
            A note is a specialized markup and is also known as comments or 'sticky note'.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Note.#ctor">
      <summary>
            Create a new note.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Note.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new note.
            </summary>
      <param name="left">The left position for this note.</param>
      <param name="bottom">The bottom position for this note.</param>
      <param name="width">The width for this note.</param>
      <param name="height">The height for this note.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Note.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Note.IconName">
      <summary>
            The name of the icon that is used to display this note.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Note.StateModel">
      <summary>
            The state model of this markup.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Note.Marked">
      <summary>
            The Marked state of this note. This state is only valid if the StateModel equals Marked.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Note.ReviewState">
      <summary>
            The Review state of this note. This state is only valid if the StateModel equals Review.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Note.MigrationState">
      <summary>
            The Migration state of this note. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Note.BorderColor">
      <summary>
            The color of the background of this annotation.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Actions.JavaScriptAction">
      <summary>
            A JavaScript action executes javascript.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.JavaScriptAction.#ctor">
      <summary>
            Create a new JavaScript action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Actions.JavaScriptAction.#ctor(TallComponents.PDF.JavaScript.JavaScript)">
      <summary>
            Create a new JavaScript action.
            </summary>
      <param name="javaScript">The JavaScript to embed.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.JavaScriptAction.#ctor(System.String)">
      <summary>
            Create a new JavaScript action.
            </summary>
      <param name="javaScriptCode">The JavaScript code to embed.</param>
    </member>
    <member name="M:TallComponents.PDF.Actions.JavaScriptAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned JavaScript action.</returns>
    </member>
    <member name="M:TallComponents.PDF.Actions.JavaScriptAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
      <summary>
            Accept this action.
            </summary>
      <param name="visitor">The vistor used to Accept this action.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Actions.JavaScriptAction.JavaScript">
      <summary>
            The java script code in this java script action.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DocumentInfo">
      <summary>
            Document Info for the document like Author, Title and Subject.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.Author">
      <summary>
            The person who authored this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.Title">
      <summary>
            Title of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.Subject">
      <summary>
            Subject of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.Keywords">
      <summary>
            Keywords of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.Creator">
      <summary>
            The application that created this document before it was converted to PDF (this is your application).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.Producer">
      <summary>
            The component or application that created this document (this component after it is written).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.CreationDate">
      <summary>
            The date this PDF was originally created.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DocumentInfo.LastModifiedDate">
      <summary>
            The date this PDF was last modified.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Transforms.SkewTransform">
      <summary>
            A 2D geometric transform that applies a horizontal or vertical skew.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.SkewTransform.#ctor">
      <summary>
            Create a new SkewTransform.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Transforms.SkewTransform.#ctor(System.Double,System.Double)">
      <summary>
            Create a new SkewTransform.
            </summary>
      <param name="anglex">Skew angle along the x-axis.</param>
      <param name="angley">Skew angle along the y-axis.</param>
    </member>
    <member name="P:TallComponents.PDF.Transforms.SkewTransform.AngleX">
      <summary>
            Skew angle in degrees along the x-axis.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Transforms.SkewTransform.AngleY">
      <summary>
            Skew angle in degrees along the y-axis.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Security.PasswordSecurity">
      <summary>
            This class encapsulates all security settings of a PDF document.
            You secure a document by assigning a new instance of this class to the 
            Security property of the Document class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Security.PasswordSecurity.#ctor">
      <summary>
            Creates a new password security object.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.PasswordSecurity.UserPassword">
      <summary>
            User password. You may set this string to "" to allow viewing by anyone but to 
            restrict privileges such as printing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.PasswordSecurity.OwnerPassword">
      <summary>
            Owner password. The owner has all privilages, including changing the user password.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Security.PasswordSecurity.EncryptionLevel">
      <summary>
            This encryption level used to encrypt this document.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.LineBreakEventArgs">
      <summary>
            Class containing data for LineBreak events.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.Word">
      <summary>
            Get the word that has to be broken into part.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.BreakAt">
      <summary>
            The 0-based position at which the word will be broken into parts.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.BreakBefore">
      <summary>
            The position before which the word has to be broken.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.InsertHyphen">
      <summary>
            Get or set if a hyphen has to be inserted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.HyphenChar">
      <summary>
            Get or set the character to insert on the breaking position.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.DitherMatrixFS">
      <summary>
            Backwards compatible Dither Matrix.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.BinaryDithering">
      <summary>
            Empty Dither Matrix resulting in binary dithering.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.#ctor">
      <summary>
            Create a new ConvertToTiffOptions with default settings.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.#ctor(System.Double,TallComponents.PDF.Rasterizer.TiffCompression)">
      <summary>
            Create a new ConvertToTiffOptions with given compression.
            </summary>
      <param name="resolution">The resolution the image will be saved in (in DPI).</param>
      <param name="compression">Compression algorithm to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.#ctor(System.Double,TallComponents.PDF.Rasterizer.TiffCompression,System.Boolean)">
      <summary>
            Create a new ConvertToTiffOptions with given compression.
            </summary>
      <param name="resolution">
      </param>
      <param name="compression">Compression algorithm to use.</param>
      <param name="invertImage">Invert the image if requested.</param>
    </member>
    <member name="P:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.Compression">
      <summary>
            Compression algorithm to use. Default is CcittG3.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.InvertImage">
      <summary>
            Invert the TIFF image if set to true. Some TIFF viewers don't respect all tags and
            display the image inverted. This setting should fix that.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.DitherMatrix">
      <summary>
            This is the matrix that is used in the dithering process.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.PixelFormat">
      <summary>
            The pixel format that will be used for the image.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Rasterizer.ConvertToTiffOptions.Resolution">
      <summary>
            Resolution in DPI. Default is 150.0.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.TextExtraction.TextMatchEnumerator">
      <summary>
            Enumerates all text matches as returned by Document.Find or Page.Find.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the text matches.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.Reset">
      <summary>
            Resets the enumerator before the first item. After calling MoveNext, Current points
            to the first text match.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.MoveNext">
      <summary>
            Move to the next text match. After calling this method, Current only points to a valid
            object if this method returns true.
            </summary>
      <returns>True if and only if next text match is found.</returns>
    </member>
    <member name="E:TallComponents.PDF.TextExtraction.TextMatchEnumerator.Progress">
      <summary>
            Fired before the content for a next page is searched.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.TextExtraction.TextMatchEnumerator.Current">
      <summary>
            Gets the text match currently indexed by this instance.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection">
      <summary>
            Collection of form options. Associated with a RadioButtonField.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.Contains(TallComponents.PDF.Forms.Fields.RadioButtonOption)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption">RadioButtonOption</see> is in the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection">RadioButtonOptionCollection</see>.
            </summary>
      <param name="radioButtonOption">The <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption" /> is found in this <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.IndexOf(TallComponents.PDF.Forms.Fields.RadioButtonOption)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption">RadioButtonOption</see> in the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection">RadioButtonOptionCollection</see>.
            </summary>
      <param name="radioButtonOption">The <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption" /> to locate in the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.Item(System.Int32)">
      <summary>
            Retrieve a radio button option by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.Count">
      <summary>
            Number of options.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.UnknownMarkup">
      <summary>
            Unknown markup.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.UnknownMarkup.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.UnknownMarkup.Name">
      <summary>
            The name for this unknown markup.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.MetafileShape">
      <summary>
            A shape containing a metafile (emf or wmf) vector based image.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.MetafileShape.#ctor">
      <summary>
            Creates a new MetafileShape (emf or wmf).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.MetafileShape.#ctor(System.String)">
      <summary>
            Create a new MetafileShape (emf or wmf)  from a relative, absolute or virtual path.
            </summary>
      <param name="path">Relative, absolute or virtual path.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.MetafileShape.#ctor(System.IO.Stream)">
      <summary>
            Create a new MetafileShape (emf or wmf) from a stream of binary data.
            </summary>
      <param name="stream">The stream containing the binary metafile (image) data.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.MetafileShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Shapes.MetafileShape.GetWebCredentials">
      <summary>
            Occurs when a metafile is loaded from a weblocation to retrieve the credentials.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MetafileShape.Path">
      <summary>
            Relative or absolute path of metafile image file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MetafileShape.Width">
      <summary>
            The width of the metafile image. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MetafileShape.Height">
      <summary>
            The height of the metafile image. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.MetafileShape.KeepAspectRatio">
      <summary>
            If KeepAspectRatio is set to true, the height is calculated from the 
            width so that the width/height ratio is equal to the ratio of the original metafile image. 
            If set to false, the specified width and height are used and the metafile image will in general appear distorted.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandLineSegment">
      <summary>
            A straight line. It has an end point.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandLineSegment.#ctor">
      <summary>
            Create a new FreeHandLineSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandLineSegment.#ctor(System.Double,System.Double)">
      <summary>
            Creates a new FreeHandLineSegment with given end point.
            </summary>
      <param name="x1">Horizontal position of end point.</param>
      <param name="y1">Vertical position of end point.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandLineSegment.X1">
      <summary>
            Horizontal position of end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandLineSegment.Y1">
      <summary>
            Vertical position of end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandPathCollection">
      <summary>
            Collection of Free Hand Path objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.#ctor">
      <summary>
            Create a new empty collection of free hand path objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Add(TallComponents.PDF.Shapes.FreeHandPath)">
      <summary>
            Add an existing free hand path object to this collection.
            </summary>
      <param name="freeHandPath">Add this path.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Remove(TallComponents.PDF.Shapes.FreeHandPath)">
      <summary>
            Remove a free hand path from this collection.
            </summary>
      <param name="freeHandPath">Remove this free hand path.</param>
      <returns>true if removing the path succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.AddRange(TallComponents.PDF.Shapes.FreeHandPathCollection)">
      <summary>
            Adds the free hand paths from an existing collection to the end of this collection.
            </summary>
      <param name="freeHandPaths">The FreeHandPathCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.AddRange(TallComponents.PDF.Shapes.FreeHandPath[])">
      <summary>
            Adds the elements of a FreeHandPath array to the end of this collection.
            </summary>
      <param name="freeHandPaths">The array of freee hand paths whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Insert(System.Int32,TallComponents.PDF.Shapes.FreeHandPath)">
      <summary>
            Insert an existing free hand path at the specified index.
            </summary>
      <param name="index">The zero-based index of the path shape after insertion.</param>
      <param name="freeHandPath">Insert this path.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a free hand path at the specified index.
            </summary>
      <param name="index">The index of the free hand path to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Clear">
      <summary>
            Remove all free hand paths from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Contains(TallComponents.PDF.Shapes.FreeHandPath)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.FreeHandPath" /> is in the <see cref="T:TallComponents.PDF.Shapes.FreeHandPathCollection" />.
            </summary>
      <param name="freeHandPath">The <see cref="T:TallComponents.PDF.Shapes.FreeHandPath" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Shapes.FreeHandPath" /> is found in this <see cref="T:TallComponents.PDF.Shapes.FreeHandPathCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.IndexOf(TallComponents.PDF.Shapes.FreeHandPath)">
      <summary>
            Returns the index of the specified free hand path.
            </summary>
      <param name="freeHandPath">The free hand path to locate in this collection.</param>
      <returns>The zero-based index of the free hand path found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a free hand path collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Clone">
      <summary>
            Clones a free hand path collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandPathCollection.Count">
      <summary>
            Number of path shapes in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandPathCollection.Item(System.Int32)">
      <summary>
            Get a free hand path by index (0-based).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Security.EncryptionLevel">
      <summary>
            This enum specifies the available encryption levels.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Security.EncryptionLevel.RC4_40bit">
      <summary>
            Encrypt this document with RC4 40-bit. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Security.EncryptionLevel.RC4_128bit">
      <summary>
            Encrypt this document with RC4 128-bit.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Security.EncryptionLevel.AES_128bit">
      <summary>
            Encrypt this document with AES v2 128-bit. (default)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Security.EncryptionLevel.AES_256bit">
      <summary>
            Encrypt this document with AES v3 256-bit.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Printing.PrintScaling">
      <summary>
            The print scaling option when a print dialog is displayed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Printing.PrintScaling.None">
      <summary>
            No scaling.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Printing.PrintScaling.AppDefault">
      <summary>
            Use the current print scaling of the application.
            </summary>
    </member>
    <member name="M:TallComponents.Images.JBig2.Jbig2ImageData.#ctor(System.IO.Stream,System.String,System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of the  class.
            </summary>
      <param name="jbigStream">The jbig stream.</param>
      <param name="path">The path.</param>
      <param name="index">The index.</param>
      <param name="streamOwner">if set to <c>true</c> the instance is a stream owner.</param>
    </member>
    <member name="M:TallComponents.Images.JBig2.Jbig2ImageData.SaveAdditionalData(System.IO.Stream)">
      <summary>
            Saves the additional data.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="T:TallComponents.PDF.NoPagesException">
      <summary>
            The exception that is thrown when a document without any page is written.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.NoPagesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.InvalidPdfException">
      <summary>
            The exception that is thrown when the PDF document is invalid.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.InvalidPdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.InvalidImageException">
      <summary>
            The exception that is thrown when an invalid or corrupt image is encountered.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.InvalidImageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler">
      <summary>
            Pkcs7Detached signature handler.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
      <summary>
            Create a new Pkcs7DetachedSignatureHandler to sign a signature using the first key in the store.
            </summary>
      <param name="keyStore">A key store.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
      <summary>
            Create a new Pkcs7DetachedSignatureHandler to sign a signature using the specified key in the store.
            </summary>
      <param name="keyStore">A key store.</param>
      <param name="name">Name of the key to use for signing.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
      <summary>
            Create a new Pkcs7DetachedSignatureHandler and use the given chain to sign.
            </summary>
      <param name="chain">The chain containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Create a new Pkcs7DetachedSignatureHandler and use the given certificate to sign.
            </summary>
      <param name="certificate">The certificate containing the private key.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
      <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
      <param name="bytesToVerify">For internal use only.</param>
      <param name="digest">For internal use only.</param>
      <param name="certificates">For internal use only.</param>
      <returns>For internal use only.</returns>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.Revision">
      <summary>
            Revision number of the SignatureHandler.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.UsePropBuild">
      <summary>
            You can specify if you want to use the PropertyBuild structure or not. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.MaxDigestLength">
      <summary>
            The maximum length of the digest.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Diagnostics.Summary">
      <summary>
            Provides a summary of a process.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Diagnostics.Summary.#ctor">
      <summary>
            Create a new summary instance.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Diagnostics.Summary.Messages">
      <summary>
            A list of messages, in the order that they were generated.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Diagnostics.MessageCollection">
      <summary>
            A message collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.Contains(TallComponents.PDF.Diagnostics.Message)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Diagnostics.Message">Message</see> is in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection">MessageCollection</see>.
            </summary>
      <param name="message">The <see cref="T:TallComponents.PDF.Diagnostics.Message" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Diagnostics.Message" /> is found in this <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.IndexOf(TallComponents.PDF.Diagnostics.Message)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Diagnostics.Message">Message</see> in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection">MessageCollection</see>.
            </summary>
      <param name="message">The <see cref="T:TallComponents.PDF.Diagnostics.Message" /> to locate in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Diagnostics.Message" /> is found, -1 if not found.</returns>
    </member>
    <member name="P:TallComponents.PDF.Diagnostics.MessageCollection.Item(System.Int32)">
      <summary>
            Retrieve a message by 0-based index. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Diagnostics.MessageCollection.Count">
      <summary>
            The number of messages.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Colors.IccBasedColor">
      <summary>
            An icc-based color.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Colors.IccBasedColor.#ctor(TallComponents.PDF.Colors.IccColorSpace,System.Double[])">
      <summary>
            Create a new icc based color using specified colorspace and color components in range [0-255]. 
            </summary>
      <param name="colorSpace">The Icc color space of the color.</param>
      <param name="components">An array of component values. The length of the array should match the number of
            components of the color space.</param>
    </member>
    <member name="M:TallComponents.PDF.Colors.IccBasedColor.Convert">
      <summary>
            Convert this color to a .Net system color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Colors.IccBasedColor.Name">
      <summary>
            The name of the color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.IccBasedColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Colors.IccBasedColor.IccColorSpace">
      <summary>
            Gets the icc color space  instance for this color.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Brushes.WrapMode">
      <summary>
            Specifies how the gradient behaves outside its start and end point. The SVG term for this is 'spread method'.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Brushes.WrapMode.Stop">
      <summary>
            The gradient does not extend outside the start and end points.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Brushes.WrapMode.Clamp">
      <summary>
            The gradient continues at the same color of the start or end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.RequiredMode">
      <summary>
            The required mode for a field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.RequiredMode.Optional">
      <summary>
            This field is optional.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.RequiredMode.Recommended">
      <summary>
            This field is recommended. Note: This setting cannot be used in classic PDF documents.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.RequiredMode.Required">
      <summary>
            This field is required.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.ImageField">
      <summary>
            An image PDF form field. You cannot create an instance of this class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Fields.ImageField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
      <summary>
            Accept this field.
            </summary>
      <param name="visitor">The vistor used to Accept this field.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ImageField.EmbedImageData">
      <summary>
            Specifies if the image data is embedded or if a URI is stored.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ImageField.Sizing">
      <summary>
            The mapping between the image size and the field size.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ImageField.ImageValue">
      <summary>
            The strongtyped value for this field (the setter can be used if EmbedImageData = true only)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ImageField.ImageDefaultValue">
      <summary>
            The default value asociated with this field. (the setter can be used if EmbedImageData = true only)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Forms.Fields.ImageField.DefaultPathValue">
      <summary>
            The default value asociated with this field. (valid if EmbedImageData = false only)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Data.XfdfFormData">
      <summary>
            Specialization of FormData that represents Xfdf data.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.#ctor(System.IO.Stream)">
      <summary>
            Create a XfdfFormData object, based on existing data.
            </summary>
      <param name="stream">The stream to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.Write(System.IO.BinaryWriter)">
      <summary>
            Write this XFDF FormData.
            </summary>
      <param name="binaryWriter">The binary writer to write to.</param>
    </member>
    <member name="P:TallComponents.PDF.Forms.Data.XfdfFormData.Path">
      <summary>
            The path from the PDF document file that this XFDF file was exported 
            from or is intended to be imported into.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Document">
      <summary>
            The Document class is the top-level class in the TallComponents.PDF namespace.
            It represents an existing or new PDF document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Document.#ctor">
      <summary>
            Creates a new document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Document.#ctor(System.IO.BinaryReader)">
      <summary>
            Opens an existing document.
            </summary>
      <param name="reader">The reader from which the document is read.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.#ctor(System.IO.BinaryReader,System.String)">
      <summary>
            Opens an existing password-protected document.
            </summary>
      <param name="reader">The reader from which the document is read.</param>
      <param name="password">The password that is required to open this document.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.#ctor(System.IO.Stream)">
      <summary>
            Opens an existing document.
            </summary>
      <param name="stream">The stream from which the document is read.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.#ctor(System.IO.Stream,System.String)">
      <summary>
            Opens an existing password-protected document.
            </summary>
      <param name="stream">The stream from which the document is read.</param>
      <param name="password">Password that is required to open this document.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Import(TallComponents.PDF.Forms.Data.FormData)">
      <summary>
            Import data from a FormData object.
            </summary>
      <param name="formData">The form data to import.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Import(TallComponents.PDF.Forms.Data.FormData,System.Boolean)">
      <summary>
            Import data from a FormData object.
            </summary>
      <param name="formData">The form data to import.</param>
      <param name="clearMissingFields">
      </param>
    </member>
    <member name="M:TallComponents.PDF.Document.Export(TallComponents.PDF.Actions.SubmitFormat,System.Boolean)">
      <summary>
            Export data into a FormData object.
            </summary>
      <param name="format">The form data format to export.</param>
      <param name="exportEmpty">Specifies if empty fields must be exported as well.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.PasswordRequired(System.IO.BinaryReader)">
      <summary>
            This method checks if a password is required to open this document.
            </summary>
      <param name="reader">Read the document from this reader.</param>
      <returns>True if a password is required, otherwise false.</returns>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,TallComponents.PDF.WriteOptions)">
      <summary>
            Write this document to a stream given provided write options.
            </summary>
      <param name="stream">Write to this stream. Note that the caller is responsible for closing this stream.</param>
      <param name="options">
      </param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.Web.HttpResponse)">
      <summary>
            Write the modified document to a HTTP response.
            </summary>
      <param name="response">Write the document to this writer.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.Web.HttpResponse,TallComponents.PDF.DocumentWriteMode)">
      <summary>
            Write the modified document to a HTTP response.
            </summary>
      <param name="response">Write the document to this writer.</param>
      <param name="writeMode">The write mode to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream)">
      <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
      <param name="stream">Write the document to this stream.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,TallComponents.PDF.DocumentWriteMode)">
      <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
      <param name="stream">Write the document to this stream.</param>
      <param name="writeMode">The write mode to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,System.Boolean)">
      <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
      <param name="stream">Write the document to this stream.</param>
      <param name="keepOpen">Keep the document open after writing.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,TallComponents.PDF.DocumentWriteMode,System.Boolean)">
      <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
      <param name="stream">Write the document to this stream.</param>
      <param name="writeMode">The write mode to use.</param>
      <param name="keepOpen">Keep the document open after writing.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter)">
      <summary>
            Write the modified document to any writer.
            </summary>
      <param name="binaryWriter">Write the document to this writer.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter,TallComponents.PDF.DocumentWriteMode)">
      <summary>
            Write the modified document to any writer.
            </summary>
      <param name="binaryWriter">Write the document to this writer.</param>
      <param name="writeMode">The write mode to use.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter,System.Boolean)">
      <summary>
            Write the modified document to any writer.
            </summary>
      <param name="binaryWriter">Write the document to this writer.</param>
      <param name="keepOpen">Keep the document open after writing.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter,TallComponents.PDF.DocumentWriteMode,System.Boolean)">
      <summary>
            Write the modified document to any writer.
            </summary>
      <param name="binaryWriter">Write the document to this writer.</param>
      <param name="writeMode">The write mode to use.</param>
      <param name="keepOpen">Keep the document open after writing.</param>
    </member>
    <member name="M:TallComponents.PDF.Document.Find(TallComponents.PDF.TextExtraction.TextFindCriteria)">
      <summary>
            Find text in this document.
            </summary>
      <param name="findCriteria">Specifies find criteria.</param>
      <returns>An enumerator that lets you enumerate over all TextMatch elements</returns>
    </member>
    <member name="M:TallComponents.PDF.Document.Find(TallComponents.PDF.TextExtraction.TextFindCriteria,TallComponents.PDF.TextExtraction.IGlyphComparer,System.Boolean)">
      <summary>
            Find text in this document.
            </summary>
      <param name="findCriteria">Specifies find criteria.</param>
      <param name="glyphComparer">The custom glyph comparer.</param>
      <param name="transformGlyphs">If true, each glyph is transformed with the page transformation (orientation) before de glyph comparer is applied.</param>
      <returns>An enumerator that lets you enumerate over all TextMatch elements</returns>
    </member>
    <member name="M:TallComponents.PDF.Document.ClearUsageRights">
      <summary>
            Clear the usage rights this document contains, if any.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Document.Calculate">
      <summary>
            Trigger to execute the calculate actions in the value fields.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.DocumentType">
      <summary>
            Type of document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.XfaInfo">
      <summary>
            Additional XFA specific information for this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Pages">
      <summary>
            Collection of pages in this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Security">
      <summary>
            The security settings of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.UsageRights">
      <summary>
            The usage rights this document contains.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Fonts">
      <summary>
            The fonts used in this document. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.EmbeddedFiles">
      <summary>
            The embedded files in this document. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Layers">
      <summary>
            The layers that are defined in this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Bookmarks">
      <summary>
            The Bookmarks of this document
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Version">
      <summary>
            The PDF version for this document;
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.DocumentInfo">
      <summary>
            Document Info for the document like Author, Title and Subject.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.ViewerPreferences">
      <summary>
            Viewer preferences of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Fields">
      <summary>
            All form fields inside this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.CalculationOrder">
      <summary>
            The order of the fields that need to be recalculated.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.MetadataSchemas">
      <summary>
            The XMP metadata for this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.NamedDestinations">
      <summary>
            Named Destinations defined at Document level.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.JavaScripts">
      <summary>
            Document level JavaScripts.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.Updates">
      <summary>
            The updates for this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.OpenActions">
      <summary>
            Open actions are executed while a document is openening.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.BeforeSaveAction">
      <summary>
            Before save action is executed before a document will be saved.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.AfterSaveAction">
      <summary>
            After save action is executed after a document is saved.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.BeforePrintAction">
      <summary>
            Before print action is executed before a document will be printed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.AfterPrintAction">
      <summary>
            After print action is executed after a document is printed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.BeforeCloseAction">
      <summary>
            Before close action is executed before a document will be closed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Document.ScriptBehavior">
      <summary>
            The script behavior for all fields in this document. (default = Format)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.PageCollection">
      <summary>
            Collection of pages inside a PDF document. 
            Non-creatable. Obtained through the Pages property of Document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.Add(TallComponents.PDF.Page)">
      <summary>
            Add a new or existing page to end of this collection. 
            </summary>
      <param name="page">The source page.</param>
      <returns>
            The <see cref="T:TallComponents.PDF.PageCollection" /> index at which the <see cref="T:TallComponents.PDF.Page" /> has been added.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.Remove(TallComponents.PDF.Page)">
      <summary>
            Removes a page from the collection.
            </summary>
      <param name="page">The page to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.AddRange(TallComponents.PDF.Page[])">
      <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Page">Pages</see> to the end of the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
      <param name="pages">The <see cref="T:TallComponents.PDF.Page">pages</see> to be added to the end of the <see cref="T:TallComponents.PDF.PageCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.Insert(System.Int32,TallComponents.PDF.Page)">
      <summary>
            Insert a new or existing page in this collection at the given index. 
            </summary>
      <param name="index">The zero-based index the page will get.</param>
      <param name="page">The source page.</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.InsertRange(System.Int32,TallComponents.PDF.Page[])">
      <summary>
            Insert the entries in an array of <see cref="T:TallComponents.PDF.Page">Pages</see> to the specific locations in the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
      <param name="index">The zero based start index for the inserted pages.</param>
      <param name="pages">The <see cref="T:TallComponents.PDF.Page">pages</see> to be interted in the <see cref="T:TallComponents.PDF.PageCollection" />.</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.RemoveAt(System.Int32)">
      <summary>
            Removes a page from the collection.
            </summary>
      <param name="index">The zero-based index for the page to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.RemoveRange(TallComponents.PDF.Page[])">
      <summary>
            Removes multiple pages from the collection.
            </summary>
      <param name="pages">The pages to remove</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes multiple contiguous pages from the collection.
            </summary>
      <param name="startIndex">The zero-based start index for the page to be removed.</param>
      <param name="count">The number of contiguous pages to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.Clear">
      <summary>
            Removes all pages from the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.Contains(TallComponents.PDF.Page)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Page">Page</see> is in the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
      <param name="page">The <see cref="T:TallComponents.PDF.Page" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Page" /> is found in this <see cref="T:TallComponents.PDF.PageCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.Move(System.Int32,System.Int32)">
      <summary>
            Moves an existing page to an other position.
            </summary>
      <param name="fromIndex">The zero-based index from the page to move.</param>
      <param name="toIndex">The zero-based index for the new position.</param>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.IndexOf(TallComponents.PDF.Page)">
      <summary>
            Returns the zero-based index of the given page.
            </summary>
      <param name="page">The page to be indexed.</param>
      <returns>the zero-based index of the given page, or -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.CloneToArray">
      <summary>
            Clones this PageCollection with default clone settings.
            </summary>
      <returns>A page[] array.</returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.CloneToArray(TallComponents.PDF.PageCloneSettings)">
      <summary>
            Clones this PageCollection with the specified clone settings.
            </summary>
      <param name="cloneSettings">The clone settings.</param>
      <returns>A page[] array.</returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.CloneToArray(System.String)">
      <summary>
            Clones this PageCollection with the default clone settings but prefix the field fullNames.
            </summary>
      <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
      <returns>A page[] array.</returns>
    </member>
    <member name="M:TallComponents.PDF.PageCollection.CloneToArray(TallComponents.PDF.PageCloneSettings,System.String)">
      <summary>
            Clones this PageCollection with the specified clone settings and prefix the field fullNames.
            </summary>
      <param name="cloneSettings">The clone settings.</param>
      <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
      <returns>A page[] array.</returns>
    </member>
    <member name="P:TallComponents.PDF.PageCollection.Item(System.Int32)">
      <summary>
            Retrieve a page by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.PageCollection.Count">
      <summary>
            Number of pages.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Forms.Fields.XfaDataBinding">
      <summary>
            The data binding used in the XFA section of this field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.None">
      <summary>
            No data binding is used for this field. Getting a value is unspecified. Setting an value has no effect.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.Normal">
      <summary>
            The normal (Once) databinding is used. Getting and Setting a value is supported, if XfaInfo.HasDataConnections is false, otherwise unspecified.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.DataRef">
      <summary>
            The data binding uses a data reference. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.Global">
      <summary>
            The global data binding is used for this field. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.Unknown">
      <summary>
            This Xfa field has an unknown data binding. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.WidgetPersistency">
      <summary>
            The persistency for a widget
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.WidgetPersistency.Leave">
      <summary>
            The widget will be present in the target document, with the updated properties
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.WidgetPersistency.Flatten">
      <summary>
            Remove the widget from the document so it can no longer be manipulated, but the appearance is 
            added as static content.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Widgets.WidgetPersistency.Remove">
      <summary>
            Remove the widget from the document. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Widgets.TopazSignature">
      <summary>
            A class representing a Topaz System Signature.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.TopazSignature.#ctor(System.String)">
      <summary>
            Create a new TopazSignature based on an existing sig string.
            </summary>
      <param name="sigStringHex">An unencrypted, uncompressed SIG string.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Widgets.TopazSignature.#ctor(System.IO.Stream)">
      <summary>
            Create a new TopazSignature based on an existing sig stream.
            </summary>
      <param name="sigStream">An unencrypted, uncompressed SIG string as stream.</param>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.Square">
      <summary>
            A Square markup is a specialized markup and appear as a square.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Square.#ctor">
      <summary>
            Create a new square markup.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Square.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new square markup.
            </summary>
      <param name="left">The left position for this square markup.</param>
      <param name="bottom">The bottom position for this square markup.</param>
      <param name="width">The width for this square markup.</param>
      <param name="height">The height for this square markup.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Markups.Square.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Markups.Square.InteriorColor">
      <summary>
            The interior color this square has.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Markups.LineEndStyle">
      <summary>
            Standard appearances of the text markup (annotation).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Unknown">
      <summary>
            Unkown line end style.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Square">
      <summary>
            Square filled with interior color.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Cirle">
      <summary>
            Circle filled with interior color.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Diamond">
      <summary>
            Diamond shape filled with interior color.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.OpenArrow">
      <summary>
            Two short lines meeting in an angle to form an arrow head.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.ClosedArrow">
      <summary>
            Triangle filled with interior color.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.None">
      <summary>
            No line ending.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Butt">
      <summary>
            Short perpendicular line.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.ReverseOpenArrow">
      <summary>
            Open arrow in reverse direction.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.ReverseClosedArrow">
      <summary>
            Closed arrow in reverse direction.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Slash">
      <summary>
            Short diagonal line.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Annotations.Link">
      <summary>
            A link annotation
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Link.#ctor">
      <summary>
            Create a new link annotation.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Link.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new link annotation.
            </summary>
      <param name="left">The left position for this link.</param>
      <param name="bottom">The bottom position for this link.</param>
      <param name="width">The width for this link.</param>
      <param name="height">The height for this link.</param>
    </member>
    <member name="M:TallComponents.PDF.Annotations.Link.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
      <summary>
            Accept this annotation.
            </summary>
      <param name="visitor">The vistor used to Accept this annotation.</param>
      <param name="argument">An additional argument passed to the Visit method (may be <see langword="null" />).</param>
      <returns>The object as returned by the visitor. Meaning is visitor specific.</returns>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Link.BorderColor">
      <summary>
            The color of the border of this annotation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Link.MouseUpActions">
      <summary>
            The actions executed when a mouse/pointing device goes up.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Annotations.Link.HighlightStyle">
      <summary>
            The visual effect that is used when the mouse is pressed inside the annotation area.
            </summary>
    </member>
    <member name="M:TallComponents.Utility.StringReaderHelper.ReadAsStringFromStream(System.IO.Stream)">
      <summary>
            Reads the content from the stream into a string.
            </summary>
      <param name="inputStream">The stream to read.</param>
      <returns>The string with the content read from the stream.</returns>
    </member>
    <member name="M:TallComponents.Utility.StringReaderHelper.ReadAsStringFromBytes(System.Byte[])">
      <summary>
            Reads the content from the byte[] into a string.
            </summary>
      <param name="input">The bytes to read.</param>
      <returns>The string with the content from the bytes.</returns>
    </member>
    <member name="T:TallComponents.PDF.Shapes.PageShape">
      <summary>
            A page shape is a placeholder for an existing page. 
            It is used to stamp existing pages on an other page, which could be either a new or an existing page.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page)">
      <summary>
            Create a new page shape.
            </summary>
      <param name="page">The existing page that will be rendered inside this page shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new page shape, with the aspect ratio not respected, no rotation
            </summary>
      <param name="page">The existing page that will be rendered inside this page shape.</param>
      <param name="left">The horizontal position of the left edge of this page shape.</param>
      <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
      <param name="width">The width of this page shape.</param>
      <param name="height">The height of this page shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Create a new page shape, no rotation.
            </summary>
      <param name="page">The existing page that will be rendered inside this page shape.</param>
      <param name="left">The horizontal position of the left edge of this page shape.</param>
      <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
      <param name="width">The width of this page shape.</param>
      <param name="height">The height of this page shape.</param>
      <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double,TallComponents.PDF.Shapes.PageBoundary)">
      <summary>
            Create a new page shape. 
            </summary>
      <param name="page">The existing page that will be rendered inside this page shape.</param>
      <param name="left">The horizontal position of the left edge of this page shape.</param>
      <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
      <param name="width">The width of this page shape.</param>
      <param name="height">The height of this page shape.</param>
      <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
      <param name="rotation">The rotation the page shape clockwise (360 corresponds to a full circle).</param>
      <param name="pageBoundary">This shape has the contents from the specified page boundary. If the page does not have the specified page boundary, then it will be automatically using the following fallback: ArtBox --&gt; CropBox; TrimBox --&gt; CropBox; BleedBox --&gt; CropBox; CropBox --&gt; MediaBox.</param>
    </member>
    <member name="P:TallComponents.PDF.Shapes.PageShape.Width">
      <summary>
            The width of this page shape in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.PageShape.Height">
      <summary>
            The height of this page shape in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.PageShape.KeepAspectRatio">
      <summary>
            If KeepAspectRatio is set to true, the size is calculated from the 
            width and height so that the width/height ratio is equal to the ratio
            of the original page. If set to false, the specified.
            width and height are used and the page will in general appear distorted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.PageShape.PageBoundary">
      <summary>
            Specifies which page boundary corresponds to this page shape, the space outside the specified boundary will be clipped. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Shapes.FreeHandSegmentCollection">
      <summary>
            Collection of FreeHandSegment objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.#ctor">
      <summary>
            Create a new empty collection of free hand segments.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Add(TallComponents.PDF.Shapes.FreeHandSegment)">
      <summary>
            Add an existing free hand segment to this collection.
            </summary>
      <param name="segment">Add this segment.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Remove(TallComponents.PDF.Shapes.FreeHandSegment)">
      <summary>
            Remove a segment from this collection.
            </summary>
      <param name="segment">Remove this segment.</param>
      <returns>true if removing the segment succeeded.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Shapes.FreeHandSegmentCollection)">
      <summary>
            Adds the elements of a Free hand segment collection to the end of this collection.
            </summary>
      <param name="segments">The FreeHandSegmentCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Shapes.FreeHandSegment[])">
      <summary>
            Adds the elements of a FreeHandSegment array to the end of this collection.
            </summary>
      <param name="segments">The array of segments whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Insert(System.Int32,TallComponents.PDF.Shapes.FreeHandSegment)">
      <summary>
            Insert an existing segment at the specified index.
            </summary>
      <param name="index">The zero-based index of the segment after insertion.</param>
      <param name="segment">Insert this segment.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a segment at the specified index.
            </summary>
      <param name="index">The index of the segment to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Clear">
      <summary>
            Remove all segments from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Contains(TallComponents.PDF.Shapes.FreeHandSegment)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.FreeHandSegment" /> is in the <see cref="T:TallComponents.PDF.Shapes.FreeHandSegmentCollection" />.
            </summary>
      <param name="freeHandSegment">The <see cref="T:TallComponents.PDF.Shapes.FreeHandSegment" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Shapes.FreeHandSegment" /> is found in this <see cref="T:TallComponents.PDF.Shapes.FreeHandSegmentCollection" />, false otherwise.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.IndexOf(TallComponents.PDF.Shapes.FreeHandSegment)">
      <summary>
            Returns the index of the specified segment.
            </summary>
      <param name="segment">The segment to locate in this collection.</param>
      <returns>The zero-based index of the segment found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.GetEnumerator">
      <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.System#ICloneable#Clone">
      <summary>
            IClonable implementation. Clones a FreeHandSegmentCollection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Clone">
      <summary>
            Clones a FreeHandSegmentCollection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Count">
      <summary>
            Number of segments in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Item(System.Int32)">
      <summary>
            Get a segment by index (0-based).
            </summary>
    </member>
    <member name="T:TallComponents.Licensing.LicenseCollection">
      <summary>
            The LicenseCollection class let you enter the key and value programmatically.
            </summary>
    </member>
    <member name="M:TallComponents.Licensing.LicenseCollection.Add(System.String,System.String)">
      <summary>
            Add a license programmatically.
            </summary>
      <param name="licenseKey">The type of license key.</param>
      <param name="licenseKeyValue">The license key value.</param>
    </member>
    <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB.ConvertColor(TallComponents.PDF.Base.Number[],TallComponents.PDF.Base.Number[])">
      <summary>
            Convert a color from one Color Space to another.
            </summary>
      <param name="input">Array containing the original color components.</param>
      <param name="output">Array receiving the converted color components.</param>
    </member>
    <member name="T:TallComponents.PDF.Fonts.Font">
      <summary>
            A font is used to typeset text. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.#ctor">
      <summary>
            Creates a new font object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.CreatePaths(System.Char,System.Double)">
      <summary>
            Return the glyph for the given Unicode chararacter as a FreeHandPathCollection.
            </summary>
      <param name="character">
      </param>
      <param name="fontSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.AddToSubset(System.Char[])">
      <summary>
            Add characters to the embedded subset.
            </summary>
      <param name="subset">Add these characters to the subset.</param>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.Contains(System.Char)">
      <summary>
            Check whether this font contains the given character.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.CalculateHeight(System.String,System.Double,System.Double)">
      <summary>
            Calculate the height of the given text in points
            </summary>
      <param name="text">The text that the height will be calculated of.</param>
      <param name="fontSize">The font size.</param>
      <param name="textWidth">The maximum width of the text.</param>
      <returns>The height in points.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.CalculateWidth(System.String,System.Double)">
      <summary>
            Calculate the width of given text in points.
            </summary>
      <param name="text">The text that the height will be calculated of.</param>
      <param name="fontSize">The font size.</param>
      <returns>Width in points.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.String)">
      <summary>
            Get a TrueType font from file.
            </summary>
      <param name="path">Relative or absolute path to TrueType file.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.IO.Stream)">
      <summary>
            Get a TrueType font from a stream. 
            </summary>
      <param name="stream">Stream containing TrueType font data.</param>
      <returns>The created font.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.String,System.String)">
      <summary>
            Get a TrueType font from a TrueType collection (.TTC) file.
            </summary>
      <param name="path">Relative or absolute path to TrueType collection file.</param>
      <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.IO.Stream,System.String)">
      <summary>
            Get a TrueType font from a TrueType collection stream. 
            </summary>
      <param name="stream">Stream containing TrueType collection font data.</param>
      <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
      <returns>The created font.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.Create(System.String,System.Boolean,System.Boolean)">
      <summary>
            Tries to find the first matching font.
            </summary>
      <param name="familyName">The font family to look for.</param>
      <param name="bold">True if a bold font needs to be resolved.</param>
      <param name="italic">True if a bold font needs to be resolved.</param>
      <returns>The font or null if none found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.Create(System.String,System.Boolean,System.Boolean,System.String)">
      <summary>
            Tries to find the first matching font.
            </summary>
      <param name="familyName">The font family to look for.</param>
      <param name="bold">True if a bold font needs to be resolved.</param>
      <param name="italic">True if a bold font needs to be resolved.</param>
      <param name="additionalFontFolders">One or more paths (semicolon [;] seperated) to folder(s) with TTF documents.</param>
      <returns>The font or null if none found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.SaveFamilies(System.IO.Stream)">
      <summary>
            Save the font family collection. 
            </summary>
      <param name="stream">Save to this stream.</param>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.LoadFamilies(System.IO.Stream)">
      <summary>
            Load the font family collection. 
            </summary>
      <param name="stream">Save to this stream.</param>
    </member>
    <member name="M:TallComponents.PDF.Fonts.Font.GetTrueTypeFontNames(System.String)">
      <summary>
            Retrieve the names of all TrueType files inside a TrueType collection file.
            </summary>
      <param name="path">Relative, absolute or virtual path to TrueType collection (.TTC) file.</param>
      <returns>Array of TrueType font names. These names can be passed to the TrueType overload that creates a TrueType font from a TrueType collection file.</returns>
    </member>
    <member name="E:TallComponents.PDF.Fonts.Font.ResolveCMap">
      <summary>
            Fired when a CMap need to be resolved.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.CMapFolder">
      <summary>
            The folder where the CMaps can be found.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.LicensingRights">
      <summary>
            Font licensing rights.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.EmbedMode">
      <summary>
            How the font is stored inside the PDF.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Path">
      <summary>
            The path of the TrueType file of this font. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.SubscriptScale">
      <summary>
            The subscript scale of this font. Multiply with the font size to get the subscript font size.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.SuperscriptScale">
      <summary>
            The superscript scale of this font. Multiply with the font size to get the superscript font size.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.SubscriptOffset">
      <summary>
            The subscript offset is the distance in points between the lower extreme of a font and the 
            lower extreme where to place subscript text for a font of size 1 pt.  
            Multiply with the font size to get the offset in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.SuperscriptOffset">
      <summary>
            The superscript offset is the distance in points between the lower extreme of a font and the 
            lower extreme where to place superscript text for a font of size 1 pt. 
            Multiply with the font size to get the offset in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Height">
      <summary>
            The height of this font at a font size of 1 pt. Multiply the height with the font size to
            get the height in points.
            </summary>
      <returns>Height of this font at 1 pt.</returns>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.BaselineOffset">
      <summary>
            The distance in points between the lower extreme of a font and the visual baseline  for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.UnderlineOffset">
      <summary>
            The distance in points between the lower extreme of a font and the position of an underline for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.DecorationLineWidth">
      <summary>
            The width of decoration lines for a font with a size of 1 pt. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.StrikeOutOffset">
      <summary>
            The distance in points between the lower extreme of a font and the position of a strikethrough for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.XHeight">
      <summary>
            The height of the small letter x this font at a font size of 1 pt. Multiply the x-height with the font size to
            get the x-height in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Ascender">
      <summary>
            The ascender of this font at a font size of 1 pt. Multiply the ascender with the font size to
            get the ascender in points. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Descender">
      <summary>
            The descender of this font at a font size of 1 pt. Multiply the descender with the font size to
            get the descender in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.LineGap">
      <summary>
            The height of the line gap specified inside this font at a font size of 1 pt. Multiply the line gap with the font size to
            get the line gap in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Weight">
      <summary>
            The Weight this font has by design [100...900]
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Bold">
      <summary>
            Whether this font is bold by design.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Italic">
      <summary>
            Whether this font is italic by design.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.ItalicAngle">
      <summary>
            The italic angle the font designer has assigned to this font (counter-clockwise from vertical).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Name">
      <summary>
            The name of the font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.FamilyName">
      <summary>
            The family name of the font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Helvetica">
      <summary>
            Get standard PDF font Helvetica.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.HelveticaBold">
      <summary>
            Get standard PDF font Helvetica bold.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.HelveticaOblique">
      <summary>
            Get standard PDF font Helvetica oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.HelveticaBoldOblique">
      <summary>
            Get standard PDF font Helvetica bold oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Courier">
      <summary>
            Get standard PDF font Courier.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.CourierBold">
      <summary>
            Get standard PDF font Courier bold.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.CourierOblique">
      <summary>
            Get standard PDF font Courier oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.CourierBoldOblique">
      <summary>
            Get standard PDF font Courier bold oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.TimesRoman">
      <summary>
            Get standard PDF font TimesRoman.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.TimesBold">
      <summary>
            Get standard PDF font TimesRoman bold.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.TimesItalic">
      <summary>
            Get standard PDF font TimesRoman italic.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.TimesBoldItalic">
      <summary>
            Get standard PDF font TimesRoman bold italic.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.Symbol">
      <summary>
            Get standard PDF font Symbol.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Fonts.Font.ZapfDingbats">
      <summary>
            Get standard PDF font ZapfDingbats.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.VerticalAlignment">
      <summary>
            Vertical alignment of text lines.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.VerticalAlignment.Top">
      <summary>
            Top aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.VerticalAlignment.Middle">
      <summary>
            Middle aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.VerticalAlignment.Bottom">
      <summary>
            Bottom aligned
            </summary>
    </member>
    <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs12Store">
      <summary>
            A Pkcs #12 key store.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.#ctor(System.IO.Stream,System.String)">
      <summary>
            Create a new Pkcs #12 key store from a stream.
            </summary>
      <param name="stream">A stream containing a Pkcs #12 key store.</param>
      <param name="password">The password required to open the store.</param>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
      <summary>
            Create a Pkcs12Store from a chain 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
            Create a Pkcs12Store from a Certificate.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs12Store.Names">
      <summary>
            The names of all certificates in the store that can be used for signing.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a base 64 output stream.
            
             @return the number of bytes produced.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.Base64Encoder.DecodeString(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponseGenerator.GenerateFailResponse(Org.BouncyCastle.Asn1.Cmp.PkiStatus,System.Int32,System.String)">
             Generate a TimeStampResponse with chosen status and FailInfoField.
            
             @param status the PKIStatus to set.
             @param failInfoField the FailInfoField to set.
             @param statusString an optional string describing the failure.
             @return a TimeStampResponse with a failInfoField and optional statusString
             @throws TSPException in case the response could not be created
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsCipher.EncodePlaintext(Org.BouncyCastle.Crypto.Tls.ContentType,System.Byte[],System.Int32,System.Int32)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsCipher.DecodeCiphertext(Org.BouncyCastle.Crypto.Tls.ContentType,System.Byte[],System.Int32,System.Int32)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipServerCertificate">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessServerCertificate(Org.BouncyCastle.Crypto.Tls.Certificate)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipServerKeyExchange">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.ValidateCertificateRequest(Org.BouncyCastle.Crypto.Tls.CertificateRequest)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipClientCredentials">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessClientCredentials(Org.BouncyCastle.Crypto.Tls.TlsCredentials)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsKeyExchange.GeneratePremasterSecret">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.ICertificateVerifyer.IsValid(Org.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
      <param name="certs">The certs, which are part of the chain.</param>
      <returns>True, if the chain is accepted, false otherwise</returns>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.ECCurveType.explicit_prime">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a prime field.
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.ECCurveType.explicit_char2">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a characteristic-2 field.
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.ECCurveType.named_curve">
            Indicates that a named curve is used. This option SHOULD be used when applicable.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.IWrapper.AlgorithmName">
      <summary>The name of the algorithm this cipher implements.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.engine">
            Field engine 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.param">
            Field param 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.iv">
            Field iv 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.forWrapping">
            Field forWrapping 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.IV2">
            Field IV2           
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.#ctor">
            base constructor
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.IBcpgKey.Format">
      <summary>
            The base format for this key - in the case of the symmetric keys it will generally
            be raw indicating that the key is just a straight byte representation, for an asymmetric
            key the format will be PGP, indicating the key is a string of MPIs encoded in PGP format.
            </summary>
      <returns>"RAW" or "PGP".</returns>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.KeySpecificInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             KeySpecificInfo ::= Sequence {
                 algorithm OBJECT IDENTIFIER,
                 counter OCTET STRING SIZE (4..4)
             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.GetDistributionPoints">
             Return the distribution points making up the sequence.
            
             @return DistributionPoint[]
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CrlDistPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlDistPoint ::= Sequence SIZE {1..MAX} OF DistributionPoint
            </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.PreferSignedData">
            general preferences
        </member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapability.DesCbc">
            encryption algorithms preferences
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapability.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapability ::= Sequence {
                capabilityID OBJECT IDENTIFIER,
                parameters ANY DEFINED BY capabilityID OPTIONAL
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspRequest     ::=     Sequence {
                tbsRequest                  TBSRequest,
                optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CertID          ::=     Sequence {
                hashAlgorithm       AlgorithmIdentifier,
                issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                serialNumber        CertificateSerialNumber }
            </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttCPAccredited">
            The id-isismtt-cp-accredited OID indicates that the certificate is a
            qualified certificate according to Directive 1999/93/EC of the European
            Parliament and of the Council of 13 December 1999 on a Community
            Framework for Electronic Signatures, which additionally conforms the
            special requirements of the SigG and has been issued by an accredited CA.
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDateOfCertGen">
             Certificate extensionDate of certificate generation
             
             <pre>
            		DateOfCertGenSyntax ::= GeneralizedTime
             </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATProcuration">
            Attribute to indicate that the certificate holder may sign in the name of
            a third person. May also be used as extension in a certificate.
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdmission">
            Attribute to indicate admissions to certain professions. May be used as
            attribute in attribute certificate or as extension in a certificate
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATMonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST
            be used in new certificates in place of the extension/attribute
            MonetaryLimit since January 1, 2004. For the sake of backward
            compatibility with certificates already in use, SigG conforming
            components MUST support MonetaryLimit (as well as QcEuLimitValue).
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDeclarationOfMajority">
            A declaration of majority. May be used as attribute in attribute
            certificate or as extension in a certificate
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATIccsn">
             
             Serial number of the smart card containing the corresponding private key
             
             <pre>
            		ICCSNSyntax ::= OCTET STRING (SIZE(8..20))
             </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATPKReference">
             
             Reference for a file of a smartcard that stores the public key of this
             certificate and that is used as �security anchor�.
             
             <pre>
            		PKReferenceSyntax ::= OCTET STRING (SIZE(20))
             </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRestriction">
             Some other restriction regarding the usage of this certificate. May be
             used as attribute in attribute certificate or as extension in a
             certificate.
             
             <pre>
            		RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
             
             @see Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRetrieveIfAllowed">
             
             (Single)Request extension: Clients may include this extension in a
             (single) Request to request the responder to send the certificate in the
             response message along with the status information. Besides the LDAP
             service, this extension provides another mechanism for the distribution
             of certificates, which MAY optionally be provided by certificate
             repositories.
             
             <pre>
            		RetrieveIfAllowed ::= BOOLEAN
             </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRequestedCertificate">
            SingleOCSPResponse extension: The certificate requested by the client by
            inserting the RetrieveIfAllowed extension in the request, will be
            returned in this extension.
            
            @see Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNamingAuthorities">
            Base ObjectIdentifier for naming authorities
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertInDirSince">
             SingleOCSPResponse extension: Date, when certificate has been published
             in the directory and status information has become available. Currently,
             accrediting authorities enforce that SigG-conforming OCSP servers include
             this extension in the responses.
             
             <pre>
            		CertInDirSince ::= GeneralizedTime
             </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertHash">
             Hash of a certificate in OCSP.
            
             @see Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNameAtBirth">
      <pre>
            		NameAtBirth ::= DirectoryString(SIZE(1..64)
             </pre>
             
             Used in
             {@link Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes SubjectDirectoryAttributes}
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdditionalInformation">
            Some other information of non-restrictive nature regarding the usage of
            this certificate. May be used as attribute in atribute certificate or as
            extension in a certificate.
            
            <pre>
                          AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
            
            @see Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATLiabilityLimitationFlag">
             Indicates that an attribute certificate exists, which limits the
             usability of this public key certificate. Whenever verifying a signature
             with the help of this certificate, the content of the corresponding
             attribute certificate should be concerned. This extension MUST be
             included in a PKC, if a corresponding attribute certificate (having the
             PKC as base certificate) contains some attribute that restricts the
             usability of the PKC too. Attribute certificates with restricting content
             MUST always be included in the signed document.
             
             <pre>
            		LiabilityLimitationFlagSyntax ::= BOOLEAN
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.ToAsn1Object">
      <pre>
            AttributeTypeAndValue ::= SEQUENCE {
                      type         OBJECT IDENTIFIER,
                      value        ANY DEFINED BY type }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.GetInstance(System.Object)">
             return an OriginatorInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorInfo ::= Sequence {
                certs [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevReqContent.ToAsn1Object">
      <pre>
            RevReqContent ::= SEQUENCE OF RevDetails
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.Challenge.ToAsn1Object">
      <pre>
             Challenge ::= SEQUENCE {
                             owf                 AlgorithmIdentifier  OPTIONAL,
            
                             -- MUST be present in the first Challenge; MAY be omitted in
                             -- any subsequent Challenge in POPODecKeyChallContent (if
                             -- omitted, then the owf used in the immediately preceding
                             -- Challenge is to be used).
            
                             witness             OCTET STRING,
                             -- the result of applying the one-way function (owf) to a
                             -- randomly-generated INTEGER, A.  [Note that a different
                             -- INTEGER MUST be used for each Challenge.]
                             challenge           OCTET STRING
                             -- the encryption (under the public key for which the cert.
                             -- request is being made) of Rand, where Rand is specified as
                             --   Rand ::= SEQUENCE {
                             --      int      INTEGER,
                             --       - the randomly-generated INTEGER A (above)
                             --      sender   GeneralName
                             --       - the sender's name (as included in PKIHeader)
                             --   }
                  }
             </pre>
             @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CollectionStore.#ctor(System.Collections.ICollection)">
             Basic constructor.
            
             @param collection - initial contents for the store, this is copied.
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CollectionStore.GetMatches(Org.BouncyCastle.X509.Store.IX509Selector)">
             Return the matches in the collection for the passed in selector.
            
             @param selector the selector to match against.
             @return a possibly empty collection of matching objects.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValid(System.String)">
             Validate the given IPv4 or IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid address, false otherwise
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidWithNetMask(System.String)">
             Validate the given IPv4 or IPv6 address and netmask.
            
             @param address the IP address as a string.
            
             @return true if a valid address with netmask, false otherwise
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv4(System.String)">
             Validate the given IPv4 address.
             
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv6(System.String)">
             Validate the given IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedEncoder.#ctor(Org.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
      <summary>
            Create.
            </summary>
      <param name="translator">The translator to use.</param>
      <param name="bufferSize">Size of the chunks.</param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
      <summary>
            Process one byte of data.
            </summary>
      <param name="input">The byte.</param>
      <param name="outBytes">An array to store output in.</param>
      <param name="outOff">Offset within output array to start writing from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Process data from a byte array.
            </summary>
      <param name="input">Input data Byte array containing data to be processed.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="len">Amount of input data to be processed.</param>
      <param name="outBytes">Output data array.</param>
      <param name="outOff">Offset within output data array to start writing to.</param>
      <returns>The amount of data written.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String)">
      <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the given detail
            message. A detail message is a <code>String</code> that describes this
            particular exception. 
            </summary>
      <param name="message">the detail message</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message and cause.
            </summary>
      <param name="message">the detail message</param>
      <param name="cause">the cause (which is saved for later retrieval by the
            {@link #getCause getCause()} method). (A <code>null</code>
            value is permitted, and indicates that the cause is
            nonexistent or unknown.)</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception,Org.BouncyCastle.Pkix.PkixCertPath,System.Int32)">
      <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message, cause, certification path, and index.
            </summary>
      <param name="message">the detail message (or <code>null</code> if none)</param>
      <param name="cause">the cause (or <code>null</code> if none)</param>
      <param name="certPath">the certification path that was in the process of being
            validated when the error was encountered</param>
      <param name="index">the index of the certificate in the certification path that</param>																																																																																   * 
        </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.Message">
      <summary>
            Returns the detail message for this <code>CertPathValidatorException</code>.
            </summary>
      <returns>the detail message, or <code>null</code> if neither the message nor cause were specified</returns>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.CertPath">
            Returns the certification path that was being validated when the
            exception was thrown.
            
            @return the <code>CertPath</code> that was being validated when the
                    exception was thrown (or <code>null</code> if not specified)
        </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPathValidatorException.Index">
            Returns the index of the certificate in the certification path that
            caused the exception to be thrown. Note that the list of certificates in
            a <code>CertPath</code> is zero based. If no index has been set, -1 is
            returned.
            
            @return the index that has been set, or -1 if none has been set
        </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.GetPublicKey">
      <summary>
            Get the public key.
            </summary>
      <returns>The public key.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest.Verify">
      <summary>
            Verify Pkcs10 Cert Request is valid.
            </summary>
      <returns>true = valid.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.SingleResp.GetCertStatus">
             Return the status object for the response - null indicates good.
            
             @return the status object for the response, null if it is good.
        </member>
    <member name="P:Org.BouncyCastle.Ocsp.SingleResp.NextUpdate">
             return the NextUpdate value - note: this is an optional field so may
             be returned as null.
            
             @return nextUpdate, or null if not present.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.Init(Org.BouncyCastle.Crypto.Tls.TlsClientContext)">
      <summary>
            Called at the start of a new TLS session, before any other methods.
            </summary>
      <param name="context">
            A </param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites">
      <summary>
            Get the list of cipher suites that this client supports.
            </summary>
      <returns>
            An array of , each specifying a supported cipher suite.
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods">
      <summary>
            Get the list of compression methods that this client supports.
            </summary>
      <returns>
            An array of , each specifying a supported compression method.
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions">
      <summary>
            Get the (optional) table of client extensions to be included in (extended) client hello.
            </summary>
      <returns>
            A <see cref="T:System.Collections.IDictionary" /> ( -&gt; byte[]). May be null.
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])">
      <summary>
            Reports the session ID once it has been determined.
            </summary>
      <param name="sessionID">
            A <see cref="T:System.Byte" /></param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(Org.BouncyCastle.Crypto.Tls.CipherSuite)">
      <summary>
            Report the cipher suite that was selected by the server.
            </summary>
      <param name="selectedCipherSuite">
            A </param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(Org.BouncyCastle.Crypto.Tls.CompressionMethod)">
      <summary>
            Report the compression method that was selected by the server.
            </summary>
      <param name="selectedCompressionMethod">
            A </param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.NotifySecureRenegotiation(System.Boolean)">
      <summary>
            Report whether the server supports secure renegotiation
            </summary>
      <param name="secureRenegotiation">
            A <see cref="T:System.Boolean" />, true if the server supports secure renegotiation
            </param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)">
      <summary>
            Report the extensions from an extended server hello.
            </summary>
      <param name="serverExtensions">
            A <see cref="T:System.Collections.IDictionary" />  ( -&gt; byte[])
            </param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange">
      <summary>
            Return an implementation of  to negotiate the key exchange
            part of the protocol.
            </summary>
      <returns>
            A </returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication">
      <summary>
            Return an implementation of  to handle authentication
            part of the protocol.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCompression">
      <summary>
            Return an implementation of  to handle record compression.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsClient.GetCipher">
      <summary>
            Return an implementation of  to use for encryption/decryption.
            </summary>
      <returns>
            A </returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.AlwaysValidVerifyer.IsValid(Org.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
      <summary>Return true.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using the key
            we were initialised with.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.GenericSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described in
            the passed in array.
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertStoreSelector.Policy">
      <summary>
            An <code>ISet</code> of <code>DerObjectIdentifier</code> objects.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.RecipientInformation.GetMac">
             Return the MAC calculated for the content stream. Note: this call is only meaningful once all
             the content has been read.
            
             @return  byte array containing the mac.
        </member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformation.KeyEncryptionAlgOid">
                    * return the object identifier for the key encryption algorithm.
                    * 
            		* @return OID for key encryption algorithm.
        </member>
    <member name="P:Org.BouncyCastle.Cms.RecipientInformation.KeyEncryptionAlgParams">
                    * return the ASN.1 encoded key encryption algorithm parameters, or null if
                    * there aren't any.
                    * 
            		* @return ASN.1 encoding of key encryption algorithm parameters.
        </member>
    <member name="P:Org.BouncyCastle.Cms.PasswordRecipientInformation.KeyDerivationAlgorithm">
             return the object identifier for the key derivation algorithm, or null
             if there is none present.
            
             @return OID for key derivation algorithm, if present.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsContentInfoParser.Close">
            Close the underlying data stream.
            @throws IOException if the close fails.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetAuthAttrs">
            return a table of the unauthenticated attributes indexed by
            the OID of the attribute.
            @exception java.io.IOException
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetUnauthAttrs">
            return a table of the unauthenticated attributes indexed by
            the OID of the attribute.
            @exception java.io.IOException
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.MacAlgOid">
            return the object identifier for the mac algorithm.
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedDataParser.MacAlgParams">
            return the ASN.1 encoded encryption algorithm parameters, or null if
            there aren't any.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignatureSubpacket.GetData">
      <summary>Return the generic data making up the packet.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.SignatureExpirationTime.Time">
            return time in seconds before signature expires after creation time.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaSecretBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream)">
      <summary>Create a stream representing a general packet.</summary>
      <param name="outStr">Output stream to write to.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag)">
      <summary>Create a stream representing an old style partial object.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">The packet tag for the object.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag,System.Int64,System.Boolean)">
      <summary>Create a stream representing a general packet.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">Packet tag.</param>
      <param name="length">Size of chunks making up the packet.</param>
      <param name="oldFormat">If true, the header is written out in old format.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag,System.Int64)">
      <summary>Create a new style partial input stream buffered into chunks.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">Packet tag.</param>
      <param name="length">Size of chunks making up the packet.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,Org.BouncyCastle.Bcpg.PacketTag,System.Byte[])">
      <summary>Create a new style partial input stream buffered into chunks.</summary>
      <param name="outStr">Output stream to write to.</param>
      <param name="tag">Packet tag.</param>
      <param name="buffer">Buffer to use for collecting chunks.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.Flush">
      <summary>Flush the underlying stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgOutputStream.Finish">
      <summary>Finish writing out the current packet without closing the underlying stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.BcpgInputStream.NextPacketTag">
      <summary>Returns the next packet tag in the stream.</summary>
    </member>
    <member name="T:Org.BouncyCastle.Bcpg.BcpgInputStream.PartialInputStream">
      <summary>
            A stream that overlays our input stream, allowing the user to only read a segment of it.
            NB: dataLength will be negative if the segment length is in the upper range above 2**31.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.AddAttribute(Org.BouncyCastle.Asn1.X509.AttributeX509)">
            @param attribute
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.GetInstance(System.Object)">
            RoleSyntax factory method.
            @param obj the object used to construct an instance of <code>
            RoleSyntax</code>. It must be an instance of <code>RoleSyntax
            </code> or <code>Asn1Sequence</code>.
            @return the instance of <code>RoleSyntax</code> built from the
            supplied object.
            @throws java.lang.ArgumentException if the object passed
            to the factory is not an instance of <code>RoleSyntax</code> or
            <code>Asn1Sequence</code>.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(System.String)">
            Utility constructor. Takes a <code>string</code> argument representing
            the role name, builds a <code>GeneralName</code> to hold the role name
            and calls the constructor that takes a <code>GeneralName</code>.
            @param roleName
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleNameAsString">
            Gets the role name as a <code>java.lang.string</code> object.
            @return    the role name of this RoleSyntax represented as a
            <code>string</code> object.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleAuthorityAsString">
            Gets the role authority as a <code>string[]</code> object.
            @return the role authority of this RoleSyntax represented as a
            <code>string[]</code> array.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.RoleSyntax.ToAsn1Object">
             Implementation of the method <code>ToAsn1Object</code> as
             required by the superclass <code>ASN1Encodable</code>.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.RoleSyntax.RoleAuthority">
            Gets the role authority of this RoleSyntax.
            @return    an instance of <code>GeneralNames</code> holding the
            role authority of this RoleSyntax.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.RoleSyntax.RoleName">
            Gets the role name of this RoleSyntax.
            @return    an instance of <code>GeneralName</code> holding the
            role name of this RoleSyntax.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.String,System.Collections.IList)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param orgName a <code>string</code> value
             @param numbers a <code>ArrayList</code> value
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NoticeReference.ToAsn1Object">
             Describe <code>ToAsn1Object</code> method here.
            
             @return a <code>Asn1Object</code> value
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Signature.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Signature       ::=     Sequence {
                signatureAlgorithm      AlgorithmIdentifier,
                signature               BIT STRING,
                certs               [0] EXPLICIT Sequence OF Certificate OPTIONAL}
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.OtherSigningCertificate.ToAsn1Object">
            The definition of OtherSigningCertificate is
            <pre>
            OtherSigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF OtherCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-ets-otherSigCert OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 19 }
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.ToAsn1Object">
             Returns a DER-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
    <member name="M:Org.BouncyCastle.Asn1.CryptoPro.Gost28147Parameters.ToAsn1Object">
      <pre>
             Gost28147-89-Parameters ::=
                           SEQUENCE {
                                   iv                   Gost28147-89-IV,
                                   encryptionParamSet   OBJECT IDENTIFIER
                            }
            
               Gost28147-89-IV ::= OCTET STRING (SIZE (8))
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor">
            Creates a ProofOfPossession with type raVerified. 
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(Org.BouncyCastle.Asn1.Crmf.PopoSigningKey)">
            Creates a ProofOfPossession for a signing key. 
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(System.Int32,Org.BouncyCastle.Asn1.Crmf.PopoPrivKey)">
            Creates a ProofOfPossession for key encipherment or agreement.
            @param type one of TYPE_KEY_ENCIPHERMENT or TYPE_KEY_AGREEMENT
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.ProofOfPossession.ToAsn1Object">
      <pre>
            ProofOfPossession ::= CHOICE {
                                      raVerified        [0] NULL,
                                      -- used if the RA has already verified that the requester is in
                                      -- possession of the private key
                                      signature         [1] PopoSigningKey,
                                      keyEncipherment   [2] PopoPrivKey,
                                      keyAgreement      [3] PopoPrivKey }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertId.ToAsn1Object">
      <pre>
            CertId ::= SEQUENCE {
                            issuer           GeneralName,
                            serialNumber     INTEGER }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.ToAsn1Object">
      <pre>
            TimeStampTokenEvidence ::=
               SEQUENCE SIZE(1..MAX) OF TimeStampAndCrl
            </pre>
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32)">
            @param status
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiStatusInfo.ToAsn1Object">
      <pre>
             PkiStatusInfo ::= SEQUENCE {
                 status        PKIStatus,                (INTEGER)
                 statusString  PkiFreeText     OPTIONAL,
                 failInfo      PkiFailureInfo  OPTIONAL  (BIT STRING)
             }
            
             PKIStatus:
               granted                (0), -- you got exactly what you asked for
               grantedWithMods        (1), -- you got something like what you asked for
               rejection              (2), -- you don't get it, more information elsewhere in the message
               waiting                (3), -- the request body part has not yet been processed, expect to hear more later
               revocationWarning      (4), -- this message contains a warning that a revocation is imminent
               revocationNotification (5), -- notification that a revocation has occurred
               keyUpdateWarning       (6)  -- update already done for the oldCertId specified in CertReqMsg
            
             PkiFailureInfo:
               badAlg           (0), -- unrecognized or unsupported Algorithm Identifier
               badMessageCheck  (1), -- integrity check failed (e.g., signature did not verify)
               badRequest       (2), -- transaction not permitted or supported
               badTime          (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
               badCertId        (4), -- no certificate could be found matching the provided criteria
               badDataFormat    (5), -- the data submitted has the wrong format
               wrongAuthority   (6), -- the authority indicated in the request is different from the one creating the response token
               incorrectData    (7), -- the requester's data is incorrect (for notary services)
               missingTimeStamp (8), -- when the timestamp is missing but should be there (by policy)
               badPOP           (9)  -- the proof-of-possession failed
            
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Match(System.Object)">
      <summary>
            Decides if the given attribute certificate should be selected.
            </summary>
      <param name="obj">The attribute certificate to be checked.</param>
      <returns>
        <code>true</code> if the object matches this selector.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetName(System.Byte[])">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the name in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetNames(System.Collections.IEnumerable)">
            Adds a collection with target names criteria. If <code>null</code> is
            given any will do.
            <p>
            The collection consists of either GeneralName objects or byte[] arrays representing
            DER encoded GeneralName structures.
            </p>
            
            @param names A collection of target names.
            @throws IOException if a parsing error occurs.
            @see #AddTargetName(byte[])
            @see #AddTargetName(GeneralName)
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetNames">
            Gets the target names. The collection consists of <code>List</code>s
            made up of an <code>Integer</code> in the first entry and a DER encoded
            byte array or a <code>String</code> in the second entry.
            <p>The returned collection is immutable.</p>
            
            @return The collection of target names
            @see #setTargetNames(Collection)
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(System.Byte[])">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the group in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetGroups(System.Collections.IEnumerable)">
             Adds a collection with target groups criteria. If <code>null</code> is
             given any will do.
             <p>
             The collection consists of <code>GeneralName</code> objects or <code>byte[]</code>
             representing DER encoded GeneralNames.
             </p>
            
             @param names A collection of target groups.
             @throws IOException if a parsing error occurs.
             @see #AddTargetGroup(byte[])
             @see #AddTargetGroup(GeneralName)
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetGroups">
             Gets the target groups. The collection consists of <code>List</code>s
             made up of an <code>Integer</code> in the first entry and a DER encoded
             byte array or a <code>String</code> in the second entry.
             <p>The returned collection is immutable.</p>
            
             @return The collection of target groups.
             @see #setTargetGroups(Collection)
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCert">
      <summary>The attribute certificate which must be matched.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCertificateValid">
      <summary>The criteria for validity</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Holder">
      <summary>The holder.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Issuer">
      <summary>The issuer.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SerialNumber">
      <summary>The serial number.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequestGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag
            The value parameter becomes the contents of the octet string associated
            with the extension.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsCipherFactory.CreateCipher(Org.BouncyCastle.Crypto.Tls.TlsClientContext,Org.BouncyCastle.Crypto.Tls.EncryptionAlgorithm,Org.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateAesCipher(Org.BouncyCastle.Crypto.Tls.TlsClientContext,System.Int32,Org.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateDesEdeCipher(Org.BouncyCastle.Crypto.Tls.TlsClientContext,System.Int32,Org.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateDigest(Org.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator.GenerateParameters">
                     * which Generates the p and g values from the given parameters,
                     * returning the ElGamalParameters object.
                     * <p>
                     * Note: can take a while...
            		 * </p></member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.GenerateServerCredentials">
            Generates the server's credentials that are to be sent to the client.
            @return The server's public value to the client
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedGenerator.#ctor">
            base constructor
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.#ctor">
            base constructor
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String,Org.BouncyCastle.Crypto.CipherKeyGenerator)">
            generate an enveloped object that contains an CMS Enveloped Data
            object using the given provider and the passed in key generator.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String)">
            generate an authenticated object that contains an CMS Authenticated Data object
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicKeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Org.BouncyCastle.Bcpg.IBcpgKey)">
      <summary>Construct a version 4 public key packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X9.OtherInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             OtherInfo ::= Sequence {
                 keyInfo KeySpecificInfo,
                 partyAInfo [0] OCTET STRING OPTIONAL,
                 suppPubInfo [2] OCTET STRING
             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.GetInstance(System.Object)">
            Creates an instance of a Targets from the given object.
            <p><code>obj</code> can be a Targets or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A Targets instance.
            @throws ArgumentException if the given object cannot be interpreted as Target.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.#ctor(Org.BouncyCastle.Asn1.X509.Target[])">
            Constructor from given targets.
            <p>
            The ArrayList is copied.</p>
            
            @param targets An <code>ArrayList</code> of {@link Target}s.
            @see Target
            @throws ArgumentException if the ArrayList contains not only Targets.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.GetTargets">
            Returns the targets in an <code>ArrayList</code>.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Targets.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                       Targets ::= SEQUENCE OF Target
            </pre>
            
            @return an Asn1Object
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKey">
            The public key is hashed.
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKeyCert">
            The public key certificate is hashed.
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.OtherObjectDigest">
            An other object is hashed.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ObjectDigestInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.X509.IssuerSerial,System.Int32)">
            Constructs a holder from a IssuerSerial.
            @param baseCertificateID The IssuerSerial.
            @param version The version of the attribute certificate. 
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.#ctor(Org.BouncyCastle.Asn1.X509.ObjectDigestInfo)">
            Constructs a holder from an object digest info.
            
            @param objectDigestInfo The object digest info object.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Holder.ToAsn1Object">
            The Holder object.
            <pre>
             Holder ::= Sequence {
                   baseCertificateID   [0] IssuerSerial OPTIONAL,
                            -- the issuer and serial number of
                            -- the holder's Public Key Certificate
                   entityName          [1] GeneralNames OPTIONAL,
                            -- the name of the claimant or role
                   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                            -- used to directly authenticate the holder,
                            -- for example, an executable
             }
            </pre></member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Holder.Version">
            Returns 1 for v2 attribute certificates or 0 for v1 attribute
            certificates. 
            @return The version of the attribute certificate.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Holder.EntityName">
            Returns the entityName for an v2 attribute certificate or the subjectName
            for an v1 attribute certificate.
            
            @return The entityname or subjectname.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseData ::= Sequence {
                version              [0] EXPLICIT Version DEFAULT v1,
                responderID              ResponderID,
                producedAt               GeneralizedTime,
                responses                Sequence OF SingleResponse,
                responseExtensions   [1] EXPLICIT Extensions OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction.#ctor(Org.BouncyCastle.Asn1.X500.DirectoryString)">
             Constructor from DirectoryString.
             <p />
             The DirectoryString is of type RestrictionSyntax:
             <p /><pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
            
             @param restriction A IAsn1String.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction.#ctor(System.String)">
             Constructor from a given details.
            
             @param restriction The description of the restriction.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Restriction.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             <p /></pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                        RequestedCertificate ::= CHOICE {
                          Certificate Certificate,
                          publicKeyCertificate [0] EXPLICIT OCTET STRING,
                          attributeCertificate [1] EXPLICIT OCTET STRING
                        }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetVersion(System.Int32)">
            Sets the X.509 version. Note: for X509v3, use 2 here. 
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.Build">
      <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo,
                kekri [2] KekRecipientInfo,
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.GetInstance(System.Object)">
             return an OtherKeyAttribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherKeyAttribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherKeyAttribute ::= Sequence {
                keyAttrId OBJECT IDENTIFIER,
                keyAttr ANY DEFINED BY keyAttrId OPTIONAL
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessages.ToAsn1Object">
      <pre>
            PkiMessages ::= SEQUENCE SIZE (1..MAX) OF PkiMessage
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.#ctor(Org.BouncyCastle.Asn1.X509.AttributeCertificate)">
            Note: the addition of attribute certificates is a BC extension.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CmpCertificate.ToAsn1Object">
      <pre>
             CMPCertificate ::= CHOICE {
                        x509v3PKCert        Certificate
                        x509v2AttrCert      [1] AttributeCertificate
              }
             </pre>
             Note: the addition of attribute certificates is a BC extension.
            
             @return a basic ASN.1 object representation.
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.Issuers">
      <summary>
            An <code>ICollection</code> of <code>X509Name</code> objects
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.AttrCertChecking">
             The attribute certificate being checked. This is not a criterion.
             Rather, it is optional information that may help a {@link X509Store} find
             CRLs that would be relevant when checking revocation for the specified
             attribute certificate. If <code>null</code> is specified, then no such
             optional information is provided.
            
             @param attrCert the <code>IX509AttributeCertificate</code> being checked (or
                         <code>null</code>)
             @see #getAttrCertificateChecking()
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.CompleteCrlEnabled">
             If <code>true</code> only complete CRLs are returned. Defaults to
             <code>false</code>.
            
             @return <code>true</code> if only complete CRLs are returned.
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.DeltaCrlIndicatorEnabled">
             Returns if this selector must match CRLs with the delta CRL indicator
             extension set. Defaults to <code>false</code>.
            
             @return Returns <code>true</code> if only CRLs with the delta CRL
                     indicator extension are selected.
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPoint">
             The issuing distribution point.
             <p>
             The issuing distribution point extension is a CRL extension which
             identifies the scope and the distribution point of a CRL. The scope
             contains among others information about revocation reasons contained in
             the CRL. Delta CRLs and complete CRLs must have matching issuing
             distribution points.</p><p>
             The byte array is cloned to protect against subsequent modifications.</p><p>
             You must also enable or disable this criteria with
             {@link #setIssuingDistributionPointEnabled(bool)}.</p>
            
             @param issuingDistributionPoint The issuing distribution point to set.
                                             This is the DER encoded OCTET STRING extension value.
             @see #getIssuingDistributionPoint()
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPointEnabled">
             Whether the issuing distribution point criteria should be applied.
             Defaults to <code>false</code>.
             <p>
             You may also set the issuing distribution point criteria if not a missing
             issuing distribution point should be assumed.</p>
            
             @return Returns if the issuing distribution point check is enabled.
        </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CrlStoreSelector.MaxBaseCrlNumber">
             The maximum base CRL number. Defaults to <code>null</code>.
            
             @return Returns the maximum base CRL number.
             @see #setMaxBaseCRLNumber(BigInteger)
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.ToCmsSignedData">
             Return the underlying CmsSignedData object.
            
             @return the underlying CMS structure.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampToken.GetEncoded">
             Return a ASN.1 encoded byte stream representing the encoded object.
            
             @throws IOException if encoding fails.
        </member>
    <member name="P:Org.BouncyCastle.Ocsp.CertificateID.SerialNumber">
            return the serial number for the certificate associated
            with this request.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.#ctor(System.IO.Stream,System.IO.Stream)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.ProcessChangeCipherSpec">
             This method is called, when a change cipher spec message is received.
            
             @throws IOException If the message has an invalid content or the
                                 handshake is not in the correct state.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.Connect(Org.BouncyCastle.Crypto.Tls.ICertificateVerifyer)">
      <summary>Connects to the remote system.</summary>
      <param name="verifyer">Will be used when a certificate is received to verify
            that this certificate is accepted by the client.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.ReadApplicationData(System.Byte[],System.Int32,System.Int32)">
             Read data from the network. The method will return immediately, if there is
             still some data left in the buffer, or block until some application
             data has been read from the network.
            
             @param buf    The buffer where the data will be copied to.
             @param offset The position where the data will be placed in the buffer.
             @param len    The maximum number of bytes to read.
             @return The number of bytes read.
             @throws IOException If something goes wrong during reading data.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.WriteData(System.Byte[],System.Int32,System.Int32)">
             Send some application data to the remote system.
             <p />
             The method will handle fragmentation internally.
            
             @param buf    The buffer with the data.
             @param offset The position in the buffer where the data is placed.
             @param len    The length of the data.
             @throws IOException If something goes wrong during sending.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.FailWithError(Org.BouncyCastle.Crypto.Tls.AlertLevel,Org.BouncyCastle.Crypto.Tls.AlertDescription)">
             Terminate this connection with an alert.
             <p />
             Can be used for normal closure too.
            
             @param alertLevel       The level of the alert, an be AlertLevel.fatal or AL_warning.
             @param alertDescription The exact alert message.
             @throws IOException If alert was fatal.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.Close">
      <summary>Closes this connection</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.AssertEmpty(System.IO.MemoryStream)">
             Make sure the Stream is now empty. Fail otherwise.
            
             @param is The Stream to check.
             @throws IOException If is is not empty.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.OutputStream">
      <summary>A Stream which can be used to send data.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.InputStream">
      <summary>A Stream which can be used to read data.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Tls.TlsProtocolHandler.Stream">
      <summary>The secure bidirectional stream for this connection</summary>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.Certificate.certs">
            The certificates.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.Certificate.Parse(System.IO.Stream)">
             Parse the ServerCertificate message.
            
             @param inStr The stream where to parse from.
             @return A Certificate object with the certs, the server has sended.
             @throws IOException If something goes wrong during parsing.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.Certificate.Encode(System.IO.Stream)">
             Encodes version of the ClientCertificate message
            
             @param outStr stream to write the message to
             @throws IOException If something goes wrong
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.Certificate.#ctor(Org.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
             Private constructor from a cert array.
            
             @param certs The certs the chain should contain.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.Certificate.GetCerts">
      <returns>An array which contains the certs, this chain contains.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DHParametersGenerator.GenerateParameters">
            which Generates the p and g values from the given parameters,
            returning the DHParameters object.
            <p>
            Note: can take a while...</p></member>
    <member name="M:Org.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey">
             Generate a secret key.
            
             @return a byte array containing the key value.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesLightEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.AesLightEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.#ctor">
            Initialise to use all defaults
        </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.CreateStandardAttributeTable(System.Collections.IDictionary)">
             Create a standard attribute table from the passed in parameters - this will
             normally include contentType and messageDigest. If the constructor
             using an AttributeTable was used, entries in it for contentType and
             messageDigest will override the generated ones.
            
             @param parameters source parameters for table generation.
            
             @return a filled in IDictionary of attributes.
        </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.GetAttributes(System.Collections.IDictionary)">
            @param parameters source parameters
            @return the populated attribute table
        </member>
    <member name="F:Org.BouncyCastle.Cms.CmsSignedGenerator.Data">
            Default type for the signed data.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddAttributeCertificates(Org.BouncyCastle.X509.Store.IX509Store)">
             Add the attribute certificates contained in the passed in store to the
             generator.
            
             @param store a store of Version 2 attribute certificates
             @throws CmsException if an error occurse processing the store.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.AddSigners(Org.BouncyCastle.Cms.SignerInformationStore)">
             Add a store of precalculated signers to the generator.
            
             @param signerStore store of signers
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedGenerator.GetGeneratedDigests">
             Return a map of oids and byte arrays representing the digests calculated on the content during
             the last generate.
            
             @return a map of oids (as String objects) and byte[] representing digests.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream)">
            generate a signed object that for a CMS Signed Data object
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data".
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data". If dataOutputStream is non null the data
            being signed will be written to the stream as it is processed.
            @param out stream the CMS object is to be written to.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
            @param out stream the CMS object is to be written to.
            @param signedContentType OID for data to be signed.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.#ctor">
            base constructor
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)">
            Use a BER Set to store the recipient information
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String,Org.BouncyCastle.Crypto.CipherKeyGenerator)">
            generate an enveloped object that contains an CMS Enveloped Data
            object using the given provider and the passed in key generator.
            @throws java.io.IOException
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String)">
            generate an enveloped object that contains an CMS Enveloped Data object
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)">
            generate an enveloped object that contains an CMS Enveloped Data object
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.UserAttributeSubpacket.GetData">
            return the generic data making up the packet.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.GetInstance(System.Object)">
            Creates an instance of a TargetInformation from the given object.
            <p><code>obj</code> can be a TargetInformation or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A TargetInformation instance.
            @throws ArgumentException if the given object cannot be interpreted as TargetInformation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.GetTargetsObjects">
            Returns the targets in this target information extension.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.#ctor(Org.BouncyCastle.Asn1.X509.Targets)">
            Constructs a target information from a single targets element. 
            According to RFC 3281 only one targets element must be produced.
            
            @param targets A Targets instance.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.#ctor(Org.BouncyCastle.Asn1.X509.Target[])">
             According to RFC 3281 only one targets element must be produced. If
             multiple targets are given they must be merged in
             into one targets element.
            
             @param targets An array with {@link Targets}.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.TargetInformation.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                     SEQUENCE OF Targets
            </pre><p>
            According to RFC 3281 only one targets element must be produced. If
            multiple targets are given in the constructor they are merged into one
            targets element. If this was produced from a
            {@link Org.BouncyCastle.Asn1.Asn1Sequence} the encoding is kept.</p>
            
            @return an Asn1Object
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeIA5String">
             Constant corresponding to ia5String encoding.
            
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeBmpString">
             Constant corresponding to bmpString encoding.
            
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeUtf8String">
             Constant corresponding to utf8String encoding.
            
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.ContentTypeVisibleString">
             Constant corresponding to visibleString encoding.
            
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.DisplayText.DisplayTextMaximumSize">
             Describe constant <code>DisplayTextMaximumSize</code> here.
            
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.Int32,System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param type the desired encoding type for the text.
             @param text the text to store. Strings longer than 200
             characters are truncated.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param text the text to encapsulate. Strings longer than 200
             characters are truncated.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.DisplayText.GetString">
             Returns the stored <code>string</code> object.
            
             @return the stored text as a <code>string</code>.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeX509.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeX509.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,Org.BouncyCastle.Asn1.X500.DirectoryString,Org.BouncyCastle.Asn1.X509.IssuerSerial)">
             Constructor from a given details.
             <p /><p />
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param certRef            Reference to certificate of the person who is represented.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p />
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerAttribute.ToAsn1Object">
      <pre>
              SignerAttribute ::= SEQUENCE OF CHOICE {
                  claimedAttributes   [0] ClaimedAttributes,
                  certifiedAttributes [1] CertifiedAttributes }
            
              ClaimedAttributes ::= SEQUENCE OF Attribute
              CertifiedAttributes ::= AttributeCertificate -- as defined in RFC 3281: see clause 4.1.
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.ToAsn1Object">
      <pre>
            CommitmentTypeIndication ::= SEQUENCE {
                 commitmentTypeId   CommitmentTypeIdentifier,
                 commitmentTypeQualifier   SEQUENCE SIZE (1..MAX) OF
                         CommitmentTypeQualifier OPTIONAL }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertTemplate.ToAsn1Object">
      <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.GetInstance(System.Object)">
             return a KekRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 4
                kekID KekIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekIdentifier.GetInstance(System.Object)">
             return a KekIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KekIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekIdentifier ::= Sequence {
                keyIdentifier OCTET STRING,
                date GeneralizedTime OPTIONAL,
                other OtherKeyAttribute OPTIONAL
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.CompressedData.GetInstance(System.Object)">
             return a CompressedData object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attribute.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attribute ::= SEQUENCE {
                attrType OBJECT IDENTIFIER,
                attrValues SET OF AttributeValue
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent.ToAsn1Object">
      <pre>
            PopoDecKeyChallContent ::= SEQUENCE OF Challenge
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollRepContent.ToAsn1Object">
      <pre>
            PollRepContent ::= SEQUENCE OF SEQUENCE {
                    certReqId              INTEGER,
                    checkAfter             INTEGER,  -- time in seconds
                    reason                 PKIFreeText OPTIONAL
                }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.KeyRecRepContent.ToAsn1Object">
      <pre>
            KeyRecRepContent ::= SEQUENCE {
                                    status                  PKIStatusInfo,
                                    newSigCert          [0] CMPCertificate OPTIONAL,
                                    caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                                                      CMPCertificate OPTIONAL,
                                    keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                                                      CertifiedKeyPair OPTIONAL
                         }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemReader.ReadPemObject">
      <returns>
            A </returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.TrustAnchor.setNameConstraints(System.Byte[])">
      <summary>
            Decode the name constraints and clone them if not null.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.TrustAnchor.ToString">
      <summary>
            Returns a formatted string describing the <code>TrustAnchor</code>.
            </summary>
      <returns>a formatted string describing the <code>TrustAnchor</code></returns>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.TrustedCert">
      <summary>
            Returns the most-trusted CA certificate.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.CA">
      <summary>
            Returns the name of the most-trusted CA as an X509Name.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.CAName">
      <summary>
            Returns the name of the most-trusted CA in RFC 2253 string format.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.TrustAnchor.CAPublicKey">
      <summary>
            Returns the public key of the most-trusted CA.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsMac.CalculateMac(Org.BouncyCastle.Crypto.Tls.ContentType,System.Byte[],System.Int32,System.Int32)">
             Calculate the mac for some given data.
             <p />
             TlsMac will keep track of the sequence number internally.
            
             @param type    The message type of the message.
             @param message A byte-buffer containing the message.
             @param offset  The number of bytes to skip, before the message starts.
             @param len     The length of the message.
             @return A new byte-buffer containing the mac value.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Tls.TlsMac.Size">
            @return The Keysize of the mac.
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.ByteQueue.InitBufSize">
            The initial size for our buffer.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.ByteQueue.NextTwoPow(System.Int32)">
      <returns>The smallest number which can be written as 2^x which is bigger than i.</returns>
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.ByteQueue.databuf">
            The buffer where we store our data.
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.ByteQueue.skipped">
            How many bytes at the beginning of the buffer are skipped.
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Tls.ByteQueue.available">
            How many bytes in the buffer are valid data.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.ByteQueue.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Read data from the buffer.</summary>
      <param name="buf">The buffer where the read data will be copied to.</param>
      <param name="offset">How many bytes to skip at the beginning of buf.</param>
      <param name="len">How many bytes to read at all.</param>
      <param name="skip">How many bytes from our data to skip.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.ByteQueue.AddData(System.Byte[],System.Int32,System.Int32)">
      <summary>Add some data to our buffer.</summary>
      <param name="data">A byte-array to read data from.</param>
      <param name="offset">How many bytes to skip at the beginning of the array.</param>
      <param name="len">How many bytes to read from the array.</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.ByteQueue.RemoveData(System.Int32)">
      <summary>Remove some bytes from our data from the beginning.</summary>
      <param name="i">How many bytes to remove.</param>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Tls.ByteQueue.Available">
      <summary>The number of bytes which are available in this buffer.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes Generated from
             the derivation function.
            
             @throws DataLengthException if the out buffer is too small.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.Digest">
            return the underlying digest.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable)">
            generate a signed object that for a CMS Signed Data object
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(System.String,Org.BouncyCastle.Cms.CmsProcessable,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object  - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data".
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataGenerator.GenerateCounterSigners(Org.BouncyCastle.Cms.SignerInformation)">
             generate a set of one or more SignerInformation objects representing counter signatures on
             the passed in SignerInformation object.
            
             @param signer the signer to be countersigned
             @param sigProvider the provider to be used for counter signing.
             @return a store containing the signers.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.InputStreamPacket.GetInputStream">
      <summary>Note: you can only read from this once...</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.PublicSubkeyPacket.#ctor(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.DateTime,Org.BouncyCastle.Bcpg.IBcpgKey)">
      <summary>Construct a version 4 public subkey packet.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuerSerial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             IssuerSerial  ::=  Sequence {
                  issuer         GeneralNames,
                  serial         CertificateSerialNumber,
                  issuerUid      UniqueIdentifier OPTIONAL
             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.MessageImprint.GetInstance(System.Object)">
            @param o
            @return a MessageImprint object.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.MessageImprint.ToAsn1Object">
      <pre>
               MessageImprint ::= SEQUENCE  {
                  hashAlgorithm                AlgorithmIdentifier,
                  hashedMessage                OCTET STRING  }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponseBytes.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseBytes ::=       Sequence {
                responseType   OBJECT IDENTIFIER,
                response       OCTET STRING }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicOcspResponse       ::= Sequence {
                 tbsResponseData      ResponseData,
                 signatureAlgorithm   AlgorithmIdentifier,
                 signature            BIT STRING,
                 certs                [0] EXPLICIT Sequence OF Certificate OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.#ctor(System.String,System.Int32,System.Int32)">
             Constructor from a given details.
             <p /><p />
             value = amount�10^exponent
            
             @param currency The currency. Must be the ISO code.
             @param amount   The amount
             @param exponent The exponent
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                MonetaryLimitSyntax ::= SEQUENCE
                {
                  currency PrintableString (SIZE(3)),
                  amount INTEGER,
                  exponent INTEGER
                }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.GetInstance(System.Object)">
             return a RecipientKeyIdentifier object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientKeyIdentifier ::= Sequence {
                 subjectKeyIdentifier SubjectKeyIdentifier,
                 date GeneralizedTime OPTIONAL,
                 other OtherKeyAttribute OPTIONAL
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.GetInstance(System.Object)">
             return a RecipientIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiBody.ToAsn1Object">
      <pre>
            PkiBody ::= CHOICE {       -- message-specific body elements
                   ir       [0]  CertReqMessages,        --Initialization Request
                   ip       [1]  CertRepMessage,         --Initialization Response
                   cr       [2]  CertReqMessages,        --Certification Request
                   cp       [3]  CertRepMessage,         --Certification Response
                   p10cr    [4]  CertificationRequest,   --imported from [PKCS10]
                   popdecc  [5]  POPODecKeyChallContent, --pop Challenge
                   popdecr  [6]  POPODecKeyRespContent,  --pop Response
                   kur      [7]  CertReqMessages,        --Key Update Request
                   kup      [8]  CertRepMessage,         --Key Update Response
                   krr      [9]  CertReqMessages,        --Key Recovery Request
                   krp      [10] KeyRecRepContent,       --Key Recovery Response
                   rr       [11] RevReqContent,          --Revocation Request
                   rp       [12] RevRepContent,          --Revocation Response
                   ccr      [13] CertReqMessages,        --Cross-Cert. Request
                   ccp      [14] CertRepMessage,         --Cross-Cert. Response
                   ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
                   cann     [16] CertAnnContent,         --Certificate Ann.
                   rann     [17] RevAnnContent,          --Revocation Ann.
                   crlann   [18] CRLAnnContent,          --CRL Announcement
                   pkiconf  [19] PKIConfirmContent,      --Confirmation
                   nested   [20] NestedMessageContent,   --Nested Message
                   genm     [21] GenMsgContent,          --General Message
                   genp     [22] GenRepContent,          --General Response
                   error    [23] ErrorMsgContent,        --Error Message
                   certConf [24] CertConfirmContent,     --Certificate confirm
                   pollReq  [25] PollReqContent,         --Polling request
                   pollRep  [26] PollRepContent          --Polling response
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CrlAnnContent.ToAsn1Object">
      <pre>
            CrlAnnContent ::= SEQUENCE OF CertificateList
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.#ctor(System.Int32,System.String,System.String,System.Byte[])">
             Constructs a holder for v2 attribute certificates with a hash value for
             some type of object.
             <p><code>digestedObjectType</code> can be one of the following:
             <ul><li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li><li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li><li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li></ul></p><p>This cannot be used if a v1 attribute certificate is used.</p>
            
             @param digestedObjectType The digest object type.
             @param digestAlgorithm The algorithm identifier for the hash.
             @param otherObjectTypeID The object type ID if
                        <code>digestedObjectType</code> is
                        <code>otherObjectDigest</code>.
             @param objectDigest The hash value.
        </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.GetObjectDigest">
             Returns the hash if an object digest info is used.
            
             @return The hash or <code>null</code> if no object digest info is set.
        </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.GetEntityNames">
             Return any principal objects inside the attribute certificate holder entity names field.
            
             @return an array of IPrincipal objects (usually X509Name), null if no entity names field is set.
        </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateHolder.GetIssuer">
             Return the principals associated with the issuer attached to this holder
            
             @return an array of principals, null if no BaseCertificateID is set.
        </member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.DigestedObjectType">
             Returns the digest object type if an object digest info is used.
             <p><ul><li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li><li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li><li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li></ul></p>
            
             @return The digest object type or -1 if no object digest info is set.
        </member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.DigestAlgorithm">
             Returns the other object type ID if an object digest info is used.
            
             @return The other object type ID or <code>null</code> if no object
                     digest info is set.
        </member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.OtherObjectTypeID">
             Returns the digest algorithm ID if an object digest info is used.
            
             @return The digest algorithm ID or <code>null</code> if no object
                     digest info is set.
        </member>
    <member name="P:Org.BouncyCastle.X509.AttributeCertificateHolder.SerialNumber">
             Return the serial number associated with the issuer attached to this holder.
            
             @return the certificate serial number, null if no BaseCertificateID is set.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.#ctor(System.IO.TextWriter)">
             Base constructor.
            
             @param out output stream to use.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemWriter.GetOutputSize(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Return the number of bytes or characters required to contain the
             passed in object if it is PEM encoded.
            
             @param obj pem object to be output
             @return an estimate of the number of bytes
        </member>
    <member name="M:Org.BouncyCastle.Pkix.ReasonsMask.#ctor(System.Int32)">
      <summary>
            Constructs are reason mask with the reasons.
            </summary>
      <param name="reasons">The reasons.</param>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.ReasonsMask.#ctor">
      <summary>
            A reason mask with no reason.
            </summary>
    </member>
    <member name="F:Org.BouncyCastle.Pkix.ReasonsMask.AllReasons">
      <summary>
            A mask with all revocation reasons.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.ReasonsMask.AddReasons(Org.BouncyCastle.Pkix.ReasonsMask)">
             Adds all reasons from the reasons mask to this mask.
            
             @param mask The reasons mask to add.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.ReasonsMask.Intersect(Org.BouncyCastle.Pkix.ReasonsMask)">
      <summary>
            Intersects this mask with the given reasons mask.
            </summary>
      <param name="mask">mask The mask to intersect with.</param>
      <returns>The intersection of this and teh given mask.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.ReasonsMask.HasNewReasons(Org.BouncyCastle.Pkix.ReasonsMask)">
      <summary>
            Returns <c>true</c> if the passed reasons mask has new reasons.
            </summary>
      <param name="mask">The reasons mask which should be tested for new reasons.</param>
      <returns>
        <c>true</c> if the passed reasons mask has new reasons.</returns>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.ReasonsMask.IsAllReasons">
      <summary>
            Returns <code>true</code> if this reasons mask contains all possible
            reasons.
            </summary>
      <returns>true if this reasons mask contains all possible reasons.
            </returns>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.ReasonsMask.Reasons">
      <summary>
            Returns the reasons in this mask.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.UnionIPRange(System.Byte[],System.Byte[])">
             Calculates the union if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the union of both addresses.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.IntersectIPRange(System.Byte[],System.Byte[])">
             Calculates the interesction if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the single IP address with its subnet
                     mask as a byte array or an empty <code>Set</code>.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.IpWithSubnetMask(System.Byte[],System.Byte[])">
             Concatenates the IP address with its subnet mask.
            
             @param ip         The IP address.
             @param subnetMask Its subnet mask.
             @return The concatenated IP address with its subnet mask.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.ExtractIPsAndSubnetMasks(System.Byte[],System.Byte[])">
             Splits the IP addresses and their subnet mask.
            
             @param ipWithSubmask1 The first IP address with the subnet mask.
             @param ipWithSubmask2 The second IP address with the subnet mask.
             @return An array with two elements. Each element contains the IP address
                     and the subnet mask in this order.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.MinMaxIPs(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
             Based on the two IP addresses and their subnet masks the IP range is
             computed for each IP address - subnet mask pair and returned as the
             minimum IP address and the maximum address of the range.
            
             @param ip1         The first IP address.
             @param subnetmask1 The subnet mask of the first IP address.
             @param ip2         The second IP address.
             @param subnetmask2 The subnet mask of the second IP address.
             @return A array with two elements. The first/second element contains the
                     min and max IP address of the first/second IP address and its
                     subnet mask.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.IsIPConstrained(System.Byte[],System.Byte[])">
             Checks if the IP address <code>ip</code> is constrained by
             <code>constraint</code>.
            
             @param ip         The IP address.
             @param constraint The constraint. This is an IP address concatenated with
                               its subnetmask.
             @return <code>true</code> if constrained, <code>false</code>
                     otherwise.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.AddExcludedSubtree(Org.BouncyCastle.Asn1.X509.GeneralSubtree)">
             Adds a subtree to the excluded ISet of these name constraints.
            
             @param subtree A subtree with an excluded GeneralName.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.Max(System.Byte[],System.Byte[])">
             Returns the maximum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The maximum IP address.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.Min(System.Byte[],System.Byte[])">
             Returns the minimum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The minimum IP address.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.CompareTo(System.Byte[],System.Byte[])">
             Compares IP address <code>ip1</code> with <code>ip2</code>. If ip1
             is equal to ip2 0 is returned. If ip1 is bigger 1 is returned, -1
             otherwise.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return 0 if ip1 is equal to ip2, 1 if ip1 is bigger, -1 otherwise.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.Or(System.Byte[],System.Byte[])">
             Returns the logical OR of the IP addresses <code>ip1</code> and
             <code>ip2</code>.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The OR of <code>ip1</code> and <code>ip2</code>.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixNameConstraintValidator.StringifyIP(System.Byte[])">
             Stringifies an IPv4 or v6 address with subnet mask.
            
             @param ip The IP with subnet mask.
             @return The stringified IP address.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.Init(System.Boolean)">
                     * Initializes the internal state of this <code>PKIXCertPathChecker</code>.
                     * <p>
                     * The <code>forward</code> flag specifies the order that certificates
                     * will be passed to the {@link #check check} method (forward or reverse). A
                     * <code>PKIXCertPathChecker</code><b>must</b> support reverse checking
                     * and <b>may</b> support forward checking.
            		 * </p>
                     * 
                     * @param forward
                     *            the order that certificates are presented to the
                     *            <code>check</code> method. If <code>true</code>,
                     *            certificates are presented from target to most-trusted CA
                     *            (forward); if <code>false</code>, from most-trusted CA to
                     *            target (reverse).
                     * @exception CertPathValidatorException
                     *                if this <code>PKIXCertPathChecker</code> is unable to
                     *                check certificates in the specified order; it should never
                     *                be thrown if the forward flag is false since reverse
                     *                checking must be supported
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.IsForwardCheckingSupported">
            Indicates if forward checking is supported. Forward checking refers to
            the ability of the <code>PKIXCertPathChecker</code> to perform its
            checks when certificates are presented to the <code>check</code> method
            in the forward direction (from target to most-trusted CA).
            
            @return <code>true</code> if forward checking is supported,
                    <code>false</code> otherwise
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.GetSupportedExtensions">
                     * Returns an immutable <code>Set</code> of X.509 certificate extensions
                     * that this <code>PKIXCertPathChecker</code> supports (i.e. recognizes,
                     * is able to process), or <code>null</code> if no extensions are
                     * supported.
                     * <p>
                     * Each element of the set is a <code>String</code> representing the
                     * Object Identifier (OID) of the X.509 extension that is supported. The OID
                     * is represented by a set of nonnegative integers separated by periods.
                     * </p><p>
                     * All X.509 certificate extensions that a <code>PKIXCertPathChecker</code>
                     * might possibly be able to process should be included in the set.
            		 * </p>
                     * 
                     * @return an immutable <code>Set</code> of X.509 extension OIDs (in
                     *         <code>String</code> format) supported by this
                     *         <code>PKIXCertPathChecker</code>, or <code>null</code> if no
                     *         extensions are supported
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathChecker.Clone">
            Returns a clone of this object. Calls the <code>Object.clone()</code>
            method. All subclasses which maintain state must support and override
            this method, if necessary.
            
            @return a copy of this <code>PKIXCertPathChecker</code></member>
    <member name="P:Org.BouncyCastle.Ocsp.RevokedStatus.RevocationReason">
            return the revocation reason. Note: this field is optional, test for it
            with hasRevocationReason() first.
            @exception InvalidOperationException if a reason is asked for and none is avaliable
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.AddRequest(Org.BouncyCastle.Ocsp.CertificateID)">
             Add a request for the given CertificateID.
            
             @param certId certificate ID of interest
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReqGenerator.Generate">
             Generate an unsigned request
            
             @return the OcspReq
             @throws OcspException
        </member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReqGenerator.SignatureAlgNames">
             Return an IEnumerable of the signature names supported by the generator.
            
             @return an IEnumerable containing recognised names.
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.#ctor(Org.BouncyCastle.Ocsp.RespID)">
            basic constructor
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(Org.BouncyCastle.Ocsp.CertificateID,Org.BouncyCastle.Ocsp.CertificateStatus)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param certStatus status of the certificate - null if okay
        </member>
    <member name="P:Org.BouncyCastle.Ocsp.BasicOcspRespGenerator.SignatureAlgNames">
             Return an IEnumerable of the signature names supported by the generator.
            
             @return an IEnumerable containing recognised names.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.SetBufferSize(System.Int32)">
      <summary>Set the underlying string size for encapsulated data.</summary>
      <param name="bufferSize">Length of octet strings to buffer the data.</param>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)">
      <summary>Use a BER Set to store the recipient information.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String,Org.BouncyCastle.Crypto.CipherKeyGenerator)">
      <summary>
            Generate an enveloped object that contains an CMS Enveloped Data
            object using the passed in key generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String)">
            generate an enveloped object that contains an CMS Enveloped Data object
            @throws IOException
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)">
            generate an enveloped object that contains an CMS Enveloped Data object
            @throws IOException
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.LiteralDataPacket.Format">
      <summary>The format tag value.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.LiteralDataPacket.ModificationTime">
      <summary>The modification time of the file in milli-seconds (since Jan 1, 1970 UTC)</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
            @param in
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspResponse ::= Sequence {
                responseStatus         OcspResponseStatus,
                responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Icao.LdsVersionInfo.ToAsn1Object">
      <pre>
            LDSVersionInfo ::= SEQUENCE {
               ldsVersion PRINTABLE STRING
               unicodeVersion PRINTABLE STRING
             }
            </pre>
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentHints.ToAsn1Object">
      <pre>
            ContentHints ::= SEQUENCE {
              contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
              contentType ContentType }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedKey.ToAsn1Object">
      <pre>
               EncryptedKey ::= CHOICE {
                   encryptedValue        EncryptedValue, -- deprecated
                   envelopedData     [0] EnvelopedData }
                   -- The encrypted private key MUST be placed in the envelopedData
                   -- encryptedContentInfo encryptedContent OCTET STRING.
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevRepContent.ToAsn1Object">
      <pre>
            RevRepContent ::= SEQUENCE {
                   status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
                   -- in same order as was sent in RevReqContent
                   revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,
                   -- IDs for which revocation was requested
                   -- (same order as status)
                   crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList OPTIONAL
                   -- the resulting CRLs (there may be more than one)
              }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="P:Org.BouncyCastle.Tsp.TspValidationException.FailureCode">
             Return the failure code associated with this exception - if one is set.
            
             @return the failure code if set, -1 otherwise.
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.P">
    </member>
    <member name="F:Org.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.s">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.findFirstPrimes(System.Int32)">
             Finds the first 'count' primes starting with 3
            
             @param count
                        the number of primes to find
             @return a vector containing the found primes as Integer
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaBlindingEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the RSA blinding algorithm.
            
             @param in    the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @throws DataLengthException the input block is too large.
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.engine">
            Field engine 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.parameters">
            Field param 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.iv">
            Field iv 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.forWrapping">
            Field forWrapping 
        </member>
    <member name="F:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.IV2">
            Field IV2           
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Engines.RC2WrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetInputBlockSize">
             Returns the input block size of this algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#GetInputBlockSize()
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetOutputBlockSize">
             Returns the output block size of this algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#GetOutputBlockSize()
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single Block using the Naccache-Stern algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#ProcessBlock(byte[],
                  int, int)
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.AddCryptedBlocks(System.Byte[],System.Byte[])">
             Adds the contents of two encrypted blocks mod sigma
            
             @param block1
                        the first encrypted block
             @param block2
                        the second encrypted block
             @return encrypt((block1 + block2) mod sigma)
             @throws InvalidCipherTextException
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessData(System.Byte[])">
             Convenience Method for data exchange with the cipher.
            
             Determines blocksize and splits data to blocksize.
            
             @param data the data to be processed
             @return the data after it went through the NaccacheSternEngine.
             @throws InvalidCipherTextException
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.NaccacheSternEngine.chineseRemainder(System.Collections.IList,System.Collections.IList)">
             Computes the integer x that is expressed through the given primes and the
             congruences with the chinese remainder theorem (CRT).
            
             @param congruences
                        the congruences c_i
             @param primes
                        the primes p_i
             @return an integer x for that x % p_i == c_i
        </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.#ctor">
            Initialise to use all defaults
        </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.createStandardAttributeTable(System.Collections.IDictionary)">
             Create a standard attribute table from the passed in parameters - this will
             normally include contentType, signingTime, and messageDigest. If the constructor
             using an AttributeTable was used, entries in it for contentType, signingTime, and
             messageDigest will override the generated ones.
            
             @param parameters source parameters for table generation.
            
             @return a filled in Hashtable of attributes.
        </member>
    <member name="M:Org.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.GetAttributes(System.Collections.IDictionary)">
            @param parameters source parameters
            @return the populated attribute table
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String)">
            Generate an object that contains an CMS Compressed Data
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.KeyExpirationTime.Time">
             Return the number of seconds after creation time a key is valid for.
            
             @return second count for key validity.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampReq.ToAsn1Object">
      <pre>
            TimeStampReq ::= SEQUENCE  {
             version                      INTEGER  { v1(1) },
             messageImprint               MessageImprint,
               --a hash algorithm OID and the hash value of the data to be
               --time-stamped
             reqPolicy             TSAPolicyId              OPTIONAL,
             nonce                 INTEGER                  OPTIONAL,
             certReq               BOOLEAN                  DEFAULT FALSE,
             extensions            [0] IMPLICIT Extensions  OPTIONAL
            }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CrlID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlID ::= Sequence {
                crlUrl               [0]     EXPLICIT IA5String OPTIONAL,
                crlNum               [1]     EXPLICIT Integer OPTIONAL,
                crlTime              [2]     EXPLICIT GeneralizedTime OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Esf.SignerLocation.ToAsn1Object">
      <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
            
               DirectoryString ::= CHOICE {
                     teletexString           TeletexString (SIZE (1..MAX)),
                     printableString         PrintableString (SIZE (1..MAX)),
                     universalString         UniversalString (SIZE (1..MAX)),
                     utf8String              UTF8String (SIZE (1.. MAX)),
                     bmpString               BMPString (SIZE (1..MAX)) }
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.OobCertHash.ToAsn1Object">
      <pre>
            OobCertHash ::= SEQUENCE {
                                 hashAlg     [0] AlgorithmIdentifier     OPTIONAL,
                                 certId      [1] CertId                  OPTIONAL,
                                 hashVal         BIT STRING
                                 -- hashVal is calculated over the Der encoding of the
                                 -- self-signed certificate with the identifier certID.
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenRepContent.ToAsn1Object">
      <pre>
            GenRepContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertResponse.ToAsn1Object">
      <pre>
            CertResponse ::= SEQUENCE {
                                       certReqId           INTEGER,
                                       -- to match this response with corresponding request (a value
                                       -- of -1 is to be used if certReqId is not specified in the
                                       -- corresponding request)
                                       status              PKIStatusInfo,
                                       certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
                                       rspInfo             OCTET STRING        OPTIONAL
                                       -- analogous to the id-regInfo-utf8Pairs string defined
                                       -- for regInfo in CertReqMsg [CRMF]
                        }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509CertPairParser.ReadCertPair(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input">
      </param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CertPairParser.ReadCertPairs(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input">
      </param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[])">
             Encode the input data producing a URL safe base 64 encoded byte array.
            
             @return a byte array containing the URL safe base 64 encoded data.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[])">
             Decode the URL safe base 64 encoded input data - white space will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[],System.IO.Stream)">
             decode the URL safe base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String)">
             decode the URL safe base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String,System.IO.Stream)">
             Decode the URL safe base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.SortCerts(System.Collections.IList)">
            @param certs
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.#ctor(System.Collections.ICollection)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
             @param type the standard name of the type of Certificatesin this path
            
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.#ctor(System.IO.Stream,System.String)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
            
             @param type the standard name of the type of Certificatesin this path
            
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.Equals(System.Object)">
             Compares this certification path for equality with the specified object.
             Two CertPaths are equal if and only if their types are equal and their
             certificate Lists (and by implication the Certificates in those Lists)
             are equal. A CertPath is never equal to an object that is not a CertPath.<br /><br />
             This algorithm is implemented by this method. If it is overridden, the
             behavior specified here must be maintained.
            
             @param other
                        the object to test for equality with this certification path
            
             @return true if the specified object is equal to this certification path,
                     false otherwise
            
             @see Object#hashCode() Object.hashCode()
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.GetEncoded">
             Returns the encoded form of this certification path, using
             the default encoding.
            
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error occurs
            
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPath.GetEncoded(System.String)">
             Returns the encoded form of this certification path, using
             the specified encoding.
            
             @param encoding the name of the encoding to use
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error
             occurs or the encoding requested is not supported
            
        </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPath.Encodings">
             Returns an iteration of the encodings supported by this
             certification path, with the default encoding
             first. Attempts to modify the returned Iterator via its
             remove method result in an UnsupportedOperationException.
            
             @return an Iterator over the names of the supported encodings (as Strings)
            
        </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixCertPath.Certificates">
      <summary>
            Returns the list of certificates in this certification
            path.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemWriter.#ctor(System.IO.TextWriter)">
      <param name="writer">The TextWriter object to write the output to.</param>
    </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader)">
             Create a new PemReader
            
             @param reader the Reader
        </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader,Org.BouncyCastle.OpenSsl.IPasswordFinder)">
             Create a new PemReader with a password finder
            
             @param reader the Reader
             @param pFinder the password finder
        </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.ReadCertificate(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509Certificate.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.ReadCrl(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509CRL.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.ReadCertificateRequest(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS10 certification request.
            
             @return the certificate request.
             @throws IOException if an I/O error occured
        </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.ReadAttributeCertificate(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509 Attribute Certificate.
            
             @return the X509 Attribute Certificate
             @throws IOException if an I/O error occured
        </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.ReadPkcs7(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS7 object. This returns a ContentInfo object suitable for use with the CMS
             API.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
    <member name="M:Org.BouncyCastle.OpenSsl.PemReader.ReadPrivateKey(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
            Read a Key Pair
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspResp.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsAuthentication.NotifyServerCertificate(Org.BouncyCastle.Crypto.Tls.Certificate)">
      <summary>
            Called by the protocol handler to report the server certificate.
            </summary>
      <param name="serverCertificate">The server  received</param>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsAuthentication.GetClientCredentials(Org.BouncyCastle.Crypto.Tls.CertificateRequest)">
      <summary>
            Return client credentials in response to server's certificate request
            </summary>
      <param name="certificateRequest">
            A  containing server certificate request details
            </param>
      <returns>
            A  to be used for client authentication
            (or <c>null</c> for no client authentication)
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <param name="bcpgIn">The stream to read the packet from.</param>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaPublicBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.PersonalData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(System.String)">
             Creates a new <code>PolicyQualifierInfo</code> containing a
             cPSuri qualifier.
            
             @param cps the CPS (certification practice statement) uri as a
             <code>string</code>.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyQualifierInfo.ToAsn1Object">
             Returns a Der-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.NameConstraints.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from a given details.
            
             <p>permitted and excluded are Vectors of GeneralSubtree objects.</p>
            
             @param permitted Permitted subtrees
             @param excluded Excluded subtrees
        </member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.PreferSignedData">
            general preferences
        </member>
    <member name="F:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.DesCbc">
            encryption algorithms preferences
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Smime.SmimeCapabilities.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapabilities ::= Sequence OF SMIMECapability
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.AttributePkcs.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ResponderID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponderID ::= CHOICE {
                 byName          [1] Name,
                 byKey           [2] KeyHash }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.IdeaCbcPar.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            IDEA-CBCPar ::= Sequence {
                                 iv    OCTET STRING OPTIONAL -- exactly 8 octets
                             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p />
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p />
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p />
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.GetContentsOfAdmissions">
            @return Returns the contentsOfAdmissions.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.AdmissionAuthority">
            @return Returns the admissionAuthority if present, null otherwise.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertIDv2.ToAsn1Object">
      <pre>
             EssCertIDv2 ::=  SEQUENCE {
                 hashAlgorithm     AlgorithmIdentifier
                          DEFAULT {algorithm id-sha256},
                 certHash          Hash,
                 issuerSerial      IssuerSerial OPTIONAL
             }
            
             Hash ::= OCTET STRING
            
             IssuerSerial ::= SEQUENCE {
                 issuer         GeneralNames,
                 serialNumber   CertificateSerialNumber
             }
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertRequest.ToAsn1Object">
      <pre>
            CertRequest ::= SEQUENCE {
                                 certReqId     INTEGER,          -- ID for matching request and reply
                                 certTemplate  CertTemplate,  -- Selected fields of cert to be issued
                                 controls      Controls OPTIONAL }   -- Attributes affecting issuance
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.GetInstance(System.Object)">
             return a RecipientEncryptedKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientEncryptedKey ::= SEQUENCE {
                rid KeyAgreeRecipientIdentifier,
                encryptedKey EncryptedKey
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PbmParameter.ToAsn1Object">
      <pre>
             PbmParameter ::= SEQUENCE {
                                   salt                OCTET STRING,
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this string to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   owf                 AlgorithmIdentifier,
                                   -- AlgId for a One-Way Function (SHA-1 recommended)
                                   iterationCount      INTEGER,
                                   -- number of times the OWF is applied
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this integer to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   mac                 AlgorithmIdentifier
                                   -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],
               }   -- or HMAC [RFC2104, RFC2202])
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.ToAsn1Object">
      <pre>
            InfoTypeAndValue ::= SEQUENCE {
                                    infoType               OBJECT IDENTIFIER,
                                    infoValue              ANY DEFINED BY infoType  OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.Reset">
            reset the generator
        </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddCrl(Org.BouncyCastle.X509.X509Crl)">
             Add the CRLEntry objects contained in a previous CRL.
            
             @param other the X509Crl to source the other entries from.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.SetSignatureAlgorithm(System.String)">
             Set the signature algorithm. This can be either a name or an oid, names
             are treated as case insensitive.
            
             @param signatureAlgorithm string representation of the algorithm name.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
    <member name="P:Org.BouncyCastle.X509.X509V2CrlGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetTbsRequest">
            Return the DER encoding of the tbsRequest field.
            @return DER encoding of tbsRequest
            @throws OcspException in the event of an encoding error.
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetCertificates(System.String)">
             If the request is signed return a possibly empty CertStore containing the certificates in the
             request. If the request is not signed the method returns null.
            
             @return null if not signed, a CertStore otherwise
             @throws OcspException
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.OcspReq.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReq.SignatureAlgOid">
            return the object identifier representing the signature algorithm
        </member>
    <member name="P:Org.BouncyCastle.Ocsp.OcspReq.IsSigned">
             Return whether or not this request is signed.
            
             @return true if signed false otherwise.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.ReturnByte(System.Byte)">
             encrypt/decrypt a single byte returning the result.
            
             @param in the byte to be processed.
             @return the result of processing the input byte.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process a block of bytes from in putting the result into out.
            
             @param in the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param out the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data stars at.
             @exception DataLengthException if the output buffer is too small.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.StreamBlockCipher.Reset">
            reset the underlying cipher. This leaves it in the same state
            it was at after the last init (if there was one).
        </member>
    <member name="P:Org.BouncyCastle.Crypto.StreamBlockCipher.AlgorithmName">
             return the name of the algorithm we are wrapping.
            
             @return the name of the algorithm we are wrapping.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedHelper.GetDigestAlgName(System.String)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedHelper.GetEncryptionAlgName(System.String)">
            Return the digest encryption algorithm using one of the standard
            JCA string representations rather than the algorithm identifier (if
            possible).
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ExtendedKeyUsage.GetAllUsages">
            Returns all extended key usages.
            The returned ArrayList contains DerObjectIdentifier instances.
            @return An ArrayList with all key purposes.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificateInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
              }
            
              AttCertVersion ::= Integer { v2(1) }
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  issuerAndSerialNumber IssuerAndSerialNumber,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.Request.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Request         ::=     Sequence {
                reqCert                     CertID,
                singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.SinglePubInfo.ToAsn1Object">
      <pre>
            SinglePubInfo ::= SEQUENCE {
                   pubMethod    INTEGER {
                      dontCare    (0),
                      x500        (1),
                      web         (2),
                      ldap        (3) },
                  pubLocation  GeneralName OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.ToAsn1Object">
      <pre>
            PopoSigningKeyInput ::= SEQUENCE {
                   authInfo             CHOICE {
                                            sender              [0] GeneralName,
                                            -- used only if an authenticated identity has been
                                            -- established for the sender (e.g., a DN from a
                                            -- previously-issued and currently-valid certificate
                                            publicKeyMac        PKMacValue },
                                            -- used if no authenticated GeneralName currently exists for
                                            -- the sender; publicKeyMac contains a password-based MAC
                                            -- on the DER-encoded value of publicKey
                   publicKey           SubjectPublicKeyInfo }  -- from CertTemplate
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.Sender">
            Returns the sender field, or null if authInfo is publicKeyMac 
        </member>
    <member name="P:Org.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.PublicKeyMac">
            Returns the publicKeyMac field, or null if authInfo is sender 
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.OptionalValidity.ToAsn1Object">
      <pre>
            OptionalValidity ::= SEQUENCE {
                                   notBefore  [0] Time OPTIONAL,
                                   notAfter   [1] Time OPTIONAL } --at least one MUST be present
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampAndCrl.ToAsn1Object">
      <pre>
            TimeStampAndCRL ::= SEQUENCE {
                timeStamp   TimeStampToken,          -- according to RFC 3161
                crl         CertificateList OPTIONAL -- according to RFC 5280
             }
            </pre>
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.GetInstance(System.Object)">
             return a OtherRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OtherRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherRecipientInfo ::= Sequence {
               oriType OBJECT IDENTIFIER,
               oriValue ANY DEFINED BY oriType }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthEnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.ToAsn1Object">
      <pre>
            CertifiedKeyPair ::= SEQUENCE {
                                             certOrEncCert       CertOrEncCert,
                                             privateKey      [0] EncryptedValue      OPTIONAL,
                                             -- see [CRMF] for comment on encoding
                                             publicationInfo [1] PKIPublicationInfo  OPTIONAL
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.IX509AttributeCertificate.GetAttributes">
      <summary>Return the attributes contained in the attribute block in the certificate.</summary>
      <returns>An array of attributes.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.IX509AttributeCertificate.GetAttributes(System.String)">
      <summary>Return the attributes with the same type as the passed in oid.</summary>
      <param name="oid">The object identifier we wish to match.</param>
      <returns>An array of matched attributes, null if there is no match.</returns>
    </member>
    <member name="M:Org.BouncyCastle.X509.IX509AttributeCertificate.GetEncoded">
      <summary>Return an ASN.1 encoded byte array representing the attribute certificate.</summary>
      <returns>An ASN.1 encoded byte array.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.IX509AttributeCertificate.Version">
      <summary>The version number for the certificate.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.IX509AttributeCertificate.SerialNumber">
      <summary>The serial number for the certificate.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.IX509AttributeCertificate.NotBefore">
      <summary>The UTC DateTime before which the certificate is not valid.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.IX509AttributeCertificate.NotAfter">
      <summary>The UTC DateTime after which the certificate is not valid.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.IX509AttributeCertificate.Holder">
      <summary>The holder of the certificate.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.IX509AttributeCertificate.Issuer">
      <summary>The issuer details for the certificate.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertPathValidator.Validate(Org.BouncyCastle.Pkix.PkixCertPath,Org.BouncyCastle.Pkix.PkixParameters)">
            Validates an attribute certificate with the given certificate path.
            
            <p><code>params</code> must be an instance of
            <code>ExtendedPkixParameters</code>.
            </p><p>
            The target constraints in the <code>params</code> must be an
            <code>X509AttrCertStoreSelector</code> with at least the attribute
            certificate criterion set. Obey that also target informations may be
            necessary to correctly validate this attribute certificate.
            </p><p>
            The attribute certificate issuer must be added to the trusted attribute
            issuers with {@link ExtendedPkixParameters#setTrustedACIssuers(Set)}.
            </p>
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param params The PKIX parameters.
            @return A <code>PKIXCertPathValidatorResult</code> of the result of
                    validating the <code>certPath</code>.
            @throws InvalidAlgorithmParameterException if <code>params</code> is
                        inappropriate for this validator.
            @throws CertPathValidatorException if the verification fails.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.G">
            @return Returns the g.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.LowerSigmaBound">
            @return Returns the lowerSigmaBound.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.Modulus">
            @return Returns the n.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(System.Collections.IDictionary,System.Byte[])">
             Content with detached signature, digests precomputed
            
             @param hashes a map of precomputed digests for content indexed by name of hash.
             @param sigBlock the signature object.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(Org.BouncyCastle.Cms.CmsProcessable,System.IO.Stream)">
             base constructor - content with detached signature.
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.ReplaceSigners(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.Cms.SignerInformationStore)">
             Replace the signerinformation store associated with this
             CmsSignedData object with the new one passed in. You would
             probably only want to do this if you wanted to change the unsigned
             attributes associated with a signer, or perhaps delete one.
            
             @param signedData the signed data object to be used as a base.
             @param signerInformationStore the new signer information store to use.
             @return a new signed data object.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedData.ReplaceCertificatesAndCrls(Org.BouncyCastle.Cms.CmsSignedData,Org.BouncyCastle.X509.Store.IX509Store,Org.BouncyCastle.X509.Store.IX509Store,Org.BouncyCastle.X509.Store.IX509Store)">
             Replace the certificate and CRL information associated with this
             CmsSignedData object with the new one passed in.
            
             @param signedData the signed data object to be used as a base.
             @param x509Certs the new certificates to be used.
             @param x509Crls the new CRLs to be used.
             @return a new signed data object.
             @exception CmsException if there is an error processing the stores
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedData.Version">
      <summary>Return the version number for this object.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedData.SignedContentType">
      <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedData.ContentInfo">
            return the ContentInfo
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.GetSecKeyData">
            @return byte[]
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.EncAlgorithm">
            @return int
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.S2k">
            @return S2k
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.Version">
            @return int
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.Sig.KeyFlags.Flags">
      <summary>
            Return the flag values contained in the first 4 octets (note: at the moment
            the standard only uses the first one).
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.S2k.GetIV">
      <summary>The IV for the key generation algorithm.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.S2k.HashAlgorithm">
      <summary>The hash algorithm.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.S2k.IterationCount">
      <summary>The iteration count</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.S2k.ProtectionMode">
      <summary>The protection mode - only if GnuDummyS2K</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.KeyAlgorithm">
      <summary>The encryption algorithm tag.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.OnePassSignaturePacket.HashAlgorithm">
      <summary>The hash algorithm tag.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.ServiceLocator.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ServiceLocator ::= Sequence {
                issuer    Name,
                locator   AuthorityInfoAccessSyntax OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.#ctor(System.String)">
             Constructor from a given details.
            
             @param information The describtion of the information.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.EssCertID.ToAsn1Object">
      <pre>
            EssCertID ::= SEQUENCE {
                certHash Hash,
                issuerSerial IssuerSerial OPTIONAL }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncKeyWithID.ToAsn1Object">
      <pre>
            EncKeyWithID ::= SEQUENCE {
                 privateKey           PrivateKeyInfo,
                 identifier CHOICE {
                    string               UTF8String,
                    generalName          GeneralName
                } OPTIONAL
            }
            </pre>
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  SignerIdentifier sid,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.GetInstance(System.Object)">
             return an EnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= Sequence {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedData.ToAsn1Object">
      <pre>
                  EncryptedData ::= SEQUENCE {
                                version CMSVersion,
                                encryptedContentInfo EncryptedContentInfo,
                                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ProtectedPart.ToAsn1Object">
      <pre>
            ProtectedPart ::= SEQUENCE {
                               header    PKIHeader,
                               body      PKIBody
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiFailureInfo.#ctor(System.Int32)">
            Basic constructor.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiConfirmContent.ToAsn1Object">
      <pre>
            PkiConfirmContent ::= NULL
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrl(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input">
      </param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrls(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input">
      </param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrl(System.IO.Stream)">
            Generates a certificate revocation list (CRL) object and initializes
            it with the data read from the input stream inStream.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509CrlParser.ReadCrls(System.IO.Stream)">
             Returns a (possibly empty) collection view of the CRLs read from
             the given input stream inStream.
            
             The inStream may contain a sequence of DER-encoded CRLs, or
             a PKCS#7 CRL set.  This is a PKCS#7 SignedData object, with the
             only significant field being crls.  In particular the signature
             and the contents are ignored.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509Crl.ToString">
             Returns a string representation of this CRL.
            
             @return a string representation of this CRL.
        </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CollectionStoreParameters.#ctor(System.Collections.ICollection)">
      <summary>
            Constructor.
            <p>
            The collection is copied.
            </p></summary>
      <param name="collection">The collection containing X.509 object types.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CollectionStoreParameters.GetCollection">
      <summary>Returns a copy of the <code>ICollection</code>.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CollectionStoreParameters.ToString">
      <summary>Returns a formatted string describing the parameters.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.GetEncodedBlockSize">
      <summary>
            Return encoded block size.
            </summary>
      <returns>2</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Encode some data.
            </summary>
      <param name="input">Input data array.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="length">The amount of data to process.</param>
      <param name="outBytes">The output data array.</param>
      <param name="outOff">The offset within the output data array to start writing from.</param>
      <returns>Amount of data encoded.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.GetDecodedBlockSize">
      <summary>
            Returns the decoded block size.
            </summary>
      <returns>1</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.HexTranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Decode data from a byte array.
            </summary>
      <param name="input">The input data array.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="length">The amounty of data to process.</param>
      <param name="outBytes">The output data array.</param>
      <param name="outOff">The position within the output data array to start writing from.</param>
      <returns>The amount of data written.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedDecoder.#ctor(Org.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
      <summary>
            Create a buffered Decoder.
            </summary>
      <param name="translator">The translater to use.</param>
      <param name="bufferSize">The size of the buffer.</param>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
      <summary>
            Process one byte of data.
            </summary>
      <param name="input">Data in.</param>
      <param name="output">Byte array for the output.</param>
      <param name="outOff">The offset in the output byte array to start writing from.</param>
      <returns>The amount of output bytes.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Process data from a byte array.
            </summary>
      <param name="input">The input data.</param>
      <param name="inOff">Start position within input data array.</param>
      <param name="len">Amount of data to process from input data array.</param>
      <param name="outBytes">Array to store output.</param>
      <param name="outOff">Position in output array to start writing from.</param>
      <returns>The amount of output bytes.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathBuilder.Build(Org.BouncyCastle.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
    <member name="P:Org.BouncyCastle.Pkix.CertStatus.RevocationDate">
      <summary>
            Returns the revocationDate.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Pkix.CertStatus.Status">
      <summary>
            Returns the certStatus.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Tls.CertificateRequest.CertificateAuthorities">
      <returns>A <see cref="T:System.Collections.IList" /> of X509Name</returns>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.#ctor(Org.BouncyCastle.Cms.CmsTypedStream,System.IO.Stream)">
             base constructor
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
            @throws CmsException
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception org.bouncycastle.x509.NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.ReplaceSigners(System.IO.Stream,Org.BouncyCastle.Cms.SignerInformationStore,System.IO.Stream)">
            Replace the signerinformation store associated with the passed
            in message contained in the stream original with the new one passed in.
            You would probably only want to do this if you wanted to change the unsigned
            attributes associated with a signer, or perhaps delete one.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param signerInformationStore the new signer information store to use.
            @param out the stream to Write the new signed data object to.
            @return out.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsSignedDataParser.ReplaceCertificatesAndCrls(System.IO.Stream,Org.BouncyCastle.X509.Store.IX509Store,Org.BouncyCastle.X509.Store.IX509Store,Org.BouncyCastle.X509.Store.IX509Store,System.IO.Stream)">
            Replace the certificate and CRL information associated with this
            CMSSignedData object with the new one passed in.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param certsAndCrls the new certificates and CRLs to be used.
            @param out the stream to Write the new signed data object to.
            @return out.
            @exception CmsException if there is an error processing the CertStore
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedDataParser.Version">
             Return the version number for the SignedData object
            
             @return the version number
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsSignedDataParser.SignedContentType">
      <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessable.Write(System.IO.Stream)">
      <summary>
            Generic routine to copy out the data we want processed.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableByteArray.GetContent">
      <returns>A clone of the byte array</returns>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetAuthAttrs">
            return a table of the digested attributes indexed by
            the OID of the attribute.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetUnauthAttrs">
            return a table of the undigested attributes indexed by
            the OID of the attribute.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsAuthenticatedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedData.MacAlgOid">
            return the object identifier for the content MAC algorithm.
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsAuthenticatedData.ContentInfo">
            return the ContentInfo 
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.#ctor(Org.BouncyCastle.Asn1.X509.DistributionPointName,System.Boolean,System.Boolean,Org.BouncyCastle.Asn1.X509.ReasonFlags,System.Boolean,System.Boolean)">
            Constructor from given details.
            
            @param distributionPoint
                       May contain an URI as pointer to most current CRL.
            @param onlyContainsUserCerts Covers revocation information for end certificates.
            @param onlyContainsCACerts Covers revocation information for CA certificates.
            
            @param onlySomeReasons
                       Which revocation reasons does this point cover.
            @param indirectCRL
                       If <code>true</code> then the CRL contains revocation
                       information about certificates ssued by other CAs.
            @param onlyContainsAttributeCerts Covers revocation information for attribute certificates.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.DistributionPoint">
            @return Returns the distributionPoint.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint.OnlySomeReasons">
            @return Returns the onlySomeReasons.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X500.DirectoryString.ToAsn1Object">
      <pre>
             DirectoryString ::= CHOICE {
               teletexString               TeletexString (SIZE (1..MAX)),
               printableString             PrintableString (SIZE (1..MAX)),
               universalString             UniversalString (SIZE (1..MAX)),
               utf8String                  UTF8String (SIZE (1..MAX)),
               bmpString                   BMPString (SIZE (1..MAX))  }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TstInfo.ToAsn1Object">
      <pre>
            
                 TstInfo ::= SEQUENCE  {
                    version                      INTEGER  { v1(1) },
                    policy                       TSAPolicyId,
                    messageImprint               MessageImprint,
                      -- MUST have the same value as the similar field in
                      -- TimeStampReq
                    serialNumber                 INTEGER,
                     -- Time-Stamping users MUST be ready to accommodate integers
                     -- up to 160 bits.
                    genTime                      GeneralizedTime,
                    accuracy                     Accuracy                 OPTIONAL,
                    ordering                     BOOLEAN             DEFAULT FALSE,
                    nonce                        INTEGER                  OPTIONAL,
                      -- MUST be present if the similar field was present
                      -- in TimeStampReq.  In that case it MUST have the same value.
                    tsa                          [0] GeneralName          OPTIONAL,
                    extensions                   [1] IMPLICIT Extensions   OPTIONAL  }
            
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.TimeStampResp.ToAsn1Object">
      <pre>
            TimeStampResp ::= SEQUENCE  {
              status                  PkiStatusInfo,
              timeStampToken          TimeStampToken     OPTIONAL  }
            </pre>
    </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.IdIsisMttATNamingAuthoritiesRechtWirtschaftSteuern">
            Profession OIDs should always be defined under the OID branch of the
            responsible naming authority. At the time of this writing, the work group
            �Recht, Wirtschaft, Steuern� (�Law, Economy, Taxes�) is registered as the
            first naming authority under the OID id-isismtt-at-namingAuthorities.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityID">
            @return Returns the namingAuthorityID.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityText">
            @return Returns the namingAuthorityText.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityUrl">
            @return Returns the namingAuthorityUrl.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.EncryptedValue.ToAsn1Object">
      <pre>
            EncryptedValue ::= SEQUENCE {
                                intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,
                                -- the intended algorithm for which the value will be used
                                symmAlg       [1] AlgorithmIdentifier  OPTIONAL,
                                -- the symmetric algorithm used to encrypt the value
                                encSymmKey    [2] BIT STRING           OPTIONAL,
                                -- the (encrypted) symmetric key used to encrypt the value
                                keyAlg        [3] AlgorithmIdentifier  OPTIONAL,
                                -- algorithm used to encrypt the symmetric key
                                valueHint     [4] OCTET STRING         OPTIONAL,
                                -- a brief description or identifier of the encValue content
                                -- (may be meaningful only to the sending entity, and used only
                                -- if EncryptedValue might be re-examined by the sending entity
                                -- in the future)
                                encValue       BIT STRING }
                                -- the encrypted value itself
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.GetInstance(System.Object)">
             return an EncryptedContentInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.EncryptedContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EncryptedContentInfo ::= Sequence {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevDetails.ToAsn1Object">
      <pre>
            RevDetails ::= SEQUENCE {
                             certDetails         CertTemplate,
                              -- allows requester to specify as much as they can about
                              -- the cert. for which revocation is requested
                              -- (e.g., for cases in which serialNumber is not available)
                              crlEntryDetails     Extensions       OPTIONAL
                              -- requested crlEntryExtensions
                        }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.Build">
      <pre>
             PKIHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.GenMsgContent.ToAsn1Object">
      <pre>
            GenMsgContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertStatus.ToAsn1Object">
      <pre>
            CertStatus ::= SEQUENCE {
                              certHash    OCTET STRING,
                              -- the hash of the certificate, using the same hash algorithm
                              -- as is used to create and verify the certificate signature
                              certReqId   INTEGER,
                              -- to match this confirmation with the corresponding req/rep
                              statusInfo  PKIStatusInfo OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.#ctor(System.Byte[])">
             Create a TimeStampRequest from the past in byte array.
            
             @param req byte array containing the request.
             @throws IOException if the request is malformed.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.#ctor(System.IO.Stream)">
             Create a TimeStampRequest from the past in input stream.
            
             @param in input stream containing the request.
             @throws IOException if the request is malformed.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.Validate(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
             Validate the timestamp request, checking the digest to see if it is of an
             accepted type and whether it is of the correct length for the algorithm specified.
            
             @param algorithms a set of string OIDS giving accepted algorithms.
             @param policies if non-null a set of policies we are willing to sign under.
             @param extensions if non-null a set of extensions we are willing to accept.
             @throws TspException if the request is invalid, or processing fails.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampRequest.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.Rfc3281CertPathUtilities.ProcessAttrCert1(Org.BouncyCastle.X509.IX509AttributeCertificate,Org.BouncyCastle.Pkix.PkixParameters)">
            Searches for a holder public key certificate and verifies its
            certification path.
            
            @param attrCert the attribute certificate.
            @param pkixParams The PKIX parameters.
            @return The certificate path of the holder certificate.
            @throws Exception if
                        <ul><li>no public key certificate can be found although holder
                        information is given by an entity name or a base certificate
                        ID</li><li>support classes cannot be created</li><li>no certification path for the public key certificate can
                        be built</li></ul></member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemObjectGenerator.Generate">
      <returns>
            A </returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Engines.RsaEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.GetFirstSigner(Org.BouncyCastle.Cms.SignerID)">
             Return the first SignerInformation object that matches the
             passed in selector. Null if there are no matches.
            
             @param selector to identify a signer
             @return a single SignerInformation object. Null if none matches.
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.GetSigners">
      <returns>An ICollection of all signers in the collection</returns>
    </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformationStore.GetSigners(Org.BouncyCastle.Cms.SignerID)">
             Return possible empty collection with signers matching the passed in SignerID
            
             @param selector a signer id to select against.
             @return a collection of SignerInformation objects.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformationStore.Count">
      <summary>The number of signers in the collection.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.GetContent">
             Return the uncompressed content.
            
             @return the uncompressed content
             @throws CmsException if there is an exception uncompressing the data.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.GetContent(System.Int32)">
             Return the uncompressed content, throwing an exception if the data size
             is greater than the passed in limit. If the content is exceeded getCause()
             on the CMSException will contain a StreamOverflowException
            
             @param limit maximum number of bytes to read
             @return the content read
             @throws CMSException if there is an exception uncompressing the data.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsCompressedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsCompressedData.ContentInfo">
            return the ContentInfo 
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
            @param in
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.DsaSecretBcpgKey.X">
            @return x
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.V2Form.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             V2Form ::= Sequence {
                  issuerName            GeneralNames  OPTIONAL,
                  baseCertificateID     [0] IssuerSerial  OPTIONAL,
                  objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL
                    -- issuerName MUST be present in this profile
                    -- baseCertificateID and objectDigestInfo MUST NOT
                    -- be present in this profile
             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Target.GetInstance(System.Object)">
            Creates an instance of a Target from the given object.
            <p><code>obj</code> can be a Target or a {@link Asn1TaggedObject}</p>
            
            @param obj The object.
            @return A Target instance.
            @throws ArgumentException if the given object cannot be
                        interpreted as Target.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.Target.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            @return an Asn1Object
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Target.TargetGroup">
            @return Returns the targetGroup.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.Target.TargetName">
            @return Returns the targetName.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.PolicyMappings.#ctor(System.Collections.IDictionary)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param mappings a <code>HashMap</code> value that maps
             <code>string</code> oids
             to other <code>string</code> oids.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.CertificatePair.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @return a DERObject
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificatePair.Forward">
            @return Returns the forward.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.CertificatePair.Reverse">
            @return Returns the reverse.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Tsp.Accuracy.ToAsn1Object">
      <pre>
            Accuracy ::= SEQUENCE {
                        seconds        INTEGER              OPTIONAL,
                        millis     [0] INTEGER  (1..999)    OPTIONAL,
                        micros     [1] INTEGER  (1..999)    OPTIONAL
                        }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.OtherCertID.ToAsn1Object">
      <pre>
             OtherCertID ::= SEQUENCE {
                 otherCertHash    OtherHash,
                 issuerSerial     IssuerSerial OPTIONAL }
            
             OtherHash ::= CHOICE {
                 sha1Hash     OCTET STRING,
                 otherHash    OtherHashAlgAndValue }
            
             OtherHashAlgAndValue ::= SEQUENCE {
                 hashAlgorithm    AlgorithmIdentifier,
                 hashValue        OCTET STRING }
            
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoSigningKey.ToAsn1Object">
      <pre>
            PopoSigningKey ::= SEQUENCE {
                                 poposkInput           [0] PopoSigningKeyInput OPTIONAL,
                                 algorithmIdentifier   AlgorithmIdentifier,
                                 signature             BIT STRING }
             -- The signature (using "algorithmIdentifier") is on the
             -- DER-encoded value of poposkInput.  NOTE: If the CertReqMsg
             -- certReq CertTemplate contains the subject and publicKey values,
             -- then poposkInput MUST be omitted and the signature MUST be
             -- computed on the DER-encoded value of CertReqMsg certReq.  If
             -- the CertReqMsg certReq CertTemplate does not contain the public
             -- key and subject values, then poposkInput MUST be present and
             -- MUST be signed.  This strategy ensures that the public key is
             -- not present in both the poposkInput and CertReqMsg certReq
             -- CertTemplate fields.
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.GetInstance(System.Object)">
             return a PasswordRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            PasswordRecipientInfo ::= Sequence {
              version CMSVersion,   -- Always set to 0
              keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                        OPTIONAL,
             keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
             encryptedKey EncryptedKey }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.GetInstance(System.Object)">
             return an OriginatorPublicKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorPublicKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorPublicKey ::= Sequence {
                algorithm AlgorithmIdentifier,
                publicKey BIT STRING
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.ToAsn1Object">
      <pre>
            CAKeyUpdAnnContent ::= SEQUENCE {
                                        oldWithNew   CmpCertificate, -- old pub signed with new priv
                                        newWithOld   CmpCertificate, -- new pub signed with old priv
                                        newWithNew   CmpCertificate  -- new pub signed with new priv
             }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Reset">
      <summary>Reset the generator</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetHolder(Org.BouncyCastle.X509.AttributeCertificateHolder)">
      <summary>Set the Holder of this Attribute Certificate.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetIssuer(Org.BouncyCastle.X509.AttributeCertificateIssuer)">
      <summary>Set the issuer.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetSignatureAlgorithm(System.String)">
      <summary>
            Set the signature algorithm. This can be either a name or an OID, names
            are treated as case insensitive.
            </summary>
      <param name="signatureAlgorithm">The algorithm name.</param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddAttribute(Org.BouncyCastle.X509.X509Attribute)">
      <summary>Add an attribute.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
      <summary>
            Add a given extension field for the standard extensions tag.
            The value parameter becomes the contents of the octet string associated
            with the extension.
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509KeyUsage.keyEncipherment | X509KeyUsage.dataEncipherment)
        </member>
    <member name="M:Org.BouncyCastle.X509.X509CertificatePair.#ctor(Org.BouncyCastle.Asn1.X509.CertificatePair)">
      <summary>Constructor from a ASN.1 CertificatePair structure.</summary>
      <param name="pair">The <c>CertificatePair</c> ASN.1 object.</param>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509CertificatePair.Forward">
      <summary>Returns the certificate from the other CA to this CA.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509CertificatePair.Reverse">
      <summary>Returns the certificate from this CA to the other CA.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Tsp.TspUtil.GetSignatureTimestamps(Org.BouncyCastle.Cms.SignerInformation)">
             Fetches the signature time-stamp attributes from a SignerInformation object.
             Checks that the MessageImprint for each time-stamp matches the signature field.
             (see RFC 3161 Appendix A).
            
             @param signerInfo a SignerInformation to search for time-stamps
             @return a collection of TimeStampToken objects
             @throws TSPValidationException
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TspUtil.GetDigestAlgName(System.String)">
      <summary>
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
            </summary>
    </member>
    <member name="P:Org.BouncyCastle.Tsp.TimeStampTokenInfo.Nonce">
            @return the nonce value, null if there isn't one.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.#ctor(System.Byte[])">
             Create a TimeStampResponse from a byte array containing an ASN.1 encoding.
            
             @param resp the byte array containing the encoded response.
             @throws TspException if the response is malformed.
             @throws IOException if the byte array doesn't represent an ASN.1 encoding.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.#ctor(System.IO.Stream)">
             Create a TimeStampResponse from an input stream containing an ASN.1 encoding.
            
             @param input the input stream containing the encoded response.
             @throws TspException if the response is malformed.
             @throws IOException if the stream doesn't represent an ASN.1 encoding.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.Validate(Org.BouncyCastle.Tsp.TimeStampRequest)">
             Check this response against to see if it a well formed response for
             the passed in request. Validation will include checking the time stamp
             token if the response status is GRANTED or GRANTED_WITH_MODS.
            
             @param request the request to be checked against
             @throws TspException if the request can not match this response.
        </member>
    <member name="M:Org.BouncyCastle.Tsp.TimeStampResponse.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="F:Org.BouncyCastle.Pkix.PkixParameters.PkixValidityModel">
            This is the default PKIX validity model. Actually there are two variants
            of this: The PKIX model and the modified PKIX model. The PKIX model
            verifies that all involved certificates must have been valid at the
            current time. The modified PKIX model verifies that all involved
            certificates were valid at the signing time. Both are indirectly choosen
            with the {@link PKIXParameters#setDate(java.util.Date)} method, so this
            methods sets the Date when <em>all</em> certificates must have been
            valid.
        </member>
    <member name="F:Org.BouncyCastle.Pkix.PkixParameters.ChainValidityModel">
            This model uses the following validity model. Each certificate must have
            been valid at the moment where is was used. That means the end
            certificate must have been valid at the time the signature was done. The
            CA certificate which signed the end certificate must have been valid,
            when the end certificate was signed. The CA (or Root CA) certificate must
            have been valid, when the CA certificate was signed and so on. So the
            {@link PKIXParameters#setDate(java.util.Date)} method sets the time, when
            the <em>end certificate</em> must have been valid. <p /> It is used e.g.
            in the German signature law.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetTargetCertConstraints">
             Returns the required constraints on the target certificate. The
             constraints are returned as an instance of CertSelector. If
             <code>null</code>, no constraints are defined.<br /><br />
             Note that the CertSelector returned is cloned to protect against
             subsequent modifications.
            
             @return a CertSelector specifying the constraints on the target
                     certificate (or <code>null</code>)
            
             @see #setTargetCertConstraints(CertSelector)
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetTargetCertConstraints(Org.BouncyCastle.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate. The constraints
             are specified as an instance of CertSelector. If null, no constraints are
             defined.<br /><br />
             Note that the CertSelector specified is cloned to protect against
             subsequent modifications.
            
             @param selector
                        a CertSelector specifying the constraints on the target
                        certificate (or <code>null</code>)
            
             @see #getTargetCertConstraints()
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetInitialPolicies">
             Returns an immutable Set of initial policy identifiers (OID strings),
             indicating that any one of these policies would be acceptable to the
             certificate user for the purposes of certification path processing. The
             default return value is an empty <code>Set</code>, which is
             interpreted as meaning that any policy would be acceptable.
            
             @return an immutable <code>Set</code> of initial policy OIDs in String
                     format, or an empty <code>Set</code> (implying any policy is
                     acceptable). Never returns <code>null</code>.
            
             @see #setInitialPolicies(java.util.Set)
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetCertPathCheckers(System.Collections.IList)">
             Sets a <code>List</code> of additional certification path checkers. If
             the specified List contains an object that is not a PKIXCertPathChecker,
             it is ignored.<br /><br />
             Each <code>PKIXCertPathChecker</code> specified implements additional
             checks on a certificate. Typically, these are checks to process and
             verify private extensions contained in certificates. Each
             <code>PKIXCertPathChecker</code> should be instantiated with any
             initialization parameters needed to execute the check.<br /><br />
             This method allows sophisticated applications to extend a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code>. Each
             of the specified PKIXCertPathCheckers will be called, in turn, by a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code> for
             each certificate processed or validated.<br /><br />
             Regardless of whether these additional PKIXCertPathCheckers are set, a
             PKIX <code>CertPathValidator</code> or <code>CertPathBuilder</code>
             must perform all of the required PKIX checks on each certificate. The one
             exception to this rule is if the RevocationEnabled flag is set to false
             (see the {@link #setRevocationEnabled(boolean) setRevocationEnabled}
             method).<br /><br />
             Note that the List supplied here is copied and each PKIXCertPathChecker
             in the list is cloned to protect against subsequent modifications.
            
             @param checkers
                        a List of PKIXCertPathCheckers. May be null, in which case no
                        additional checkers will be used.
             @exception ClassCastException
                            if any of the elements in the list are not of type
                            <code>java.security.cert.PKIXCertPathChecker</code>
             @see #getCertPathCheckers()
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetCertPathCheckers">
             Returns the List of certification path checkers. Each PKIXCertPathChecker
             in the returned IList is cloned to protect against subsequent modifications.
            
             @return an immutable List of PKIXCertPathCheckers (may be empty, but not
                     <code>null</code>)
            
             @see #setCertPathCheckers(java.util.List)
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.AddCertPathChecker(Org.BouncyCastle.Pkix.PkixCertPathChecker)">
             Adds a <code>PKIXCertPathChecker</code> to the list of certification
             path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}
             method for more details.
             <p>
             Note that the <code>PKIXCertPathChecker</code> is cloned to protect
             against subsequent modifications.</p>
            
             @param checker a <code>PKIXCertPathChecker</code> to add to the list of
             checks. If <code>null</code>, the checker is ignored (not added to list).
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetParams(Org.BouncyCastle.Pkix.PkixParameters)">
             Method to support <code>Clone()</code> under J2ME.
             <code>super.Clone()</code> does not exist and fields are not copied.
            
             @param params Parameters to set. If this are
                        <code>ExtendedPkixParameters</code> they are copied to.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetStores(System.Collections.IList)">
             Sets the Bouncy Castle Stores for finding CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             The <code>IList</code> is cloned.
             </p>
            
             @param stores A list of stores to use.
             @see #getStores
             @throws ClassCastException if an element of <code>stores</code> is not
                         a {@link Store}.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.AddStore(Org.BouncyCastle.X509.Store.IX509Store)">
             Adds a Bouncy Castle {@link Store} to find CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             This method should be used to add local stores, like collection based
             X.509 stores, if available. Local stores should be considered first,
             before trying to use additional (remote) locations, because they do not
             need possible additional network traffic.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.AddAdditionalStore(Org.BouncyCastle.X509.Store.IX509Store)">
             Adds an additional Bouncy Castle {@link Store} to find CRLs, certificates,
             attribute certificates or cross certificates.
             <p>
             You should not use this method. This method is used for adding additional
             X.509 stores, which are used to add (remote) locations, e.g. LDAP, found
             during X.509 object processing, e.g. in certificates or CRLs. This method
             is used in PKIX certification path processing.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores()
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetAdditionalStores">
             Returns an <code>IList</code> of additional Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of additional Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #addAddionalStore(Store)
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetStores">
             Returns an <code>IList</code> of Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #setStores(IList)
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetAdditionalLocationsEnabled(System.Boolean)">
             Sets if additional {@link X509Store}s for locations like LDAP found in
             certificates or CRLs should be used.
            
             @param enabled <code>true</code> if additional stores are used.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetTargetConstraints">
             Returns the required constraints on the target certificate or attribute
             certificate. The constraints are returned as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
            
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> returned is cloned to protect
             against subsequent modifications.
             </p>
             @return a <code>IX509Selector</code> specifying the constraints on the
                     target certificate or attribute certificate (or <code>null</code>)
             @see #setTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.SetTargetConstraints(Org.BouncyCastle.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate or attribute
             certificate. The constraints are specified as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> specified is cloned to protect
             against subsequent modifications.
             </p>
            
             @param selector a <code>IX509Selector</code> specifying the constraints on
                        the target certificate or attribute certificate (or
                        <code>null</code>)
             @see #getTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetTrustedACIssuers">
             Returns the trusted attribute certificate issuers. If attribute
             certificates is verified the trusted AC issuers must be set.
             <p>
             The returned <code>ISet</code> consists of <code>TrustAnchor</code>s.
             </p><p>
             The returned <code>ISet</code> is immutable. Never <code>null</code></p>
            
             @return Returns an immutable set of the trusted AC issuers.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetNecessaryACAttributes">
             Returns the neccessary attributes which must be contained in an attribute
             certificate.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the necessary AC attributes.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetProhibitedACAttributes">
             Returns the attribute certificates which are not allowed.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the prohibited AC attributes. Is never <code>null</code>.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixParameters.GetAttrCertCheckers">
             Returns the attribute certificate checker. The returned set contains
             {@link PKIXAttrCertChecker}s and is immutable.
            
             @return Returns the attribute certificate checker. Is never
                     <code>null</code>.
        </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsUseDeltasEnabled">
            Whether delta CRLs should be used for checking the revocation status.
            Defaults to <code>false</code>.
        </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.ValidityModel">
            The validity model.
            @see #CHAIN_VALIDITY_MODEL
            @see #PKIX_VALIDITY_MODEL
        </member>
    <member name="P:Org.BouncyCastle.Pkix.PkixParameters.IsAdditionalLocationsEnabled">
             Returns if additional {@link X509Store}s for locations like LDAP found
             in certificates or CRLs should be used.
            
             @return Returns <code>true</code> if additional stores are used.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.GetInstance(Org.BouncyCastle.Pkix.PkixParameters)">
             Returns an instance of <code>PkixBuilderParameters</code>.
             <p>
             This method can be used to get a copy from other
             <code>PKIXBuilderParameters</code>, <code>PKIXParameters</code>,
             and <code>ExtendedPKIXParameters</code> instances.
             </p>
            
             @param pkixParams The PKIX parameters to create a copy of.
             @return An <code>PkixBuilderParameters</code> instance.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.GetExcludedCerts">
      <summary>
            Excluded certificates are not used for building a certification path.
            </summary>
      <returns>the excluded certificates.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.SetParams(Org.BouncyCastle.Pkix.PkixParameters)">
            Can alse handle <code>ExtendedPKIXBuilderParameters</code> and
            <code>PKIXBuilderParameters</code>.
            
            @param params Parameters to set.
            @see org.bouncycastle.x509.ExtendedPKIXParameters#setParams(java.security.cert.PKIXParameters)
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixBuilderParameters.Clone">
             Makes a copy of this <code>PKIXParameters</code> object. Changes to the
             copy will not affect the original and vice versa.
            
             @return a copy of this <code>PKIXParameters</code> object
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertPathBuilder.Build(Org.BouncyCastle.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
    <member name="F:Org.BouncyCastle.Ocsp.OcspRespStatus.Successful">
            note 4 is not used.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.Certainty">
            @return Returns the certainty.
        </member>
    <member name="P:Org.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.CountSmallPrimes">
            @return Returns the countSmallPrimes.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsProcessableFile.GetContent">
      <returns>The file handle</returns>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.GetUnprotectedAttributes">
            return a table of the unprotected attributes indexed by
            the OID of the attribute.
            @throws IOException
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.EncryptionAlgOid">
            return the object identifier for the content encryption algorithm.
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedDataParser.EncryptionAlgParams">
            return the ASN.1 encoded encryption algorithm parameters, or null if
            there aren't any.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String,Org.BouncyCastle.Crypto.CipherKeyGenerator)">
      <summary>
            Generate an enveloped object that contains a CMS Enveloped Data
            object using the passed in key generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String)">
      <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(Org.BouncyCastle.Cms.CmsProcessable,System.String,System.Int32)">
      <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificate.GetInstance(System.Object)">
            @param obj
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttributeCertificate.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttributeCertificate ::= Sequence {
                  acinfo               AttributeCertificateInfo,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING
             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertIssuer.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertIssuer ::= CHOICE {
                  v1Form   GeneralNames,  -- MUST NOT be used in this
                                          -- profile
                  v2Form   [0] V2Form     -- v2 only
             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.#ctor">
            create a CertStatus object with a tag of zero.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.CertStatus.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             CertStatus ::= CHOICE {
                             good        [0]     IMPLICIT Null,
                             revoked     [1]     IMPLICIT RevokedInfo,
                             unknown     [2]     IMPLICIT UnknownInfo }
            </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwltin">
            Rechtsanw�ltin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwalt">
            Rechtsanwalt
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsbeistand">
            Rechtsbeistand
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberaterin">
            Steuerberaterin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberater">
            Steuerberater
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigte">
            Steuerbevollm�chtigte
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigter">
            Steuerbevollm�chtigter
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarin">
            Notarin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notar">
            Notar
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreterin">
            Notarvertreterin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreter">
            Notarvertreter
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalterin">
            Notariatsverwalterin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalter">
            Notariatsverwalter
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprferin">
            Wirtschaftspr�ferin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprfer">
            Wirtschaftspr�fer
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigteBuchprferin">
            Vereidigte Buchpr�ferin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigterBuchprfer">
            Vereidigter Buchpr�fer
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwltin">
            Patentanw�ltin
        </member>
    <member name="F:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwalt">
            Patentanwalt
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionItems">
            @return Returns the professionItems.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionOids">
            @return Returns the professionOids.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.AddProfessionInfo">
            @return Returns the addProfessionInfo.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.NamingAuthority">
            @return Returns the namingAuthority.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.RegistrationNumber">
            @return Returns the registrationNumber.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                       DeclarationOfMajoritySyntax ::= CHOICE
                       {
                         notYoungerThan [0] IMPLICIT INTEGER,
                         fullAgeAtCountry [1] IMPLICIT SEQUENCE
                         {
                           fullAge BOOLEAN DEFAULT TRUE,
                           country PrintableString (SIZE(2))
                         }
                         dateOfBirth [2] IMPLICIT GeneralizedTime
                       }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="P:Org.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.NotYoungerThan">
            @return notYoungerThan if that's what we are, -1 otherwise
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PKMacValue.ToAsn1Object">
      <pre>
            PKMACValue ::= SEQUENCE {
                 algId  AlgorithmIdentifier,
                 -- algorithm value shall be PasswordBasedMac 1.2.840.113533.7.66.13
                 -- parameter value is PBMParameter
                 value  BIT STRING }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMessages.ToAsn1Object">
      <pre>
            CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(System.Object)">
             return an OriginatorIdentifierOrKey object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             OriginatorIdentifierOrKey ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier,
                 originatorKey [1] OriginatorPublicKey
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(System.Object)">
             return an KeyAgreeRecipientIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyAgreeRecipientIdentifier ::= CHOICE {
                issuerAndSerialNumber IssuerAndSerialNumber,
                rKeyId [0] IMPLICIT RecipientKeyIdentifier
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            MQVuserKeyingMaterial ::= SEQUENCE {
              ephemeralPublicKey OriginatorPublicKey,
              addedukm [0] EXPLICIT UserKeyingMaterial OPTIONAL  }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent.ToAsn1Object">
      <pre>
            PopoDecKeyRespContent ::= SEQUENCE OF INTEGER
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.ErrorMsgContent.ToAsn1Object">
      <pre>
            ErrorMsgContent ::= SEQUENCE {
                                   pKIStatusInfo          PKIStatusInfo,
                                   errorCode              INTEGER           OPTIONAL,
                                   -- implementation-specific error codes
                                   errorDetails           PKIFreeText       OPTIONAL
                                   -- implementation-specific error details
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.PrincipalUtilities.GetIssuerX509Principal(Org.BouncyCastle.X509.X509Crl)">
      <summary>Return the issuer of the given CRL as an X509Principal.</summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.#ctor(Org.BouncyCastle.Asn1.X509.AttCertIssuer)">
             Set the issuer directly with the ASN.1 structure.
            
             @param issuer The issuer
        </member>
    <member name="M:Org.BouncyCastle.X509.AttributeCertificateIssuer.GetPrincipals">
      <summary>Return any principal objects inside the attribute certificate issuer object.</summary>
      <returns>An array of IPrincipal objects (usually X509Principal).</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCrlUtilities.FindCrls(Org.BouncyCastle.X509.Store.X509CrlStoreSelector,System.Collections.IList)">
      <summary>
            crl checking
            Return a Collection of all CRLs found in the X509Store's that are
            matching the crlSelect criteriums.
            </summary>
      <param name="crlSelect">a {@link X509CRLStoreSelector} object that will be used
            to select the CRLs</param>
      <param name="crlStores">a List containing only {@link org.bouncycastle.x509.X509Store
            X509Store} objects. These are used to search for CRLs</param>
      <returns>a Collection of all found {@link X509CRL X509CRL} objects. May be
            empty but never <code>null</code>.
            </returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertChecker.GetSupportedExtensions">
            Returns an immutable <code>Set</code> of X.509 attribute certificate
            extensions that this <code>PkixAttrCertChecker</code> supports or
            <code>null</code> if no extensions are supported.
            <p>
            Each element of the set is a <code>String</code> representing the
            Object Identifier (OID) of the X.509 extension that is supported.
            </p><p>
            All X.509 attribute certificate extensions that a
            <code>PkixAttrCertChecker</code> might possibly be able to process
            should be included in the set.
            </p>
            
            @return an immutable <code>Set</code> of X.509 extension OIDs (in
                    <code>String</code> format) supported by this
                    <code>PkixAttrCertChecker</code>, or <code>null</code> if no
                    extensions are supported
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertChecker.Check(Org.BouncyCastle.X509.IX509AttributeCertificate,Org.BouncyCastle.Pkix.PkixCertPath,Org.BouncyCastle.Pkix.PkixCertPath,System.Collections.ICollection)">
            Performs checks on the specified attribute certificate. Every handled
            extension is rmeoved from the <code>unresolvedCritExts</code>
            collection.
            
            @param attrCert The attribute certificate to be checked.
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param holderCertPath The certificate path which belongs to the holder
                       certificate.
            @param unresolvedCritExts a <code>Collection</code> of OID strings
                       representing the current set of unresolved critical extensions
            @throws CertPathValidatorException if the specified attribute certificate
                        does not pass the check.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixAttrCertChecker.Clone">
            Returns a clone of this object.
            
            @return a copy of this <code>PkixAttrCertChecker</code></member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GetRecoveredMessage">
      <summary>
            Return a reference to the recoveredMessage message.
            </summary>
      <returns>The full/partial recoveredMessage message.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.IsSameAs(System.Byte[],System.Byte[])">
      <summary> compare two byte arrays - constant time.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.ClearBlock(System.Byte[])">
      <summary> clear possible sensitive data</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Update(System.Byte)">
      <summary> update the internal digest with the byte b</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
      <summary> update the internal digest with the byte array in</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Reset">
      <summary> reset the internal state</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GenerateSignature">
      <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.VerifySignature(System.Byte[])">
      <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.HasFullMessage">
      <summary>
            Return true if the full message was recoveredMessage.
            </summary>
      <returns>true on full message recovery, false otherwise, or if not sure.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.ItoOSP(System.Int32,System.Byte[])">
      <summary> int to octet string.</summary>
      <summary> int to octet string.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.LtoOSP(System.Int64,System.Byte[])">
      <summary> long to octet string.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary> mask generator function, as described in Pkcs1v2.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.GenerateBlindingFactor">
             Generate a suitable blind factor for the public key the generator was initialised with.
            
             @return a random blind factor
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.GenerateParameters">
            which generates the p , q and a values from the given parameters,
            returning the Gost3410Parameters object.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])">
            Creates a new SRP verifier
            @param salt The salt to use, generally should be large and random
            @param identity The user's identifying information (eg. username)
            @param password The user's password
            @return A new verifier for use in future SRP authentication
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetContentDigest">
            return the content digest that was calculated during verification.
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetSignature">
            return the encoded signature
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetCounterSignatures">
            Return a SignerInformationStore containing the counter signatures attached to this
            signer. If no counter signatures are present an empty store is returned.
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.GetEncodedSignedAttributes">
            return the DER encoding of the signed attributes.
            @throws IOException if an encoding error occurs.
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.ToSignerInfo">
             Return the base ASN.1 CMS structure that this object contains.
            
             @return an object containing a CMS SignerInfo structure.
        </member>
    <member name="M:Org.BouncyCastle.Cms.SignerInformation.AddCounterSigners(Org.BouncyCastle.Cms.SignerInformation,Org.BouncyCastle.Cms.SignerInformationStore)">
             Return a signer information object with passed in SignerInformationStore representing counter
             signatures attached as an unsigned attribute.
            
             @param signerInformation the signerInfo to be used as the basis.
             @param counterSigners signer info objects carrying counter signature.
             @return a copy of the original SignerInformationObject with the changed attributes.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.Version">
            return the version number for this objects underlying SignerInfo structure.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.DigestAlgOid">
            return the object identifier for the signature.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.DigestAlgParams">
            return the signature parameters, or null if there aren't any.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.EncryptionAlgOid">
            return the object identifier for the signature.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.EncryptionAlgParams">
            return the signature/encryption algorithm parameters, or null if
            there aren't any.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.SignedAttributes">
            return a table of the signed attributes - indexed by
            the OID of the attribute.
        </member>
    <member name="P:Org.BouncyCastle.Cms.SignerInformation.UnsignedAttributes">
            return a table of the unsigned attributes indexed by
            the OID of the attribute.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(Org.BouncyCastle.Asn1.X500.DirectoryString)">
            Constructor from DERString.
            <p />
            The sequence is of type NameOrPseudonym:
            <p /><pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString
                    },
                	   pseudonym DirectoryString
                  }
            </pre>
            @param pseudonym pseudonym value to use.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(System.String)">
             Constructor from a given details.
            
             @param pseudonym The pseudonym.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.RevokedInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RevokedInfo ::= Sequence {
                 revocationTime              GeneralizedTime,
                 revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SignedData ::= Sequence {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(System.Object)">
             return a KeyAgreeRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.ToAsn1Object">
                     * Produce an object suitable for an Asn1OutputStream.
                     * <pre>
                     * KeyAgreeRecipientInfo ::= Sequence {
                     *     version CMSVersion,  -- always set to 3
                     *     originator [0] EXPLICIT OriginatorIdentifierOrKey,
                     *     ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
                     *     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                     *     recipientEncryptedKeys RecipientEncryptedKeys
                     * }
            		 *
            		 * UserKeyingMaterial ::= OCTET STRING
                     * </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertConfirmContent.ToAsn1Object">
      <pre>
            CertConfirmContent ::= SEQUENCE OF CertStatus
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.Reset">
      <summary>
            Reset the Generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetNotBefore(System.DateTime)">
      <summary>
            Set the date that this certificate is to be valid from.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetNotAfter(System.DateTime)">
      <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetSignatureAlgorithm(System.String)">
      <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
      <param name="signatureAlgorithm" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectUniqueID(System.Boolean[])">
      <summary>
            Set the subject unique ID - note: it is very rare that it is correct to do this.
            </summary>
      <param name="uniqueID" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.SetIssuerUniqueID(System.Boolean[])">
      <summary>
            Set the issuer unique ID - note: it is very rare that it is correct to do this.
            </summary>
      <param name="uniqueID" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
      <summary>
            Add an extension using a string with a dotted decimal OID.
            </summary>
      <param name="oid">string containing a dotted decimal Object Identifier.</param>
      <param name="critical">Is it critical.</param>
      <param name="extensionValue">byte[] containing the value of this extension.</param>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V3CertificateGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.Match(System.Object)">
      <summary>
            Decides if the given certificate pair should be selected. If
            <c>obj</c> is not a <code>X509CertificatePair</code>, this method
            returns <code>false</code>.
            </summary>
      <param name="obj">The <code>X509CertificatePair</code> to be tested.</param>
      <returns>
        <code>true</code> if the object matches this selector.</returns>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.CertPair">
      <summary>The certificate pair which is used for testing on equality.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.ForwardSelector">
      <summary>The certificate selector for the forward part.</summary>
    </member>
    <member name="P:Org.BouncyCastle.X509.Store.X509CertPairStoreSelector.ReverseSelector">
      <summary>The certificate selector for the reverse part.</summary>
    </member>
    <member name="F:Org.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.KEY_CERT_SIGN">
      <summary>
            key usage bits
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetIssuerPrincipal(System.Object)">
      <summary>
            Returns the issuer of an attribute certificate or certificate.
            </summary>
      <param name="cert">The attribute certificate or certificate.</param>
      <returns>The issuer as <code>X500Principal</code>.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetNextWorkingKey(System.Collections.IList,System.Int32)">
             Return the next working key inheriting DSA parameters if necessary.
             <p>
             This methods inherits DSA parameters from the indexed certificate or
             previous certificates in the certificate chain to the returned
             <code>PublicKey</code>. The list is searched upwards, meaning the end
             certificate is at position 0 and previous certificates are following.
             </p><p>
             If the indexed certificate does not contain a DSA key this method simply
             returns the public key. If the DSA key already contains DSA parameters
             the key is also only returned.
             </p>
            
             @param certs The certification path.
             @param index The index of the certificate which contains the public key
                        which should be extended with DSA parameters.
             @return The public key of the certificate in list position
                     <code>index</code> extended with DSA parameters if applicable.
             @throws Exception if DSA parameters cannot be inherited.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.FindCertificates(Org.BouncyCastle.X509.Store.X509CertStoreSelector,System.Collections.IList)">
      <summary>
            Return a Collection of all certificates or attribute certificates found
            in the X509Store's that are matching the certSelect criteriums.
            </summary>
      <param name="certSelect">a {@link Selector} object that will be used to select
            the certificates</param>
      <param name="certStores">a List containing only X509Store objects. These
            are used to search for certificates.</param>
      <returns>a Collection of all found  or
            org.bouncycastle.x509.X509AttributeCertificate objects.
            May be empty but never <code>null</code>.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetCrlIssuersFromDistributionPoint(Org.BouncyCastle.Asn1.X509.DistributionPoint,System.Collections.ICollection,Org.BouncyCastle.X509.Store.X509CrlStoreSelector,Org.BouncyCastle.Pkix.PkixParameters)">
             Add the CRL issuers from the cRLIssuer field of the distribution point or
             from the certificate if not given to the issuer criterion of the
             <code>selector</code>.
             <p>
             The <code>issuerPrincipals</code> are a collection with a single
             <code>X500Principal</code> for <code>X509Certificate</code>s. For
             {@link X509AttributeCertificate}s the issuer may contain more than one
             <code>X500Principal</code>.
             </p>
            
             @param dp The distribution point.
             @param issuerPrincipals The issuers of the certificate or attribute
                        certificate which contains the distribution point.
             @param selector The CRL selector.
             @param pkixParams The PKIX parameters containing the cert stores.
             @throws Exception if an exception occurs while processing.
             @throws ClassCastException if <code>issuerPrincipals</code> does not
             contain only <code>X500Principal</code>s.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetCompleteCrls(Org.BouncyCastle.Asn1.X509.DistributionPoint,System.Object,System.DateTime,Org.BouncyCastle.Pkix.PkixParameters)">
             Fetches complete CRLs according to RFC 3280.
            
             @param dp The distribution point for which the complete CRL
             @param cert The <code>X509Certificate</code> or
                        {@link org.bouncycastle.x509.X509AttributeCertificate} for
                        which the CRL should be searched.
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @return A <code>Set</code> of <code>X509CRL</code>s with complete
                     CRLs.
             @throws Exception if an exception occurs while picking the CRLs
                         or no CRLs are found.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetDeltaCrls(System.DateTime,Org.BouncyCastle.Pkix.PkixParameters,Org.BouncyCastle.X509.X509Crl)">
             Fetches delta CRLs according to RFC 3280 section 5.2.4.
            
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @param completeCRL The complete CRL the delta CRL is for.
             @return A <code>Set</code> of <code>X509CRL</code>s with delta CRLs.
             @throws Exception if an exception occurs while picking the delta
                         CRLs.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.TlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters">
            which Generates the p and g values from the given parameters,
            returning the DsaParameters object.
            <p>
            Note: can take a while...</p></member>
    <member name="M:Org.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters_FIPS186_3">
            generate suitable parameters for DSA, in line with
            <i>FIPS 186-3 A.1 Generation of the FFC Primes p and q</i>.
        </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.DHAgreement.CalculateMessage">
            calculate our initial message.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int64,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,Org.BouncyCastle.Bcpg.SignatureSubpacket[],Org.BouncyCastle.Bcpg.SignatureSubpacket[],System.Byte[],Org.BouncyCastle.Bcpg.MPInteger[])">
             Generate a version 4 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param hashedData
             @param unhashedData
             @param fingerprint
             @param signature
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int32,System.Int64,Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,Org.BouncyCastle.Bcpg.HashAlgorithmTag,System.Int64,System.Byte[],Org.BouncyCastle.Bcpg.MPInteger[])">
             Generate a version 2/3 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param fingerprint
             @param signature
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetSignatureTrailer">
             return the signature trailer that must be included with the data
             to reconstruct the signature
            
             @return byte[]
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetSignature">
            		* return the signature as a set of integers - note this is normalised to be the
                    * ASN.1 encoding of what appears in the signature packet.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.SignaturePacket.GetSignatureBytes">
            Return the byte encoding of the signature section.
            @return uninterpreted signature bytes.
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.KeyId">
            return the keyId
            @return the keyId that created the signature.
        </member>
    <member name="P:Org.BouncyCastle.Bcpg.SignaturePacket.CreationTime">
      <summary>Return the creation time in milliseconds since 1 Jan., 1970 UTC.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.#ctor(Org.BouncyCastle.Bcpg.BcpgInputStream)">
      <summary>Construct an RSA public key from the passed in stream.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.GetEncoded">
      <summary>Return the standard PGP encoding of the key.</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.RsaPublicBcpgKey.Format">
      <summary>The format, as a string, always "PGP".</summary>
    </member>
    <member name="P:Org.BouncyCastle.Bcpg.CompressedDataPacket.Algorithm">
      <summary>The algorithm tag value.</summary>
    </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.Decode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
             decode the base 64 encoded input data.
            
             @return the offset the data starts in out.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream)">
             Create a stream for reading a PGP armoured message, parsing up to a header
             and then reading the data that follows.
            
             @param input
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream,System.Boolean)">
             Create an armoured input stream which will assume the data starts
             straight away, or parse for headers first depending on the value of
             hasHeaders.
            
             @param input
             @param hasHeaders true if headers are to be looked for, false otherwise.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.IsClearText">
            @return true if we are inside the clear text section of a PGP
            signed message.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.IsEndOfStream">
            @return true if the stream is actually at end of file.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.GetArmorHeaderLine">
            Return the armor header line (if there is one)
            @return the armor header line, null if none present.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredInputStream.GetArmorHeaders">
            Return the armor headers (the lines after the armor header line),
            @return an array of armor headers, null if there aren't any.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Reset">
      <summary>Reset the generator</summary>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Generate">
      <summary>Generate an X509Extensions object based on the current state of the generator.</summary>
      <returns>An <c>X509Extensions</c> object</returns>
    </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.IsEmpty">
      <summary>Return true if there are no extension present in this generator.</summary>
      <returns>True if empty, false otherwise</returns>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.UserNotice.#ctor(Org.BouncyCastle.Asn1.X509.NoticeReference,Org.BouncyCastle.Asn1.X509.DisplayText)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param explicitText a <code>DisplayText</code> value
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.UserNotice.#ctor(Org.BouncyCastle.Asn1.X509.NoticeReference,System.String)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param str the explicitText field as a string.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.#ctor(System.Collections.IList)">
             Constructor from an ArrayList of attributes.
            
             The ArrayList consists of attributes of type {@link Attribute Attribute}
            
             @param attributes The attributes.
            
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @return a DERObject
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.Attributes">
            @return Returns the attributes.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.ReasonFlags.#ctor(System.Int32)">
            @param reasons - the bitwise OR of the Key Reason flags giving the
            allowed uses for the key.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.GeneralSubtree.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @return a DERObject
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AccessDescription.AccessMethod">
            
             @return the access method.
        </member>
    <member name="P:Org.BouncyCastle.Asn1.X509.AccessDescription.AccessLocation">
            
             @return the access location
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.#ctor(System.Int32)">
            The OcspResponseStatus enumeration.
            <pre>
            OcspResponseStatus ::= Enumerated {
                successful            (0),  --Response has valid confirmations
                malformedRequest      (1),  --Illegal confirmation request
                internalError         (2),  --Internal error in issuer
                tryLater              (3),  --Try again later
                                            --(4) is not used
                sigRequired           (5),  --Must sign the request
                unauthorized          (6)   --Request unauthorized
            }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.ToAsn1Object">
      <pre>
             PkiArchiveOptions ::= CHOICE {
                 encryptedPrivKey     [0] EncryptedKey,
                 -- the actual value of the private key
                 keyGenParameters     [1] KeyGenParameters,
                 -- parameters which allow the private key to be re-generated
                 archiveRemGenPrivKey [2] BOOLEAN }
                 -- set to TRUE if sender wishes receiver to archive the private
                 -- key of a key pair that the receiver generates in response to
                 -- this request; set to FALSE if no archival is desired.
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.Controls.ToAsn1Object">
      <pre>
            Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.#ctor(Org.BouncyCastle.Asn1.Crmf.CertRequest,Org.BouncyCastle.Asn1.Crmf.ProofOfPossession,Org.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue[])">
            Creates a new CertReqMsg.
            @param certReq CertRequest
            @param popo may be null
            @param regInfo may be null
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.CertReqMsg.ToAsn1Object">
      <pre>
            CertReqMsg ::= SEQUENCE {
                               certReq   CertRequest,
                               pop       ProofOfPossession  OPTIONAL,
                               -- content depends upon key type
                               regInfo   SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.RevAnnContent.ToAsn1Object">
      <pre>
            RevAnnContent ::= SEQUENCE {
                  status              PKIStatus,
                  certId              CertId,
                  willBeRevokedAt     GeneralizedTime,
                  badSinceDate        GeneralizedTime,
                  crlDetails          Extensions  OPTIONAL
                   -- extra CRL details (e.g., crl number, reason, location, etc.)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PollReqContent.ToAsn1Object">
      <pre>
            PollReqContent ::= SEQUENCE OF SEQUENCE {
                                   certReqId              INTEGER
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertRepMessage.ToAsn1Object">
      <pre>
            CertRepMessage ::= SEQUENCE {
                                     caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                        OPTIONAL,
                                     response         SEQUENCE OF CertResponse
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input">
      </param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.Byte[])">
      <summary>
            Create loading data from byte array.
            </summary>
      <param name="input">
      </param>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.Rfc3280CertPathUtilities.ProcessCrlB2(Org.BouncyCastle.Asn1.X509.DistributionPoint,System.Object,Org.BouncyCastle.X509.X509Crl)">
             If the complete CRL includes an issuing distribution point (IDP) CRL
             extension check the following:
             <p>
             (i) If the distribution point name is present in the IDP CRL extension
             and the distribution field is present in the DP, then verify that one of
             the names in the IDP matches one of the names in the DP. If the
             distribution point name is present in the IDP CRL extension and the
             distribution field is omitted from the DP, then verify that one of the
             names in the IDP matches one of the names in the cRLIssuer field of the
             DP.
             </p><p>
             (ii) If the onlyContainsUserCerts boolean is asserted in the IDP CRL
             extension, verify that the certificate does not include the basic
             constraints extension with the cA boolean asserted.
             </p><p>
             (iii) If the onlyContainsCACerts boolean is asserted in the IDP CRL
             extension, verify that the certificate includes the basic constraints
             extension with the cA boolean asserted.
             </p><p>
             (iv) Verify that the onlyContainsAttributeCerts boolean is not asserted.
             </p>
            
             @param dp   The distribution point.
             @param cert The certificate.
             @param crl  The CRL.
             @throws AnnotatedException if one of the conditions is not met or an error occurs.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.Rfc3280CertPathUtilities.ProcessCrlB1(Org.BouncyCastle.Asn1.X509.DistributionPoint,System.Object,Org.BouncyCastle.X509.X509Crl)">
             If the DP includes cRLIssuer, then verify that the issuer field in the
             complete CRL matches cRLIssuer in the DP and that the complete CRL
             contains an
                  g distribution point extension with the indirectCRL
             boolean asserted. Otherwise, verify that the CRL issuer matches the
             certificate issuer.
            
             @param dp   The distribution point.
             @param cert The certificate ot attribute certificate.
             @param crl  The CRL for <code>cert</code>.
             @throws AnnotatedException if one of the above conditions does not apply or an error
                                        occurs.
        </member>
    <member name="M:Org.BouncyCastle.Pkix.Rfc3280CertPathUtilities.ProcessCrlC(Org.BouncyCastle.X509.X509Crl,Org.BouncyCastle.X509.X509Crl,Org.BouncyCastle.Pkix.PkixParameters)">
             If use-deltas is set, verify the issuer and scope of the delta CRL.
            
             @param deltaCRL    The delta CRL.
             @param completeCRL The complete CRL.
             @param pkixParams  The PKIX paramaters.
             @throws AnnotatedException if an exception occurs.
        </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[])">
             Just re-encode the outer layer of the PKCS#12 file to definite length encoding.
            
             @param berPKCS12File - original PKCS#12 file
             @return a byte array representing the DER encoding of the PFX structure
             @throws IOException
        </member>
    <member name="M:Org.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[],System.Char[])">
             Re-encode the PKCS#12 structure to definite length encoding at the inner layer
             as well, recomputing the MAC accordingly.
            
             @param berPKCS12File - original PKCS12 file.
             @param provider - provider to use for MAC calculation.
             @return a byte array representing the DER encoding of the PFX structure.
             @throws IOException on parsing, encoding errors.
        </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetTbsResponseData">
      <returns>The DER encoding of the tbsResponseData field.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetCertificates(System.String)">
      <returns>The certificates, if any, associated with the response.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Ocsp.BasicOcspResp.GetEncoded">
      <returns>The ASN.1 encoded representation of this object.</returns>
    </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.GetUnprotectedAttributes">
            return a table of the unprotected attributes indexed by
            the OID of the attribute.
        </member>
    <member name="M:Org.BouncyCastle.Cms.CmsEnvelopedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedData.EncryptionAlgOid">
            return the object identifier for the content encryption algorithm.
        </member>
    <member name="P:Org.BouncyCastle.Cms.CmsEnvelopedData.ContentInfo">
            return the ContentInfo 
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.Encode(System.IO.Stream,System.Int32[],System.Int32)">
            encode the input data producing a base 64 encoded byte array.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.SetHeader(System.String,System.String)">
             Set an additional header entry.
            
             @param name the name of the header entry.
             @param v the value of the header entry.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.ResetHeaders">
            Reset the headers to only contain a Version string.
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.BeginClearText(Org.BouncyCastle.Bcpg.HashAlgorithmTag)">
            Start a clear text signed message.
            @param hashAlgorithm
        </member>
    <member name="M:Org.BouncyCastle.Bcpg.ArmoredOutputStream.Close">
      <b>Note</b>: close does nor close the underlying stream. So it is possible to write
            multiple objects using armoring to a single stream.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.IetfAttrSyntax.ToAsn1Object">
      <pre>
            
              IetfAttrSyntax ::= Sequence {
                policyAuthority [0] GeneralNames OPTIONAL,
                values Sequence OF CHOICE {
                  octets OCTET STRING,
                  oid OBJECT IDENTIFIER,
                  string UTF8String
                }
              }
            
             </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.X509.AttCertValidityPeriod.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertValidityPeriod  ::= Sequence {
                  notBeforeTime  GeneralizedTime,
                  notAfterTime   GeneralizedTime
             }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.SingleResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SingleResponse ::= Sequence {
                     certID                       CertID,
                     certStatus                   CertStatus,
                     thisUpdate                   GeneralizedTime,
                     nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,
                     singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Misc.Cast5CbcParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            cast5CBCParameters ::= Sequence {
                                      iv         OCTET STRING DEFAULT 0,
                                             -- Initialization vector
                                      keyLength  Integer
                                             -- Key length, in bits
                                 }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.IsisMtt.X509.Admissions.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p />
             Returns:
             <p /><pre>
                   Admissions ::= SEQUENCE
                   {
                     admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                     namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                     professionInfos SEQUENCE OF ProfessionInfo
                   }
             <p /></pre>
            
             @return an Asn1Object
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificate.ToAsn1Object">
            The definition of SigningCertificate is
            <pre>
            SigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 12 }
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PopoPrivKey.ToAsn1Object">
      <pre>
            PopoPrivKey ::= CHOICE {
                   thisMessage       [0] BIT STRING,         -- Deprecated
                    -- possession is proven in this message (which contains the private
                    -- key itself (encrypted for the CA))
                   subsequentMessage [1] SubsequentMessage,
                    -- possession will be proven in a subsequent message
                   dhMAC             [2] BIT STRING,         -- Deprecated
                   agreeMAC          [3] PKMACValue,
                   encryptedKey      [4] EnvelopedData }
            </pre>
    </member>
    <member name="M:Org.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.ToAsn1Object">
      <pre>
            PkiPublicationInfo ::= SEQUENCE {
                             action     INTEGER {
                                            dontPublish (0),
                                            pleasePublish (1) },
                             pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }
            -- pubInfos MUST NOT be present if action is "dontPublish"
            -- (if action is "pleasePublish" and pubInfos is omitted,
            -- "dontCare" is assumed)
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.GetInstance(System.Object)">
             return an AuthenticatedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.AuthenticatedData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.Attributes.ToAsn1Object">
      <pre>
            Attributes ::=
              SET SIZE(1..MAX) OF Attribute -- according to RFC 5652
            </pre>
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiMessage.ToAsn1Object">
      <pre>
            PkiMessage ::= SEQUENCE {
                             header           PKIHeader,
                             body             PKIBody,
                             protection   [0] PKIProtection OPTIONAL,
                             extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.CertOrEncCert.ToAsn1Object">
      <pre>
            CertOrEncCert ::= CHOICE {
                                 certificate     [0] CMPCertificate,
                                 encryptedCert   [1] EncryptedValue
                      }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.Reset">
      <summary>
            Reset the generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetNotBefore(System.DateTime)">
      <summary>
            Set the date that this certificate is to be valid from.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetNotAfter(System.DateTime)">
      <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
      <param name="date" />
    </member>
    <member name="M:Org.BouncyCastle.X509.X509V1CertificateGenerator.SetSignatureAlgorithm(System.String)">
      <summary>
            Set the signature algorithm that will be used to sign this certificate.
            This can be either a name or an OID, names are treated as case insensitive.
            </summary>
      <param name="signatureAlgorithm">string representation of the algorithm name</param>
    </member>
    <member name="P:Org.BouncyCastle.X509.X509V1CertificateGenerator.SignatureAlgNames">
      <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
    </member>
    <member name="M:Org.BouncyCastle.Utilities.IO.Pem.PemObjectParser.ParseObject(Org.BouncyCastle.Utilities.IO.Pem.PemObject)">
      <param name="obj">
            A </param>
      <returns>
            A <see cref="T:System.Object" /></returns>
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.CombinedHash.GetByteLength">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.CombinedHash.GetDigestSize">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.CombinedHash.Update(System.Byte)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.CombinedHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.CombinedHash.DoFinal(System.Byte[],System.Int32)">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Tls.CombinedHash.Reset">
    </member>
    <member name="P:Org.BouncyCastle.Crypto.Tls.CombinedHash.AlgorithmName">
    </member>
    <member name="M:Org.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])">
            Generates client's credentials given the client's salt, identity and password
            @param salt The salt used in the client's verifier.
            @param identity The user's identity (eg. username)
            @param password The user's password
            @return Client's public value to send to server
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKP">
            Key purpose IDs for German SigI (Signature Interoperability
            Specification)
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICP">
            Certificate policy IDs for German SigI (Signature Interoperability
            Specification)
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigION">
            Other Name IDs for German SigI (Signature Interoperability Specification)
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKPDirectoryService">
            To be used for for the generation of directory service certificates.
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIONPersonalData">
            ID for PersonalData
        </member>
    <member name="F:Org.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICPSigConform">
            Certificate is conform to german signature law.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.#ctor">
            The default version
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.ToAsn1Object">
      <pre>
              RSAES-OAEP-params ::= SEQUENCE {
                 hashAlgorithm      [0] OAEP-PSSDigestAlgorithms     DEFAULT sha1,
                 maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                 pSourceAlgorithm   [2] PKCS1PSourceAlgorithms  DEFAULT pSpecifiedEmpty
               }
            
               OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-sha1 PARAMETERS NULL   }|
                 { OID id-sha256 PARAMETERS NULL }|
                 { OID id-sha384 PARAMETERS NULL }|
                 { OID id-sha512 PARAMETERS NULL },
                 ...  -- Allows for future expansion --
               }
               PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
               }
               PKCS1PSourceAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-pSpecified PARAMETERS OCTET STRING },
                 ...  -- Allows for future expansion --
              }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ocsp.TbsRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            TBSRequest      ::=     Sequence {
                version             [0]     EXPLICIT Version DEFAULT v1,
                requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                requestList                 Sequence OF Request,
                requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.SigningCertificateV2.ToAsn1Object">
            The definition of SigningCertificateV2 is
            <pre>
            SigningCertificateV2 ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertIDv2,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificateV2 OBJECT IDENTIFIER ::= { iso(1)
               member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
               smime(16) id-aa(2) 47 }
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentIdentifier.#ctor(System.Byte[])">
            Create from byte array representing the identifier.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Ess.ContentIdentifier.ToAsn1Object">
            The definition of ContentIdentifier is
            <pre>
            ContentIdentifier ::=  OCTET STRING
            </pre>
            id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 7 }
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.TimeStampedData.ToAsn1Object">
      <pre>
            TimeStampedData ::= SEQUENCE {
              version              INTEGER { v1(1) },
              dataUri              IA5String OPTIONAL,
              metaData             MetaData OPTIONAL,
              content              OCTET STRING OPTIONAL,
              temporalEvidence     Evidence
            }
            </pre>
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.GetInstance(System.Object)">
             return a SignerIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.SignerIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             SignerIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre></member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.MetaData.ToAsn1Object">
      <pre>
            MetaData ::= SEQUENCE {
              hashProtected        BOOLEAN,
              fileName             UTF8String OPTIONAL,
              mediaType            IA5String OPTIONAL,
              otherMetaData        Attributes OPTIONAL
            }
            </pre>
            @return
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.GetInstance(System.Object)">
             return a KeyTransRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyTransRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre></member>
    <member name="F:Org.BouncyCastle.Asn1.Cmp.PkiHeader.NULL_NAME">
            Value for a "null" recipient or sender.
        </member>
    <member name="M:Org.BouncyCastle.Asn1.Cmp.PkiHeader.ToAsn1Object">
      <pre>
             PkiHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
    <member name="M:TallComponents.Utility.Text.Breaks.CanBreak(System.Char,System.Char)">
      <summary>
            Indicates if we can break before this character (and after the previous one).
            </summary>
      <param name="current">
      </param>
      <param name="previous">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.Utility.Text.Breaks.BreakIntoWords(System.String)">
      <summary>
            Breaks a text into separate words.
            </summary>
      <param name="text">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:com.google.zxing.common.BitSource.#ctor(System.SByte[])">
      <param name="bytes">bytes from which this will read bits. Bits will be read from the first byte first.
            Bits are read within a byte from most-significant to least-significant bit.
            </param>
    </member>
    <member name="M:com.google.zxing.common.BitSource.readBits(System.Int32)">
      <param name="numBits">number of bits to read
            </param>
      <returns> int representing the bits read. The bits will appear as the least-significant
            bits of the int
            </returns>
      <throws>  IllegalArgumentException if numBits isn't in [1,32] </throws>
    </member>
    <member name="M:com.google.zxing.common.BitSource.available">
      <returns> number of bits that can be read successfully
            </returns>
    </member>
    <member name="F:com.google.zxing.qrcode.decoder.FormatInformation.FORMAT_INFO_DECODE_LOOKUP">
      <summary> See ISO 18004:2006, Annex C, Table C.1</summary>
    </member>
    <member name="F:com.google.zxing.qrcode.decoder.FormatInformation.BITS_SET_IN_HALF_BYTE">
      <summary> Offset i holds the number of 1 bits in the binary representation of i</summary>
    </member>
    <member name="M:com.google.zxing.qrcode.decoder.FormatInformation.decodeFormatInformation(System.Int32)">
      <param name="maskedFormatInfo">format info indicator, with mask still applied
            </param>
      <returns> information about the format it specifies, or <code>null</code>
            if doesn't seem to match any known pattern
            </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "T:com.google.zxing.common.ByteMatrix" -->
    <member name="M:com.google.zxing.common.BitMatrix.get_Renamed(System.Int32,System.Int32)">
      <summary>
        <p>Gets the requested bit, where true means black.</p>
      </summary>
      <param name="x">The horizontal component (i.e. which column)
            </param>
      <param name="y">The vertical component (i.e. which row)
            </param>
      <returns> value of given bit in matrix
            </returns>
    </member>
    <member name="M:com.google.zxing.common.BitMatrix.set_Renamed(System.Int32,System.Int32)">
      <summary>
        <p>Sets the given bit to true.</p>
      </summary>
      <param name="x">The horizontal component (i.e. which column)
            </param>
      <param name="y">The vertical component (i.e. which row)
            </param>
    </member>
    <member name="M:com.google.zxing.common.BitMatrix.flip(System.Int32,System.Int32)">
      <summary>
        <p>Flips the given bit.</p>
      </summary>
      <param name="x">The horizontal component (i.e. which column)
            </param>
      <param name="y">The vertical component (i.e. which row)
            </param>
    </member>
    <member name="M:com.google.zxing.common.BitMatrix.clear">
      <summary> Clears all bits (sets to false).</summary>
    </member>
    <member name="M:com.google.zxing.common.BitMatrix.setRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <p>Sets a square region of the bit matrix to true.</p>
      </summary>
      <param name="left">The horizontal position to begin at (inclusive)
            </param>
      <param name="top">The vertical position to begin at (inclusive)
            </param>
      <param name="width">The width of the region
            </param>
      <param name="height">The height of the region
            </param>
    </member>
    <member name="M:com.google.zxing.common.BitMatrix.getRow(System.Int32,com.google.zxing.common.BitArray)">
      <summary> A fast method to retrieve one row of data from the matrix as a BitArray.
            
            </summary>
      <param name="y">The row to retrieve
            </param>
      <param name="row">An optional caller-allocated BitArray, will be allocated if null or too small
            </param>
      <returns> The resulting BitArray - this reference should always be used even when passing
            your own row
            </returns>
    </member>
    <member name="P:com.google.zxing.common.BitMatrix.Width">
      <returns> The width of the matrix
            </returns>
    </member>
    <member name="P:com.google.zxing.common.BitMatrix.Height">
      <returns> The height of the matrix
            </returns>
    </member>
    <member name="P:com.google.zxing.common.BitMatrix.Dimension">
      <summary> This method is for compatibility with older code. It's only logical to call if the matrix
            is square, so I'm throwing if that's not the case.
            
            </summary>
      <returns> row/column dimension of this matrix
            </returns>
    </member>
    <member name="M:com.google.zxing.common.BitArray.get_Renamed(System.Int32)">
      <param name="i">bit to get
            </param>
      <returns> true iff bit i is set
            </returns>
    </member>
    <member name="M:com.google.zxing.common.BitArray.set_Renamed(System.Int32)">
      <summary> Sets bit i.
            
            </summary>
      <param name="i">bit to set
            </param>
    </member>
    <member name="M:com.google.zxing.common.BitArray.flip(System.Int32)">
      <summary> Flips bit i.
            
            </summary>
      <param name="i">bit to set
            </param>
    </member>
    <member name="M:com.google.zxing.common.BitArray.setBulk(System.Int32,System.Int32)">
      <summary> Sets a block of 32 bits, starting at bit i.
            
            </summary>
      <param name="i">first bit to set
            </param>
      <param name="newBits">the new value of the next 32 bits. Note again that the least-significant bit
            corresponds to bit i, the next-least-significant to i+1, and so on.
            </param>
    </member>
    <member name="M:com.google.zxing.common.BitArray.clear">
      <summary> Clears all bits (sets to false).</summary>
    </member>
    <member name="M:com.google.zxing.common.BitArray.isRange(System.Int32,System.Int32,System.Boolean)">
      <summary> Efficient method to check if a range of bits is set, or not set.
            
            </summary>
      <param name="start">start of range, inclusive.
            </param>
      <param name="end">end of range, exclusive
            </param>
      <param name="value">if true, checks that bits in range are set, otherwise checks that they are not set
            </param>
      <returns> true iff all bits are set or not set in range, according to value argument
            </returns>
      <throws>  IllegalArgumentException if end is less than or equal to start </throws>
    </member>
    <member name="M:com.google.zxing.common.BitArray.getBitArray">
      <returns> underlying array of ints. The first element holds the first 32 bits, and the least
            significant bit is bit 0.
            </returns>
    </member>
    <member name="M:com.google.zxing.common.BitArray.reverse">
      <summary> Reverses all bits in the array.</summary>
    </member>
    <member name="T:TallComponents.JavaScript.ReferenceError">
      <summary>
            The exception thrown when a reference error occurs.
            </summary>
    </member>
    <member name="T:TallComponents.JavaScript.JavaScriptException">
      <summary>
            JavaScript exception class
            </summary>
    </member>
    <member name="T:TallComponents.JavaScript.SyntaxError">
      <summary>
            The exception thrown when a syntax error occurs.
            </summary>
    </member>
    <member name="P:TallComponents.JavaScript.SyntaxError.Line">
      <summary>
            The line where the error occured.
            </summary>
    </member>
    <member name="T:TallComponents.JavaScript.RangeError">
      <summary>
            The exception thrown when a range error occurs.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:TallComponents.JavaScript.Program.Execute(TallComponents.JavaScript.GlobalObject)" -->
    <member name="M:TallComponents.PDF.JavaScript.DumpJavaScriptDOM.Write(System.Reflection.Assembly,System.IO.Stream)">
      <summary>
            Writes the DOM which is located inside this assembly.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:TallComponents.JavaScript.JavaScriptParser.#ctor" -->
    <member name="T:TallComponents.JavaScript.UriError">
      <summary>
            The exception thrown when a URI error occurs.
            </summary>
    </member>
    <member name="T:TallComponents.JavaScript.TypeError">
      <summary>
            The exception thrown when a type error occurs.
            </summary>
    </member>
  </members>
</doc>